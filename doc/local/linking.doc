/*! 
\page linking Linking with StdAir

\section toc Table of Contents
- \ref intro
- \ref pkgconfig
- \ref stdair_config
- \ref autotools
- \ref dynamiclinking


\section intro Introduction

There are two convenient methods of linking your
programs with the StdAir library. The first one employs the \c
`pkg-config' command (see <a href="http://pkgconfig.freedesktop.org/">
http://pkgconfig.freedesktop.org/</a>), whereas the second one uses \c
`stdair-config' script. These methods are shortly described below.


\section pkgconfig Using the pkg-config command

\c `pkg-config' is a helper tool used when compiling applications and
libraries. It helps you insert the correct compiler and linker
options. The syntax of the \c `pkg-config' is as follows:

\code
pkg-config <options> <library_name>  
\endcode

For instance, assuming that you need to compile an StdAir based program
<tt>`my_prog.cpp'</tt>, you should use the following command:

\code
g++ `pkg-config --cflags stdair` -o my_prog my_prog.cpp \
 `pkg-config --libs stdair`
\endcode  

For more information see the \c `pkg-config' man pages.


\section stdair_config Using the stdair-config script

StdAir provides a shell script called \c `stdair-config`, which is
installed by default in \c `$prefix/bin'
(\c `/usr/local/bin') directory. It can be used to simplify
compilation and linking of StdAir based programs. The usage of this
script is quite similar to the usage of the \c `pkg-config' command.

Assuming that you need to compile the program \c `my_prog.cpp'
you can now do that with the following command:

\code
g++ `stdair-config --cflags` -o my_prog my_prog.cpp `stdair-config --libs`
\endcode

A list of \c `stdair-config' options can be obtained by typing:

\code
stdair-config --help
\endcode

If the \c `stdair-config' command is not found by your shell, you should add
its location \c `$prefix/bin' to the \c PATH environment variable, e.g.:

\code
export PATH=/usr/local/bin:$PATH
\endcode


\section autotools M4 macro for the GNU Autotools

A M4 macro file is delivered with StdAir, namely `stdair.m4', which
can be found in, e.g., `/usr/share/aclocal'. When used by a
`configure' script, thanks to he <tt>`AM_PATH_STDAIR'</tt> macro
(specified in the M4 macro file), the following Makefile variables are
then defined:
- <tt>`STDAIR_VERSION'</tt> (e.g., defined to 0.2.0)
- <tt>`STDAIR_CFLAGS'</tt> (e.g., defined to <tt>`-I${prefix}/include'</tt>)
- <tt>`STDAIR_LIBS'</tt> (e.g., defined to <tt>`-L${prefix}/lib -lstdair'</tt>)



\section dynamiclinking Using StdAir with dynamic linking

When using static linking some of the library routines in StdAir are
copied into your executable program. This can lead to unnecessary
large executables. To avoid having too large executable files you may
use dynamic linking instead. Dynamic linking means that the actual
linking is performed when the program is executed. This requires that
the system is able to locate the shared StdAir library file during your
program execution. If you install the StdAir library using a non-standard
prefix, the \c `LD_LIBRARY_PATH' environment variable might be used to
inform the linker of the dynamic library location, e.g.:
\code
export LD_LIBRARY_PATH=<StdAir installation prefix>/lib:$LD_LIBRARY_PATH
\endcode

*/
