<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>stdair.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/batches/</path>
    <filename>a00221</filename>
  </compound>
  <compound kind="file">
    <name>authors.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00222</filename>
  </compound>
  <compound kind="file">
    <name>codingrules.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00223</filename>
  </compound>
  <compound kind="file">
    <name>copyright.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00224</filename>
  </compound>
  <compound kind="file">
    <name>documentation.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00225</filename>
  </compound>
  <compound kind="file">
    <name>features.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00226</filename>
  </compound>
  <compound kind="file">
    <name>help_wanted.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00227</filename>
  </compound>
  <compound kind="file">
    <name>howto_release.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00228</filename>
  </compound>
  <compound kind="file">
    <name>index.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00229</filename>
  </compound>
  <compound kind="file">
    <name>installation.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00230</filename>
  </compound>
  <compound kind="file">
    <name>linking.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00231</filename>
  </compound>
  <compound kind="file">
    <name>test.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00232</filename>
  </compound>
  <compound kind="file">
    <name>users_guide.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00233</filename>
  </compound>
  <compound kind="file">
    <name>verification.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/local/</path>
    <filename>a00234</filename>
  </compound>
  <compound kind="file">
    <name>tutorial.doc</name>
    <path>/home/build/dev/sim/stdair/stdairgit/doc/tutorial/</path>
    <filename>a00235</filename>
  </compound>
  <compound kind="file">
    <name>BasChronometer.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00236</filename>
    <includes id="a00237" name="BasChronometer.hpp" local="no" imported="no">stdair/basic/BasChronometer.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BasChronometer.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00237</filename>
    <class kind="struct">stdair::BasChronometer</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BasConst.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00238</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00242" name="BasConst_Event.hpp" local="no" imported="no">stdair/basic/BasConst_Event.hpp</includes>
    <includes id="a00246" name="BasConst_Request.hpp" local="no" imported="no">stdair/basic/BasConst_Request.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00240" name="BasConst_BookingClass.hpp" local="no" imported="no">stdair/basic/BasConst_BookingClass.hpp</includes>
    <includes id="a00249" name="BasConst_Yield.hpp" local="no" imported="no">stdair/basic/BasConst_Yield.hpp</includes>
    <includes id="a00241" name="BasConst_DefaultObject.hpp" local="no" imported="no">stdair/basic/BasConst_DefaultObject.hpp</includes>
    <includes id="a00245" name="BasConst_Period_BOM.hpp" local="no" imported="no">stdair/basic/BasConst_Period_BOM.hpp</includes>
    <includes id="a00248" name="BasConst_TravelSolution.hpp" local="no" imported="no">stdair/basic/BasConst_TravelSolution.hpp</includes>
    <includes id="a00247" name="BasConst_SellUpCurves.hpp" local="no" imported="no">stdair/basic/BasConst_SellUpCurves.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT_BOM_ROOT_KEY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8628d4a46a9b744a02f42b94dbfaedb3</anchor>
      <arglist>(&quot; -- ROOT -- &quot;)</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>DEFAULT_EPSILON_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a23bc22990c7e707c6ebf0837c0d0952e</anchor>
      <arglist>(0.0001)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int</type>
      <name>DEFAULT_FLIGHT_SPEED</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab2840da0dc0d85b6403e36b8606a04f5</anchor>
      <arglist>(900)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfFlightDates_T</type>
      <name>DEFAULT_NB_OF_FLIGHTDATES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6565466a56f779c5d808fad6060541bb</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>NULL_BOOST_TIME_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af3a3785e58d171fc31937f237d3378ea</anchor>
      <arglist>(-1,-1,-1)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_NULL_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a907e0b6423372af6532417bb47741c36</anchor>
      <arglist>(0, 0, 0)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int</type>
      <name>DEFAULT_NB_OF_DAYS_IN_A_YEAR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a997729d9a5f77b9b004b120fc4a46bb6</anchor>
      <arglist>(365)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int</type>
      <name>DEFAULT_NUMBER_OF_SUBDIVISIONS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa1c9a855ff6dc76a4827043f99008831</anchor>
      <arglist>(1000)</arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T</type>
      <name>DEFAULT_DAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a51ed94c8d8836692f1e6936b461c8e3b</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const DatePeriod_T</type>
      <name>BOOST_DEFAULT_DATE_PERIOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a384e592bde5f3b71c7ee6ca1e04a79eb</anchor>
      <arglist>(Date_T(2007, 1, 1), Date_T(2007, 1, 1))</arglist>
    </member>
    <member kind="function">
      <type>const DOW_String_T</type>
      <name>DEFAULT_DOW_STRING</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a29cd534d1010229bbffbe3b4591a382e</anchor>
      <arglist>(&quot;0000000&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const DateOffset_T</type>
      <name>DEFAULT_DATE_OFFSET</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad686c292d8ed6133bef59d095a645218</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DEFAULT_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6baf04aa8f796b57b816ea8506dc23c6</anchor>
      <arglist>(2010, boost::gregorian::Jan, 1)</arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T</type>
      <name>DEFAULT_DATETIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7930a9d1c7bf90d829f7d80be118526a</anchor>
      <arglist>(DEFAULT_DATE, NULL_BOOST_TIME_DURATION)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_EPSILON_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aad5ea6fff895d534f99e0101b7cb9130</anchor>
      <arglist>(0, 0, 0, 1)</arglist>
    </member>
    <member kind="function">
      <type>const Count_T</type>
      <name>SECONDS_IN_ONE_DAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8c351889858aeb91703a8cd4c2a09edd</anchor>
      <arglist>(86400)</arglist>
    </member>
    <member kind="function">
      <type>const Count_T</type>
      <name>MILLISECONDS_IN_ONE_SECOND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a598d1f1c32caa4d8684f227f76eaceed</anchor>
      <arglist>(1000)</arglist>
    </member>
    <member kind="function">
      <type>const RandomSeed_T</type>
      <name>DEFAULT_RANDOM_SEED</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6e58dc4a22ad49a0220136c66e5c4ff5</anchor>
      <arglist>(120765987)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>AIRPORT_LHR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad94c53000fb8c13f0b548dde8de92d59</anchor>
      <arglist>(&quot;LHR&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>AIRPORT_SYD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a57705bd4a651784d731abd6130fc48cd</anchor>
      <arglist>(&quot;SYD&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CityCode_T</type>
      <name>POS_LHR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6c5d15ee5c55319f812062f3b4300712</anchor>
      <arglist>(&quot;LHR&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DATE_20110115</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a486562308f66e32cfc12ec11a56fa292</anchor>
      <arglist>(2011, boost::gregorian::Jan, 15)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DATE_20111231</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a264d1b6208b31c172f1f46b7f863f571</anchor>
      <arglist>(2011, boost::gregorian::Dec, 31)</arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T</type>
      <name>NO_ADVANCE_PURCHASE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae949fe2b13e857b2e8a4f347f9bc3d71</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const SaturdayStay_T</type>
      <name>SATURDAY_STAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aba7c56ac4948969f5ac2e12a039fb4a8</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const SaturdayStay_T</type>
      <name>NO_SATURDAY_STAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a965ef08a533e24ba0fb5aec1042396f0</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const ChangeFees_T</type>
      <name>CHANGE_FEES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae8053b79f03d4b9254703dbd0c55188f</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const ChangeFees_T</type>
      <name>NO_CHANGE_FEES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a33350ce52659ffb810c82ab593ca41d8</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const NonRefundable_T</type>
      <name>NON_REFUNDABLE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a56e8bddb25c18de1110a8f619d18719f</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const NonRefundable_T</type>
      <name>NO_NON_REFUNDABLE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abcd80b454ecbf8561640e102296782e3</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const SaturdayStay_T</type>
      <name>DEFAULT_BOM_TREE_SATURDAY_STAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aadf6813a0635c3413920049940f5a2a5</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const ChangeFees_T</type>
      <name>DEFAULT_BOM_TREE_CHANGE_FEES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab12c32370d874e1a3cc1e6aca860a3a4</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const NonRefundable_T</type>
      <name>DEFAULT_BOM_TREE_NON_REFUNDABLE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6268e43cae35582db201d355ce71985a</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T</type>
      <name>NO_STAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acb4f275f4acbea4b7d8706494fd0b379</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T</type>
      <name>AIRLINE_CODE_BA</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3c54cce444b6feaafb50b6321819d346</anchor>
      <arglist>(&quot;BA&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T</type>
      <name>CABIN_Y</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8f62d9331d9b7b71dbfa48efc97b9374</anchor>
      <arglist>(&quot;Y&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T</type>
      <name>CLASS_CODE_Y</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7ecbaaa7cf632a9dbca43e302d163ee1</anchor>
      <arglist>(&quot;Y&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T</type>
      <name>CLASS_CODE_Q</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae994c8072ccbec015d0264d9138c28f8</anchor>
      <arglist>(&quot;Q&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>AIRPORT_SIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aed8bdf324416790ba0de943e4b0e90f5</anchor>
      <arglist>(&quot;SIN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>AIRPORT_BKK</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a10c6822547224105bd6e2841fea7bfa0</anchor>
      <arglist>(&quot;BKK&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CityCode_T</type>
      <name>POS_SIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af421361b0b56d1a23bfd41d8e7ed4d3b</anchor>
      <arglist>(&quot;SIN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T</type>
      <name>CABIN_ECO</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af696d067408395e5ffdc55678408abf6</anchor>
      <arglist>(&quot;Eco&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FrequentFlyer_T</type>
      <name>FREQUENT_FLYER_MEMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a08e6076520b28c9c33c448244529f35d</anchor>
      <arglist>(&quot;M&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FamilyCode_T</type>
      <name>DEFAULT_FAMILY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8b5530d789e1db2a433bd6309a46c4dc</anchor>
      <arglist>(&quot;0&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const PolicyCode_T</type>
      <name>DEFAULT_POLICY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a38a7f9b6338cec8f5c6239f7a7557f82</anchor>
      <arglist>(&quot;0&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NestingStructureCode_T</type>
      <name>DEFAULT_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac74ff9ed3052b46002ad167c61b5ae91</anchor>
      <arglist>(&quot;DEFAULT&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NestingStructureCode_T</type>
      <name>DISPLAY_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6516db7e5ddcb927ac53135fd9dbaf75</anchor>
      <arglist>(&quot;Display Nesting&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NestingStructureCode_T</type>
      <name>YIELD_BASED_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af9be3cb7aefc7c3e544aec1f251f63f7</anchor>
      <arglist>(&quot;Yield-Based Nesting&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NestingNodeCode_T</type>
      <name>DEFAULT_NESTING_NODE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a98efc55cabbf967f5bb52b33305d90d5</anchor>
      <arglist>(&quot;0&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfAirlines_T</type>
      <name>DEFAULT_NBOFAIRLINES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3aba1f4514fd3068179c1d6b72aad820</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const FlightPathCode_T</type>
      <name>DEFAULT_FLIGHTPATH_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a35d2a88af346b291697dbce61d62999a</anchor>
      <arglist>(&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const Distance_T</type>
      <name>DEFAULT_DISTANCE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeceff1f1215cfa45c95595eb93b28720</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T</type>
      <name>DEFAULT_CLOSED_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a34323bf35b8ee38c6f382a426643854b</anchor>
      <arglist>(&quot;CC&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_NB_OF_BOOKINGS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a987184b6784ef5255ff1a0a100e9b2b0</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_TOTAL_NB_OF_BOOKINGS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af12424cc63b969fbe5fe7204d9d6f082</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_UNCONSTRAINED_DEMAND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa465bd810c0ffc9372a9bb0f024ce4e5</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_REMAINING_DEMAND_MEAN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a26aa84d5118fb19e6dcd0cfc3ec55aa6</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_REMAINING_DEMAND_STANDARD_DEVIATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6daaf1fff08df42d1a837696d70335e9</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfCancellations_T</type>
      <name>DEFAULT_CLASS_NB_OF_CANCELLATIONS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4a5f86435012b5be854b324d898a6526</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfNoShows_T</type>
      <name>DEFAULT_CLASS_NB_OF_NOSHOWS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae0aebb05ee4ca9094fd5f187e59ed9a9</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const CabinCapacity_T</type>
      <name>DEFAULT_CABIN_CAPACITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aecec307c21e7820db6aa1245690a79d6</anchor>
      <arglist>(100.0)</arglist>
    </member>
    <member kind="function">
      <type>const CommittedSpace_T</type>
      <name>DEFAULT_COMMITTED_SPACE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae7877b5b23bffe313fb3789ef6e0ad03</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const BlockSpace_T</type>
      <name>DEFAULT_BLOCK_SPACE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a57435f99145e1e68f7fc198d3475192f</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Availability_T</type>
      <name>DEFAULT_NULL_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a065096cbc4cf702acebfd123fb710403</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Availability_T</type>
      <name>DEFAULT_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6e4cd25611a3ebbf65fa64f1a133dcc7</anchor>
      <arglist>(9.0)</arglist>
    </member>
    <member kind="function">
      <type>const Availability_T</type>
      <name>MAXIMAL_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5c266b65d065836129c9023f33c678d0</anchor>
      <arglist>(9999.0)</arglist>
    </member>
    <member kind="function">
      <type>const CensorshipFlag_T</type>
      <name>DEFAULT_CLASS_CENSORSHIPFLAG</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0068a44cf567e1cb20acdb3988a9750b</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const BookingLimit_T</type>
      <name>DEFAULT_CLASS_BOOKING_LIMIT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a24566f6f74886f1335ce24ee49955cd0</anchor>
      <arglist>(9999.0)</arglist>
    </member>
    <member kind="function">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a06ec619a5f2a146515363fe452cc57da</anchor>
      <arglist>(9999.0)</arglist>
    </member>
    <member kind="function">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_MAX_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a287a9e38b7a6aead5ef0b09e5414f774</anchor>
      <arglist>(9999.0)</arglist>
    </member>
    <member kind="function">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_MIN_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7ccd1852382f950847a5adf9f003313f</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const OverbookingRate_T</type>
      <name>DEFAULT_CLASS_OVERBOOKING_RATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acd3ad4a7a3af7fc4130df7fa5f845a4d</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const BookingRatio_T</type>
      <name>DEFAULT_OND_BOOKING_RATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a89464de2ba21687c2398bf2404310fbb</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Fare_T</type>
      <name>DEFAULT_FARE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae4733c4ea5eb94ccce5b727062fe10dd</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Yield_T</type>
      <name>DEFAULT_CLASS_YIELD_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afbe65d8db322f542a955a726834d4e80</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Revenue_T</type>
      <name>DEFAULT_REVENUE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad9e2da88c1b02edbf3b287d854ce6d3e</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Percentage_T</type>
      <name>DEFAULT_LOAD_FACTOR_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acb126d52ee9b89ac839a5880c6bdc8bc</anchor>
      <arglist>(100.0)</arglist>
    </member>
    <member kind="function">
      <type>const Yield_T</type>
      <name>DEFAULT_YIELD_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac07abd9d9a1ebce2b20728bf0ac3200b</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Yield_T</type>
      <name>DEFAULT_YIELD_MAX_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa23dcc54129a0f2317966ec8ed95e57e</anchor>
      <arglist>(std::numeric_limits&lt; double &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_YIELD_NB_OF_BOOKINGS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa0c5547373299695939ce90abab3cd12</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Identity_T</type>
      <name>DEFAULT_BOOKING_NUMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaa41c8f670825bd7cd7f7d376a5a83d8</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfCancellations_T</type>
      <name>DEFAULT_YIELD_NB_OF_CANCELLATIONS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad8c1d0496fafb1661d2b9219ca32d4f8</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfNoShows_T</type>
      <name>DEFAULT_YIELD_NB_OF_NOSHOWS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9bbdcbf56ee6790b0ecdabcab0ff8263</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Availability_T</type>
      <name>DEFAULT_YIELD_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af82e1fb2625bb3a9473aaeae935383bf</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const CensorshipFlag_T</type>
      <name>DEFAULT_YIELD_CENSORSHIPFLAG</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7cb5b18665d32a9d4403c9e423568526</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const BookingLimit_T</type>
      <name>DEFAULT_YIELD_BOOKING_LIMIT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a843e7de37615595a22f653f4872c4f28</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const OverbookingRate_T</type>
      <name>DEFAULT_YIELD_OVERBOOKING_RATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a78e8a002e32a3a95812f9d17c611b5f5</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Fare_T</type>
      <name>DEFAULT_OND_FARE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0b411970874111f47740d4c05fc80345</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Count_T</type>
      <name>DEFAULT_PROGRESS_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a84a7224d7c62c6ed796d71d3ae847515</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const Percentage_T</type>
      <name>MAXIMUM_PROGRESS_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac522706e02f8de033b1aa6af7d0c98de</anchor>
      <arglist>(100)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DEFAULT_EVENT_OLDEST_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a94b186ad5e12f282d01718cb6de16a85</anchor>
      <arglist>(2008, boost::gregorian::Jan, 1)</arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T</type>
      <name>DEFAULT_EVENT_OLDEST_DATETIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aee7a986079f37e4d4fbe317a9ccf9881</anchor>
      <arglist>(DEFAULT_EVENT_OLDEST_DATE, NULL_BOOST_TIME_DURATION)</arglist>
    </member>
    <member kind="function">
      <type>const PartySize_T</type>
      <name>DEFAULT_PARTY_SIZE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2e90930c99b6c8e938f1ef0e1d1a7d7b</anchor>
      <arglist>(1)</arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T</type>
      <name>DEFAULT_STAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af96c78abf7c7f1a46e811d386c7ef7c8</anchor>
      <arglist>(7)</arglist>
    </member>
    <member kind="function">
      <type>const WTP_T</type>
      <name>DEFAULT_WTP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9821f63450dfcb76eb2324e1e3285830</anchor>
      <arglist>(1000.0)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DEFAULT_PREFERRED_DEPARTURE_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a63c8e8e63928bdedaf5b18ecfe1fd1e6</anchor>
      <arglist>(DEFAULT_DEPARTURE_DATE)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_PREFERRED_DEPARTURE_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0ff370dffdd4e5f7328674ab71dd94b1</anchor>
      <arglist>(8, 0, 0)</arglist>
    </member>
    <member kind="function">
      <type>const DateOffset_T</type>
      <name>DEFAULT_ADVANCE_PURCHASE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3ec5960267f8c99660f9634e89706525</anchor>
      <arglist>(22)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DEFAULT_REQUEST_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a105bb7139aa559f68015a77f67bbf301</anchor>
      <arglist>(DEFAULT_PREFERRED_DEPARTURE_DATE-DEFAULT_ADVANCE_PURCHASE)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_REQUEST_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abb30ae74239e6e715e9e3eed45c40c6f</anchor>
      <arglist>(8, 0, 0)</arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T</type>
      <name>DEFAULT_REQUEST_DATE_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a195da6899c424230fd76c33ea349c71d</anchor>
      <arglist>(DEFAULT_REQUEST_DATE, DEFAULT_REQUEST_TIME)</arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T</type>
      <name>DEFAULT_PREFERRED_CABIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac808cadd6f223c4fd733a8dcae5d6de3</anchor>
      <arglist>(&quot;M&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CityCode_T</type>
      <name>DEFAULT_POS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa1f7cac10650b542051ae3d5238ea53a</anchor>
      <arglist>(&quot;ALL&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelLabel_T</type>
      <name>DEFAULT_CHANNEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad4e9ca6aff79a6534fe843bba5d7282b</anchor>
      <arglist>(&quot;DC&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelLabel_T</type>
      <name>CHANNEL_DN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0f20ee49a282e73da592f9ebb7d87645</anchor>
      <arglist>(&quot;DN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelLabel_T</type>
      <name>CHANNEL_IN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aec1287de7abe0209cabc438f6e93e262</anchor>
      <arglist>(&quot;IN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_ONE_WAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afaa7187a1257a5d29109cdc7421409f4</anchor>
      <arglist>(&quot;OW&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_ROUND_TRIP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab4ca91711ceaee9409eef92b5bba958a</anchor>
      <arglist>(&quot;RT&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_INBOUND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1d167b8c7d46732d1f549fbd9df616f6</anchor>
      <arglist>(&quot;RI&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_OUTBOUND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa59ef6e5920dafdb73a4a5be958b4454</anchor>
      <arglist>(&quot;RO&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FrequentFlyer_T</type>
      <name>DEFAULT_FF_TIER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7c441322681e121a03369cb49c2623a0</anchor>
      <arglist>(&quot;N&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const PriceValue_T</type>
      <name>DEFAULT_VALUE_OF_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab858c30af37af1c136bee9888833b461</anchor>
      <arglist>(100.0)</arglist>
    </member>
    <member kind="function">
      <type>const IntDuration_T</type>
      <name>HOUR_CONVERTED_IN_SECONDS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af47adf4a2fd324fafb5039e92733bfbf</anchor>
      <arglist>(3600)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_MINIMAL_CONNECTION_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0d47fd5b6df8ee6f285eb26ed133c5fa</anchor>
      <arglist>(0, 30, 0)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_MAXIMAL_CONNECTION_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a76a2826e57c42ed8c004ddf3d2c044c0</anchor>
      <arglist>(24, 0, 0)</arglist>
    </member>
    <member kind="function">
      <type>const MatchingIndicator_T</type>
      <name>DEFAULT_MATCHING_INDICATOR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaf71c1852e5e7ac0e33d07a43a74bca1</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const PriceCurrency_T</type>
      <name>DEFAULT_CURRENCY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeaa250189b82bd83a4ab07f45d2fc658</anchor>
      <arglist>(&quot;EUR&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AvailabilityStatus_T</type>
      <name>DEFAULT_AVAILABILITY_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa92b873e9cb4b1f1217ee664c546d7f2</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T</type>
      <name>DEFAULT_AIRLINE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6a56a96436041be9b56708abb8d587a0</anchor>
      <arglist>(&quot;XX&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T</type>
      <name>DEFAULT_NULL_AIRLINE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6b4e6de8039dcff3afb0c029e5709b8b</anchor>
      <arglist>(&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FlightNumber_T</type>
      <name>DEFAULT_FLIGHT_NUMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a63d50df163ccc4ed28b460e8ddae3ce3</anchor>
      <arglist>(9999)</arglist>
    </member>
    <member kind="function">
      <type>const FlightNumber_T</type>
      <name>DEFAULT_FLIGHT_NUMBER_FF</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9566d60a42c8d4fefed36cdb4d818149</anchor>
      <arglist>(255)</arglist>
    </member>
    <member kind="function">
      <type>const TableID_T</type>
      <name>DEFAULT_TABLE_ID</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad03c8db3701f2079b4c5a794aeb830f4</anchor>
      <arglist>(9999)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DEFAULT_DEPARTURE_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7d3cf09bc0efb632891c0722dda6ac4d</anchor>
      <arglist>(1900, boost::gregorian::Jan, 1)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>DEFAULT_AIRPORT_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a40a4d780108bf913a0dcac3b4e10d538</anchor>
      <arglist>(&quot;XXX&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>DEFAULT_NULL_AIRPORT_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8768e6477640410be5fa76351ef09f2b</anchor>
      <arglist>(&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>DEFAULT_ORIGIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4f53f9d2c5365599b5d6394f997becd3</anchor>
      <arglist>(&quot;XXX&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>DEFAULT_DESTINATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae776ac195763afe4c35de160e7eae10d</anchor>
      <arglist>(&quot;YYY&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T</type>
      <name>DEFAULT_CABIN_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a56ad73d3ea7e0b2bfe1e60993643d5f1</anchor>
      <arglist>(&quot;X&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FamilyCode_T</type>
      <name>DEFAULT_FARE_FAMILY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acfd1c118d643178f1ebb11bfd579a4e9</anchor>
      <arglist>(&quot;EcoSaver&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FamilyCode_T</type>
      <name>DEFAULT_NULL_FARE_FAMILY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af1147bee7aadeb09fa12f3df28738e5d</anchor>
      <arglist>(&quot;NoFF&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T</type>
      <name>DEFAULT_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae455a56076fef6a9522b3a26a6acdf57</anchor>
      <arglist>(&quot;X&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T</type>
      <name>DEFAULT_NULL_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9e63efcda209c465decbe16eeb8dabcf</anchor>
      <arglist>(&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const BidPrice_T</type>
      <name>DEFAULT_BID_PRICE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a85c84a2b7b5b81c3314cedb3ed65dfb0</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned short</type>
      <name>MAXIMAL_NUMBER_OF_LEGS_IN_FLIGHT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a256d6a2524b74287a7e91df79ba9e5c7</anchor>
      <arglist>(7)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned short</type>
      <name>MAXIMAL_NUMBER_OF_SEGMENTS_IN_OND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a73bdbba0e59b94b328025783f78bbe8e</anchor>
      <arglist>(3)</arglist>
    </member>
    <member kind="function">
      <type>const SeatIndex_T</type>
      <name>DEFAULT_SEAT_INDEX</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6c918da3d250462d21227fbaca530c4c</anchor>
      <arglist>(1)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T</type>
      <name>DEFAULT_NULL_BOOKING_NUMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a65b53b93c4f8e95179436099177a7907</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const CapacityAdjustment_T</type>
      <name>DEFAULT_NULL_CAPACITY_ADJUSTMENT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3b6c3fe0bb620870bafc0ffd70353419</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const UPR_T</type>
      <name>DEFAULT_NULL_UPR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7b5f6f0f71830fc55b951fc10eb08aa4</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT_FARE_FAMILY_VALUE_TYPE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a62bdaab0a27092808bc8b2067e2dce0f</anchor>
      <arglist>(&quot;FF&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT_SEGMENT_CABIN_VALUE_TYPE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ace7620088547aa608b8fe4f940bd7e41</anchor>
      <arglist>(&quot;SC&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT_KEY_FLD_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae5261c9d897386877db88cdf4ef0ddcd</anchor>
      <arglist>(&quot;;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT_KEY_SUB_FLD_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa39baea61f08062feaac018cb24862be</anchor>
      <arglist>(&quot;,&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const boost::char_separator&lt; char &gt;</type>
      <name>DEFAULT_KEY_TOKEN_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afacd1f402944722e4a57d6c18353e077</anchor>
      <arglist>(&quot;;, &quot;)</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DOW_STR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6e3497a44011f8e98f21449897825897</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const UnconstrainingMethod</type>
      <name>DEFAULT_UNCONSTRAINING_METHOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9bad22104ea635a420b7487114380751</anchor>
      <arglist>(&apos;E&apos;)</arglist>
    </member>
    <member kind="variable">
      <type>const PartnershipTechnique</type>
      <name>DEFAULT_PARTNERSHIP_TECHNIQUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abe9d74d45a2f1064453eac2a6a820536</anchor>
      <arglist>(&apos;N&apos;)</arglist>
    </member>
    <member kind="variable">
      <type>const ForecastingMethod</type>
      <name>DEFAULT_FORECASTING_METHOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a996fee5c330db6cb54d22f3179f4f64f</anchor>
      <arglist>(&apos;Q&apos;)</arglist>
    </member>
    <member kind="variable">
      <type>const PreOptimisationMethod</type>
      <name>DEFAULT_PREOPTIMISATION_METHOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a72d2db9eaa4d25f4e773781229f46e41</anchor>
      <arglist>(&apos;N&apos;)</arglist>
    </member>
    <member kind="variable">
      <type>const OptimisationMethod</type>
      <name>DEFAULT_OPTIMISATION_METHOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adf08f7823a9929c4f3c82ca144ea61e4</anchor>
      <arglist>(&apos;M&apos;)</arglist>
    </member>
    <member kind="variable">
      <type>const CensorshipFlagList_T</type>
      <name>DEFAULT_CLASS_CENSORSHIPFLAG_LIST</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a95fcd682680e0ae8c775e2848bde7ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_DICO_STUDIED_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abec9de05ca5dc8703fe9943bde2c43cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirlineCodeList_T</type>
      <name>DEFAULT_AIRLINE_CODE_LIST</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a82317b08eadcb4481e2b8a5b305af5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassList_StringList_T</type>
      <name>DEFAULT_CLASS_CODE_LIST</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a55a50df30c14075c05302eb5dd4933fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BidPriceVector_T</type>
      <name>DEFAULT_BID_PRICE_VECTOR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a75889056cce4710fa2d3525454ced95e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DEFAULT_MAX_DTD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a889b1dcf50e7c62edd6153153ccf2576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DCPList_T</type>
      <name>DEFAULT_DCP_LIST</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af02cc078f927bb77c189174acebb576c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FRAT5Curve_T</type>
      <name>FRAT5_CURVE_A</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a642e8d64ae6a2aaf4acd777f7a506c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FRAT5Curve_T</type>
      <name>FRAT5_CURVE_B</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4ecf511c90af56dea69e2a805acae1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FRAT5Curve_T</type>
      <name>FRAT5_CURVE_C</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa85d1dc314d127d4847511cf9f5c4475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FRAT5Curve_T</type>
      <name>FRAT5_CURVE_D</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6654f416842f2ea1a6919510b3b3573c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_A</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9277e501373330cf9d113fff74e09ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_B</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a52405032b68308f50f4c484221d4ee68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_C</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a72e739a09e3e2fb1aff1f70dcd4a49ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_D</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a849f9140b72a4f3c972a5ead662a7346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_E</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a070233f244e83358f6de82b264c80d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_F</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7ac9eb0727d484809582f97ad45429c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DTDFratMap_T</type>
      <name>DEFAULT_DTD_FRAT5COEF_MAP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab800f5dce278bc65e87126cb6db65d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DTDProbMap_T</type>
      <name>DEFAULT_DTD_PROB_MAP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abf21369264a702f6ab906c694b25ecaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OnDStringList_T</type>
      <name>DEFAULT_OND_STRING_LIST</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a50c8f19d03621ce0f3a29504e77fe304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DISPLAY_LEVEL_STRING_ARRAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a56f9fae162f1bc9ce068b80279953e2d</anchor>
      <arglist>[51]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasConst_BomDisplay.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00239</filename>
    <namespace>stdair</namespace>
    <member kind="variable">
      <type>const std::string</type>
      <name>DEFAULT_KEY_FLD_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afe804c951faa1108a9dbbcf04b8564e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DEFAULT_KEY_SUB_FLD_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a331e01f273cc7efcc67e622c800f9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const boost::char_separator&lt; char &gt;</type>
      <name>DEFAULT_KEY_TOKEN_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3752a58317682060c84772c41102e09c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasConst_BookingClass.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00240</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00535" name="stdair_fare_types.hpp" local="no" imported="no">stdair/stdair_fare_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="variable">
      <type>const Distance_T</type>
      <name>DEFAULT_DISTANCE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3b185ecb7920ad2bc253ee3d66be0b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassCode_T</type>
      <name>DEFAULT_CLOSED_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4c0dfd99c56c602355e4ad3b58479a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_NB_OF_BOOKINGS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a05aae95cd2ce89eb687db11adb3cc67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_TOTAL_NB_OF_BOOKINGS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a46fd629cfee65f78c717ebd1b3d8af90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_UNCONSTRAINED_DEMAND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a163237dea819a634195e2926b10c8bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_REMAINING_DEMAND_MEAN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aff4b1120678627ed9d38d708669fd053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_REMAINING_DEMAND_STANDARD_DEVIATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad856057cd9e62af112caa562d08fb39b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfCancellations_T</type>
      <name>DEFAULT_CLASS_NB_OF_CANCELLATIONS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab8fdbc3b911d89ad78b377ec4f774f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfNoShows_T</type>
      <name>DEFAULT_CLASS_NB_OF_NOSHOWS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab1221c3391e10925af1baf85a37fc1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CabinCapacity_T</type>
      <name>DEFAULT_CABIN_CAPACITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa471e14e464668c4ba835d267af17341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CommittedSpace_T</type>
      <name>DEFAULT_COMMITTED_SPACE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a24ad2484bf3a39f1411664696917432b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BlockSpace_T</type>
      <name>DEFAULT_BLOCK_SPACE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af3bd927eb8d82e54cf062a21bfff073f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Availability_T</type>
      <name>DEFAULT_NULL_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6c10ef3d11b9b0ac8bc7985a15ff4619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Availability_T</type>
      <name>DEFAULT_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a554ef900d2a346eb442270bd2c589fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CensorshipFlag_T</type>
      <name>DEFAULT_CLASS_CENSORSHIPFLAG</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a19374f98b09b9696c4d0092fbd1e4ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BookingLimit_T</type>
      <name>DEFAULT_CLASS_BOOKING_LIMIT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4eab43d0de4aa2db81b2b5ec1a90b3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a05742e689d6d12e9682b250388641ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_MAX_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2185e6f1aa06578980541247b5393cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_MIN_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a23a3f0a2d5314c5c078fe653da38073e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OverbookingRate_T</type>
      <name>DEFAULT_CLASS_OVERBOOKING_RATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad5827a5c63a180cfaf72a3734b4c4692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Fare_T</type>
      <name>DEFAULT_FARE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac3dfa637f7f6b83cf15b761cf9dd77f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Revenue_T</type>
      <name>DEFAULT_REVENUE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeefe5e58ea67a7a2279a88558ef875e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PriceCurrency_T</type>
      <name>DEFAULT_CURRENCY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a18fa62db3debf93d58412ba8df929e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Percentage_T</type>
      <name>DEFAULT_LOAD_FACTOR_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae1007d6421cb805f7002171fd0240550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DayDuration_T</type>
      <name>DEFAULT_DAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abf4b6dba205c87235446d9061d9d569c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>DEFAULT_EPSILON_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad5b03a6f73de54e867d79af68f9ad67b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasConst_DefaultObject.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00241</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>AIRPORT_LHR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acc57101721a7e3fb24f885b88b419370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>AIRPORT_SYD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a56c9bd57c0133c5226df658b9df7e1ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CityCode_T</type>
      <name>POS_LHR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab056bf0d57300ddf019fca07f1f12c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DayDuration_T</type>
      <name>NO_ADVANCE_PURCHASE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac5fd6594bf2de33d06b23bd4e43a105b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SaturdayStay_T</type>
      <name>SATURDAY_STAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1b503a046b9c5411e3e654ffdd37d172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SaturdayStay_T</type>
      <name>NO_SATURDAY_STAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8f9f14a55743434d8b2bd8dbf2a04eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChangeFees_T</type>
      <name>CHANGE_FEES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a098519aaf969d6a7bebf92c9efaff8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChangeFees_T</type>
      <name>NO_CHANGE_FEES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa8330523d491376b01c52aa8272fa1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NonRefundable_T</type>
      <name>NON_REFUNDABLE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4b4f8046523b594260d8831509ad17ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NonRefundable_T</type>
      <name>NO_NON_REFUNDABLE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a97a1661026099c3f0399049fb2b4a581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DayDuration_T</type>
      <name>NO_STAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5ac86e869590cb3658d5f7c61e3b3288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CabinCode_T</type>
      <name>CABIN_Y</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a875f1a1f5fff074dde2beacd6f362e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirlineCode_T</type>
      <name>AIRLINE_CODE_BA</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a27032d53cbb58800dac81feb4c0bc33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassCode_T</type>
      <name>CLASS_CODE_Y</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a213d441e58f58176171c9fa28e75e263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassCode_T</type>
      <name>CLASS_CODE_Q</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a77dbfd820c37676f07c20ba8ef10632c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>AIRPORT_SIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac4e3ebe9a632e9e98ba337e6ef627593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>AIRPORT_BKK</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8cbcf6f39b3efdb4514fd53e5f60420a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CityCode_T</type>
      <name>POS_SIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a475c50f8c3434ce2b423a44ae02930c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CabinCode_T</type>
      <name>CABIN_ECO</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a51c0834cb104fc28f6e2a5968105d019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FrequentFlyer_T</type>
      <name>FREQUENT_FLYER_MEMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaf09a84f6fa3873b6c2fcf68c8ecd951</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasConst_Event.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00242</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00533" name="stdair_event_types.hpp" local="no" imported="no">stdair/stdair_event_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="variable">
      <type>const Count_T</type>
      <name>DEFAULT_PROGRESS_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a145d88cc0964b825e37e4ed9bd584674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_EVENT_OLDEST_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a86c160a90a3eb899e193f4b01cbb9def</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DateTime_T</type>
      <name>DEFAULT_EVENT_OLDEST_DATETIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9230d5a7e408680ae6bf667c9e9cf8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Percentage_T</type>
      <name>MAXIMUM_PROGRESS_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae545c52977843d5ed958c02e3cc75952</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasConst_General.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00243</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="variable">
      <type>const std::string</type>
      <name>DEFAULT_BOM_ROOT_KEY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2b11f96dd5195c292c98e65fbe5667c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfFlightDates_T</type>
      <name>DEFAULT_NB_OF_FLIGHTDATES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5ef3031a512f1eb08cadb8ec71c7d816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DEFAULT_FLIGHT_SPEED</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac460c7cae3f24bca7cba5d41a50348a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BookingRatio_T</type>
      <name>DEFAULT_OND_BOOKING_RATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad174f6f91e8f1eb3d0b5c962a788ed13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Count_T</type>
      <name>SECONDS_IN_ONE_DAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8225c4909930a4dffe99f741ecc69c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Count_T</type>
      <name>MILLISECONDS_IN_ONE_SECOND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9bcd247d0210fbbd78a56e018f8a3d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab2b42d86d72d755f17fede99c3a8dcda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DateTime_T</type>
      <name>DEFAULT_DATETIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad5984110d30d19f7d0600420b3450220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_EPSILON_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af02ca755ee2a7f2b488c6d9d7703f0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RandomSeed_T</type>
      <name>DEFAULT_RANDOM_SEED</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab2bebe3416c3b06022db624c3cc0b1cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>NULL_BOOST_TIME_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3da1c8ffa8933a767416145205a4ffd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_NULL_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7988c21c72bee8a101b9f844d2e11f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Fare_T</type>
      <name>DEFAULT_CLASS_FARE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a81d6fb1842a6f1f6d5cb03b46b31c7a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfAirlines_T</type>
      <name>DEFAULT_NBOFAIRLINES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad7a48cf76ec466c68bd923de0dff0b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DEFAULT_NB_OF_DAYS_IN_A_YEAR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae0aa607f264a03657e9bf9bb08d0c60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChannelLabel_T</type>
      <name>DEFAULT_CHANNEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa3635448b4a303bb5e2e6635433143aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DEFAULT_NUMBER_OF_SUBDIVISIONS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7ad43791ec2f3206efdc48ae91074a6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasConst_Inventory.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00244</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00269" name="ForecastingMethod.hpp" local="no" imported="no">stdair/basic/ForecastingMethod.hpp</includes>
    <includes id="a00294" name="UnconstrainingMethod.hpp" local="no" imported="no">stdair/basic/UnconstrainingMethod.hpp</includes>
    <includes id="a00281" name="PreOptimisationMethod.hpp" local="no" imported="no">stdair/basic/PreOptimisationMethod.hpp</includes>
    <includes id="a00273" name="OptimisationMethod.hpp" local="no" imported="no">stdair/basic/OptimisationMethod.hpp</includes>
    <includes id="a00275" name="PartnershipTechnique.hpp" local="no" imported="no">stdair/basic/PartnershipTechnique.hpp</includes>
    <class kind="struct">stdair::DefaultDCPList</class>
    <class kind="struct">stdair::DefaultDtdFratMap</class>
    <class kind="struct">stdair::DefaultDtdProbMap</class>
    <namespace>stdair</namespace>
    <member kind="variable">
      <type>const AirlineCode_T</type>
      <name>DEFAULT_AIRLINE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a66fce9b8e19bbeb28b10759c8fde0b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirlineCode_T</type>
      <name>DEFAULT_NULL_AIRLINE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adca9403906a9901926c7455fb1a9912c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FlightNumber_T</type>
      <name>DEFAULT_FLIGHT_NUMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afe15dfcc167c06e03d3e21c062e1e43d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FlightNumber_T</type>
      <name>DEFAULT_FLIGHT_NUMBER_FF</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adeba05b12ba23987eef1c9b56a06373c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TableID_T</type>
      <name>DEFAULT_TABLE_ID</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad80c3d20fd0d7c38025cbc1e39ce7686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_DEPARTURE_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aec702610db69a740670bcd9ab1aec39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>DEFAULT_AIRPORT_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9991b493a46656c7ec54bef82495dfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>DEFAULT_NULL_AIRPORT_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a43d4ad0ede740e6b5cb104e520052fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>DEFAULT_ORIGIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7b4e79a1f3b3df7fb604d77d2ee1213d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>DEFAULT_DESTINATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6613aee52652d3abae8bcd8e0f57abef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CabinCode_T</type>
      <name>DEFAULT_CABIN_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5848a0dee84541d22db6fb479686cb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FamilyCode_T</type>
      <name>DEFAULT_FARE_FAMILY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa2af2829dedd429249a50df9c9030b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FamilyCode_T</type>
      <name>DEFAULT_NULL_FARE_FAMILY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abc04773d32cef2af568d500ee2b40adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyCode_T</type>
      <name>DEFAULT_POLICY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aff5803d10a1ffccdb9c082950b6f7d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NestingStructureCode_T</type>
      <name>DEFAULT_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a88831cfcd789585d10e3090aaee4b97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NestingStructureCode_T</type>
      <name>DISPLAY_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2b4f2f31beff6b8144c1109c47184afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NestingStructureCode_T</type>
      <name>YIELD_BASED_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab28c8bcd8248b64dc42cc94726c8182c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NestingNodeCode_T</type>
      <name>DEFAULT_NESTING_NODE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afd2d632a017482f635a603686b0d2cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassCode_T</type>
      <name>DEFAULT_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa499aea3ef4e308979b2d2f6464dc20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassCode_T</type>
      <name>DEFAULT_NULL_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2b0d0e59af96856df7d649dc986f28b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BidPrice_T</type>
      <name>DEFAULT_BID_PRICE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac97e6e639e2e2469c2c46d88ef2a8e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned short</type>
      <name>MAXIMAL_NUMBER_OF_LEGS_IN_FLIGHT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2efd4633743d4aebcf51fb738ffa526f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned short</type>
      <name>MAXIMAL_NUMBER_OF_SEGMENTS_IN_OND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a74c5ab635504b011a3eea6e64475660e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Availability_T</type>
      <name>MAXIMAL_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a28a04270b3996cb917166e44b53b55c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SeatIndex_T</type>
      <name>DEFAULT_SEAT_INDEX</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab08bb07fed078c5979c67c690aea601e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfSeats_T</type>
      <name>DEFAULT_NULL_BOOKING_NUMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a277c74488eedddab95b1add81cf0e11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CapacityAdjustment_T</type>
      <name>DEFAULT_NULL_CAPACITY_ADJUSTMENT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac0611ba76a8e94d9ee3fec445f2789ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UPR_T</type>
      <name>DEFAULT_NULL_UPR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5df1024128bae9cddb7bede866de6d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DEFAULT_FARE_FAMILY_VALUE_TYPE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abef131f30377a1375bc310ed07978fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DEFAULT_SEGMENT_CABIN_VALUE_TYPE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a422a589d033480fb4c0309285ab71406</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasConst_Period_BOM.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00245</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="variable">
      <type>const DatePeriod_T</type>
      <name>BOOST_DEFAULT_DATE_PERIOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7dd4845022110c64be37a29c0bddda96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DOW_String_T</type>
      <name>DEFAULT_DOW_STRING</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>add761873d0329a533ceb00590a5db99e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DateOffset_T</type>
      <name>DEFAULT_DATE_OFFSET</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad8771285b2c76d00364f5a6c535e53ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasConst_Request.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00246</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="variable">
      <type>const PartySize_T</type>
      <name>DEFAULT_PARTY_SIZE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a03e95641d581277fb595921c2b4fba67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DayDuration_T</type>
      <name>DEFAULT_STAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8f658fc38968c51a2288af40cf3dfa86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const WTP_T</type>
      <name>DEFAULT_WTP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1ff2f7327a614d145fbe55ae5e24bdff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CityCode_T</type>
      <name>DEFAULT_POS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab533ca102ec6088fd6b0aadd7f7d3561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_PREFERRED_DEPARTURE_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a604a4f92e4a9f2d168a092c897b79da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_PREFERRED_DEPARTURE_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae40e1c613a0ea99ae4b1a8046b6b33db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DateOffset_T</type>
      <name>DEFAULT_ADVANCE_PURCHASE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a221eb41c656c10fc63b56de57b092e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_REQUEST_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad67d6bee2ff0eec1d5f4654e4ed7b352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_REQUEST_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afd145c1a3b93ddf87f402e09e9f1f278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DateTime_T</type>
      <name>DEFAULT_REQUEST_DATE_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1a96e87682c40214e7138a7826aa9cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CabinCode_T</type>
      <name>DEFAULT_PREFERRED_CABIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4faf1958e9cc3b87162918a9967d4fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChannelLabel_T</type>
      <name>CHANNEL_DN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2f70c12a8f2fdb14bd4cc62fcee0d768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChannelLabel_T</type>
      <name>CHANNEL_IN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af39c23bd8d9a5aa95f75e7f997b5af25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_ONE_WAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa60ce98643163d352528344851cd15c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_ROUND_TRIP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4166cba933e5ac4fa65a5aafa54d0e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_INBOUND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a40edd65b6d6ec30e9dc836210b2eeea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_OUTBOUND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5e59290bfb06e5bd9f112c225d34f57e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FrequentFlyer_T</type>
      <name>DEFAULT_FF_TIER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3c7287ee9b43e0cfbf5f89becfc76021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PriceValue_T</type>
      <name>DEFAULT_VALUE_OF_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a718e840a1e0255d13d19152961cd98b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IntDuration_T</type>
      <name>HOUR_CONVERTED_IN_SECONDS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab0fa744a288814f3309843bb4cf65ed0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasConst_SellUpCurves.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00247</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <class kind="struct">stdair::DefaultMap</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BasConst_TravelSolution.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00248</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_MINIMAL_CONNECTION_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a21606e037bc6cc5e4fc371e567eb8ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_MAXIMAL_CONNECTION_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4eed196457750b89c2c3b08714f46706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FlightPathCode_T</type>
      <name>DEFAULT_FLIGHTPATH_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a06235d792a438f9d80afc7644629c944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Availability_T</type>
      <name>DEFAULT_CLASS_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a05bb8949631d4dd3e0dda4b26a3fcbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AvailabilityStatus_T</type>
      <name>DEFAULT_AVAILABILITY_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a842c33cc7eef3e703935cb2e39c25f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned short</type>
      <name>DEFAULT_NUMBER_OF_REQUIRED_SEATS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ade0e71d2cd7a82fe8358321d27eb2ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MatchingIndicator_T</type>
      <name>DEFAULT_MATCHING_INDICATOR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab82f09842e7d608ee61feadbd665a1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirlineCode_T</type>
      <name>DEFAULT_DICO_STUDIED_AIRLINE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6c93527bf95df72f9606bdce7a9a9705</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasConst_Yield.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00249</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="variable">
      <type>const Yield_T</type>
      <name>DEFAULT_YIELD_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a24aa5cf3e715709c12309c360ecccaad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Yield_T</type>
      <name>DEFAULT_YIELD_MAX_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad9f93fac202246c4095ccbbd25ac707a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasDBParams.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00250</filename>
    <includes id="a00251" name="BasDBParams.hpp" local="no" imported="no">stdair/basic/BasDBParams.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BasDBParams.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00251</filename>
    <includes id="a00531" name="stdair_db.hpp" local="no" imported="no">stdair/stdair_db.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::BasDBParams</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BasFileMgr.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00252</filename>
    <includes id="a00253" name="BasFileMgr.hpp" local="no" imported="no">stdair/basic/BasFileMgr.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BasFileMgr.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00253</filename>
    <class kind="struct">stdair::BasFileMgr</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BasLogParams.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00254</filename>
    <includes id="a00255" name="BasLogParams.hpp" local="no" imported="no">stdair/basic/BasLogParams.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BasLogParams.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00255</filename>
    <includes id="a00539" name="stdair_log.hpp" local="no" imported="no">stdair/stdair_log.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::BasLogParams</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BasParserHelperTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00256</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <class kind="struct">stdair::date_time_element</class>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>date_time_element&lt; 0, 23 &gt;</type>
      <name>hour_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a958acca3ce7223943fcc98f347b357b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>date_time_element&lt; 0, 59 &gt;</type>
      <name>minute_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a18a04277c67e4a75cb38bc74ef1fc0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>date_time_element&lt; 0, 59 &gt;</type>
      <name>second_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3b164198ee324596f34bcb91488d8251</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>date_time_element&lt; 1900, 2100 &gt;</type>
      <name>year_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a22eeec083b9c07f6a1a8fd14789249a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>date_time_element&lt; 1, 12 &gt;</type>
      <name>month_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac33689df5c743d4571254a65ece04653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>date_time_element&lt; 1, 31 &gt;</type>
      <name>day_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6102f2b50f7281a011e83c4808a37d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>date_time_element&lt; MIN, MAX &gt;</type>
      <name>operator*</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8ec439fb9257e35e62d69d6130689e16</anchor>
      <arglist>(const date_time_element&lt; MIN, MAX &gt; &amp;o1, const date_time_element&lt; MIN, MAX &gt; &amp;o2)</arglist>
    </member>
    <member kind="function">
      <type>date_time_element&lt; MIN, MAX &gt;</type>
      <name>operator+</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4b8f107c4f98ba0ab1cfbccca087031d</anchor>
      <arglist>(const date_time_element&lt; MIN, MAX &gt; &amp;o1, const date_time_element&lt; MIN, MAX &gt; &amp;o2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasParserTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00257</filename>
    <includes id="a00256" name="BasParserHelperTypes.hpp" local="no" imported="no">stdair/basic/BasParserHelperTypes.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::istreambuf_iterator&lt; char &gt;</type>
      <name>base_iterator_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af0a92e43ebe886e7b486fcf401e522eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::multi_pass&lt; base_iterator_t &gt;</type>
      <name>iterator_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2c975e39f25c8d906ed099d91e025d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::int_parser&lt; unsigned int, 10, 1, 1 &gt;</type>
      <name>int1_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adf937eb6aa51a5a23b9f60bf1786deb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; int, 10, 2, 2 &gt;</type>
      <name>uint2_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a26749dd7cd4a1a585e3fb7232537b5a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; int, 10, 4, 4 &gt;</type>
      <name>uint4_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acad8a330a1747fbc4167b5f420be00ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; int, 10, 1, 4 &gt;</type>
      <name>uint1_4_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acc8dbcf27ebf3c5902d7f90a8d3830f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; hour_t, 10, 2, 2 &gt;</type>
      <name>hour_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeb5f17f15130a9de904591f99f6c17d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; minute_t, 10, 2, 2 &gt;</type>
      <name>minute_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af47abc7f33cb79017164302136033564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; second_t, 10, 2, 2 &gt;</type>
      <name>second_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a769d51ec549192fa486db4d25d58e8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; year_t, 10, 4, 4 &gt;</type>
      <name>year_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab7081f7f567237b2a1e5b58373514e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; month_t, 10, 2, 2 &gt;</type>
      <name>month_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab81eb7d588d970feea82f1aa538d1ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; day_t, 10, 2, 2 &gt;</type>
      <name>day_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac225577100237d877aa3ddc405dde230</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00258</filename>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ContinuousAttributeLite.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00259</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00263" name="DictionaryManager.hpp" local="no" imported="no">stdair/basic/DictionaryManager.hpp</includes>
    <class kind="struct">stdair::ContinuousAttributeLite</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DemandGenerationMethod.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00260</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00261" name="DemandGenerationMethod.hpp" local="no" imported="no">stdair/basic/DemandGenerationMethod.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DemandGenerationMethod.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00261</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::DemandGenerationMethod</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DictionaryManager.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00262</filename>
    <includes id="a00263" name="DictionaryManager.hpp" local="no" imported="no">stdair/basic/DictionaryManager.hpp</includes>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DictionaryManager.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00263</filename>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <class kind="class">stdair::DictionaryManager</class>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>DictionaryKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2d5ece0f93b3e5aee35eb036ba3cce68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EventType.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00264</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00265" name="EventType.hpp" local="no" imported="no">stdair/basic/EventType.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>EventType.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00265</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::EventType</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>float_utils.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00266</filename>
    <includes id="a00267" name="float_utils_google.hpp" local="no" imported="no">stdair/basic/float_utils_google.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>float_utils_google.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00267</filename>
    <class kind="class">TypeWithSize</class>
    <class kind="class">TypeWithSize&lt; 4 &gt;</class>
    <class kind="class">TypeWithSize&lt; 8 &gt;</class>
    <class kind="class">FloatingPoint</class>
  </compound>
  <compound kind="file">
    <name>ForecastingMethod.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00268</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00269" name="ForecastingMethod.hpp" local="no" imported="no">stdair/basic/ForecastingMethod.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ForecastingMethod.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00269</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::ForecastingMethod</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>JSonCommand.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00270</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00271" name="JSonCommand.hpp" local="no" imported="no">stdair/basic/JSonCommand.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>JSonCommand.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00271</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::JSonCommand</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>OptimisationMethod.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00272</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00273" name="OptimisationMethod.hpp" local="no" imported="no">stdair/basic/OptimisationMethod.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>OptimisationMethod.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00273</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::OptimisationMethod</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PartnershipTechnique.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00274</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00275" name="PartnershipTechnique.hpp" local="no" imported="no">stdair/basic/PartnershipTechnique.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PartnershipTechnique.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00275</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::PartnershipTechnique</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PassengerChoiceModel.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00276</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00277" name="PassengerChoiceModel.hpp" local="no" imported="no">stdair/basic/PassengerChoiceModel.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PassengerChoiceModel.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00277</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::PassengerChoiceModel</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PassengerType.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00278</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00279" name="PassengerType.hpp" local="no" imported="no">stdair/basic/PassengerType.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PassengerType.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00279</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::PassengerType</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PreOptimisationMethod.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00280</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00281" name="PreOptimisationMethod.hpp" local="no" imported="no">stdair/basic/PreOptimisationMethod.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PreOptimisationMethod.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00281</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::PreOptimisationMethod</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ProgressStatus.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00282</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00242" name="BasConst_Event.hpp" local="no" imported="no">stdair/basic/BasConst_Event.hpp</includes>
    <includes id="a00283" name="ProgressStatus.hpp" local="no" imported="no">stdair/basic/ProgressStatus.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ProgressStatus.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00283</filename>
    <includes id="a00242" name="BasConst_Event.hpp" local="no" imported="no">stdair/basic/BasConst_Event.hpp</includes>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <class kind="struct">stdair::ProgressStatus</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ProgressStatusSet.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00284</filename>
    <includes id="a00285" name="ProgressStatusSet.hpp" local="no" imported="no">stdair/basic/ProgressStatusSet.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ProgressStatusSet.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00285</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00533" name="stdair_event_types.hpp" local="no" imported="no">stdair/stdair_event_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00265" name="EventType.hpp" local="no" imported="no">stdair/basic/EventType.hpp</includes>
    <includes id="a00283" name="ProgressStatus.hpp" local="no" imported="no">stdair/basic/ProgressStatus.hpp</includes>
    <class kind="struct">stdair::ProgressStatusSet</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>RandomGeneration.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00286</filename>
    <includes id="a00287" name="RandomGeneration.hpp" local="no" imported="no">stdair/basic/RandomGeneration.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>RandomGeneration.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00287</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::RandomGeneration</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SampleType.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00288</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00289" name="SampleType.hpp" local="no" imported="no">stdair/basic/SampleType.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SampleType.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00289</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::SampleType</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ServiceInitialisationType.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00290</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00291" name="ServiceInitialisationType.hpp" local="no" imported="no">stdair/basic/ServiceInitialisationType.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ServiceInitialisationType.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00291</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::ServiceInitialisationType</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>StructAbstract.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00292</filename>
    <class kind="struct">stdair::StructAbstract</class>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a22cf274233e8d7e58c887daeb9103ef6</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;ioOut, const stdair::StructAbstract &amp;iStruct)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; charT, traits &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>acf942a4120251f59a514f1a461ff5d24</anchor>
      <arglist>(std::basic_istream&lt; charT, traits &gt; &amp;ioIn, stdair::StructAbstract &amp;ioStruct)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnconstrainingMethod.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00293</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00294" name="UnconstrainingMethod.hpp" local="no" imported="no">stdair/basic/UnconstrainingMethod.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>UnconstrainingMethod.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00294</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::UnconstrainingMethod</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>YieldRange.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00295</filename>
    <includes id="a00296" name="YieldRange.hpp" local="no" imported="no">stdair/basic/YieldRange.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>YieldRange.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/basic/</path>
    <filename>a00296</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="class">stdair::YieldRange</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirlineClassList.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00297</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00298" name="AirlineClassList.hpp" local="no" imported="no">stdair/bom/AirlineClassList.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirlineClassList.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00298</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00300" name="AirlineClassListKey.hpp" local="no" imported="no">stdair/bom/AirlineClassListKey.hpp</includes>
    <includes id="a00301" name="AirlineClassListTypes.hpp" local="no" imported="no">stdair/bom/AirlineClassListTypes.hpp</includes>
    <class kind="class">stdair::AirlineClassList</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirlineClassListKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00299</filename>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00300" name="AirlineClassListKey.hpp" local="no" imported="no">stdair/bom/AirlineClassListKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>AirlineClassListKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a582f368e438a973ab5b24da66b3f137f</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>AirlineClassListKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a697c168b0e0eefcbcfd24a1a7eed45d3</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AirlineClassListKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00300</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::AirlineClassListKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirlineClassListTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00301</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; AirlineClassList * &gt;</type>
      <name>AirlineClassListList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7ff85610013b5efb917da243eee41683</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, AirlineClassList * &gt;</type>
      <name>AirlineClassListMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a072b4cae0b4a2d8a92114482be31c8fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, AirlineClassList * &gt;</type>
      <name>AirlineClassListWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acbcb4a69f5d63bb8ac4eabf3a1509439</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirlineClassListWithKey_T &gt;</type>
      <name>AirlineClassListDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a560ceb59d5983c7b2edcc68c7269f0ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AirlineFeature.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00302</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00303" name="AirlineFeature.hpp" local="no" imported="no">stdair/bom/AirlineFeature.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirlineFeature.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00303</filename>
    <includes id="a00541" name="stdair_rm_types.hpp" local="no" imported="no">stdair/stdair_rm_types.hpp</includes>
    <includes id="a00294" name="UnconstrainingMethod.hpp" local="no" imported="no">stdair/basic/UnconstrainingMethod.hpp</includes>
    <includes id="a00269" name="ForecastingMethod.hpp" local="no" imported="no">stdair/basic/ForecastingMethod.hpp</includes>
    <includes id="a00281" name="PreOptimisationMethod.hpp" local="no" imported="no">stdair/basic/PreOptimisationMethod.hpp</includes>
    <includes id="a00273" name="OptimisationMethod.hpp" local="no" imported="no">stdair/basic/OptimisationMethod.hpp</includes>
    <includes id="a00275" name="PartnershipTechnique.hpp" local="no" imported="no">stdair/basic/PartnershipTechnique.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00305" name="AirlineFeatureKey.hpp" local="no" imported="no">stdair/bom/AirlineFeatureKey.hpp</includes>
    <includes id="a00306" name="AirlineFeatureTypes.hpp" local="no" imported="no">stdair/bom/AirlineFeatureTypes.hpp</includes>
    <class kind="class">stdair::AirlineFeature</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirlineFeatureKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00304</filename>
    <includes id="a00305" name="AirlineFeatureKey.hpp" local="no" imported="no">stdair/bom/AirlineFeatureKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirlineFeatureKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00305</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::AirlineFeatureKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirlineFeatureTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00306</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; AirlineFeature * &gt;</type>
      <name>AirlineFeatureList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac86973ebce5e2bef6b447ff6088cabd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, AirlineFeature * &gt;</type>
      <name>AirlineFeatureMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5e9673966000eafa89680747adadaf16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AirlineStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00307</filename>
    <includes id="a00308" name="AirlineStruct.hpp" local="no" imported="no">stdair/bom/AirlineStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirlineStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00308</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::AirlineStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirportPair.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00309</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00310" name="AirportPair.hpp" local="no" imported="no">stdair/bom/AirportPair.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirportPair.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00310</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00312" name="AirportPairKey.hpp" local="no" imported="no">stdair/bom/AirportPairKey.hpp</includes>
    <includes id="a00313" name="AirportPairTypes.hpp" local="no" imported="no">stdair/bom/AirportPairTypes.hpp</includes>
    <class kind="class">stdair::AirportPair</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirportPairKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00311</filename>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00312" name="AirportPairKey.hpp" local="no" imported="no">stdair/bom/AirportPairKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirportPairKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00312</filename>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <class kind="struct">stdair::AirportPairKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>AirportPairTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00313</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; AirportPair * &gt;</type>
      <name>AirportPairList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3910e03bffd66a6d8bef3d20c98bd0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, AirportPair * &gt;</type>
      <name>AirportPairMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac7225bb49d72aec4885569639a9b0aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, AirportPair * &gt;</type>
      <name>AirportPairWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2a70fdf4590eabea7d1e3197f9fba794</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirportPairWithKey_T &gt;</type>
      <name>AirportPairDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9ef4fa4d86e6165020f69398c99e4545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BomAbstract.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00314</filename>
    <class kind="class">stdair::BomAbstract</class>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::map&lt; const std::type_info *, BomAbstract * &gt;</type>
      <name>HolderMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a683ba6e6a26ac1a7b5737296fbe9ee67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae4bdaeaaab773861097ef82420d3bb9e</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;ioOut, const stdair::BomAbstract &amp;iBom)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; charT, traits &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a401bc701cddbfbe3493d894c331d7973</anchor>
      <arglist>(std::basic_istream&lt; charT, traits &gt; &amp;ioIn, stdair::BomAbstract &amp;ioBom)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BomArchive.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00315</filename>
    <includes id="a00336" name="BomRoot.hpp" local="no" imported="no">stdair/bom/BomRoot.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <includes id="a00387" name="FlightDate.hpp" local="no" imported="no">stdair/bom/FlightDate.hpp</includes>
    <includes id="a00411" name="LegDate.hpp" local="no" imported="no">stdair/bom/LegDate.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <includes id="a00406" name="LegCabin.hpp" local="no" imported="no">stdair/bom/LegCabin.hpp</includes>
    <includes id="a00448" name="SegmentCabin.hpp" local="no" imported="no">stdair/bom/SegmentCabin.hpp</includes>
    <includes id="a00372" name="FareFamily.hpp" local="no" imported="no">stdair/bom/FareFamily.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <includes id="a00345" name="BookingRequestStruct.hpp" local="no" imported="no">stdair/bom/BookingRequestStruct.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00316" name="BomArchive.hpp" local="no" imported="no">stdair/bom/BomArchive.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomArchive.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00316</filename>
    <class kind="class">stdair::BomArchive</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomDisplay.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00317</filename>
  </compound>
  <compound kind="file">
    <name>BomDisplay.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00318</filename>
    <includes id="a00480" name="TravelSolutionTypes.hpp" local="no" imported="no">stdair/bom/TravelSolutionTypes.hpp</includes>
    <includes id="a00365" name="DatePeriodTypes.hpp" local="no" imported="no">stdair/bom/DatePeriodTypes.hpp</includes>
    <class kind="class">stdair::BomDisplay</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomHolder.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00319</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00321" name="BomHolderKey.hpp" local="no" imported="no">stdair/bom/BomHolderKey.hpp</includes>
    <class kind="class">stdair::BomHolder</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomHolderKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00320</filename>
    <includes id="a00321" name="BomHolderKey.hpp" local="no" imported="no">stdair/bom/BomHolderKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomHolderKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00321</filename>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::BomHolderKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomID.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00322</filename>
    <class kind="struct">stdair::BomID</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomIDTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00323</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <includes id="a00322" name="BomID.hpp" local="no" imported="no">stdair/bom/BomID.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>struct BomID&lt; BookingClass &gt;</type>
      <name>BookingClassID_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a81077ccb89f3e27dc2a77940c0606d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BookingClassID_T &gt;</type>
      <name>BookingClassIDList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a18951c6db904dd9958aa2f5485d38fdd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BomINIImport.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00324</filename>
    <includes id="a00253" name="BasFileMgr.hpp" local="no" imported="no">stdair/basic/BasFileMgr.hpp</includes>
    <includes id="a00325" name="BomINIImport.hpp" local="no" imported="no">stdair/bom/BomINIImport.hpp</includes>
    <includes id="a00359" name="ConfigHolderStruct.hpp" local="no" imported="no">stdair/bom/ConfigHolderStruct.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>bpt</namespace>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>char</type>
      <name>ptree</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a51c586252f559bf084c3ba2a00d3a96e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BomINIImport.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00325</filename>
    <includes id="a00536" name="stdair_file.hpp" local="no" imported="no">stdair/stdair_file.hpp</includes>
    <class kind="class">stdair::BomINIImport</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomJSONExport.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00326</filename>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00336" name="BomRoot.hpp" local="no" imported="no">stdair/bom/BomRoot.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <includes id="a00387" name="FlightDate.hpp" local="no" imported="no">stdair/bom/FlightDate.hpp</includes>
    <includes id="a00411" name="LegDate.hpp" local="no" imported="no">stdair/bom/LegDate.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <includes id="a00406" name="LegCabin.hpp" local="no" imported="no">stdair/bom/LegCabin.hpp</includes>
    <includes id="a00448" name="SegmentCabin.hpp" local="no" imported="no">stdair/bom/SegmentCabin.hpp</includes>
    <includes id="a00372" name="FareFamily.hpp" local="no" imported="no">stdair/bom/FareFamily.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <includes id="a00351" name="Bucket.hpp" local="no" imported="no">stdair/bom/Bucket.hpp</includes>
    <includes id="a00369" name="EventStruct.hpp" local="no" imported="no">stdair/bom/EventStruct.hpp</includes>
    <includes id="a00370" name="EventTypes.hpp" local="no" imported="no">stdair/bom/EventTypes.hpp</includes>
    <includes id="a00345" name="BookingRequestStruct.hpp" local="no" imported="no">stdair/bom/BookingRequestStruct.hpp</includes>
    <includes id="a00348" name="BreakPointStruct.hpp" local="no" imported="no">stdair/bom/BreakPointStruct.hpp</includes>
    <includes id="a00327" name="BomJSONExport.hpp" local="no" imported="no">stdair/bom/BomJSONExport.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomJSONExport.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00327</filename>
    <includes id="a00480" name="TravelSolutionTypes.hpp" local="no" imported="no">stdair/bom/TravelSolutionTypes.hpp</includes>
    <class kind="class">stdair::BomJSONExport</class>
    <namespace>bpt</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomJSONImport.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00328</filename>
    <includes id="a00329" name="BomJSONImport.hpp" local="no" imported="no">stdair/bom/BomJSONImport.hpp</includes>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00538" name="stdair_json.hpp" local="no" imported="no">stdair/stdair_json.hpp</includes>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00359" name="ConfigHolderStruct.hpp" local="no" imported="no">stdair/bom/ConfigHolderStruct.hpp</includes>
    <namespace>bpt</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomJSONImport.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00329</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00271" name="JSonCommand.hpp" local="no" imported="no">stdair/basic/JSonCommand.hpp</includes>
    <includes id="a00265" name="EventType.hpp" local="no" imported="no">stdair/basic/EventType.hpp</includes>
    <includes id="a00348" name="BreakPointStruct.hpp" local="no" imported="no">stdair/bom/BreakPointStruct.hpp</includes>
    <class kind="class">stdair::BomJSONImport</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomKeyManager.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00330</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00401" name="InventoryKey.hpp" local="no" imported="no">stdair/bom/InventoryKey.hpp</includes>
    <includes id="a00389" name="FlightDateKey.hpp" local="no" imported="no">stdair/bom/FlightDateKey.hpp</includes>
    <includes id="a00455" name="SegmentDateKey.hpp" local="no" imported="no">stdair/bom/SegmentDateKey.hpp</includes>
    <includes id="a00413" name="LegDateKey.hpp" local="no" imported="no">stdair/bom/LegDateKey.hpp</includes>
    <includes id="a00431" name="ParsedKey.hpp" local="no" imported="no">stdair/bom/ParsedKey.hpp</includes>
    <includes id="a00331" name="BomKeyManager.hpp" local="no" imported="no">stdair/bom/BomKeyManager.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>boost::tokenizer&lt; boost::char_separator&lt; char &gt; &gt;</type>
      <name>Tokeniser_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac93602a80d5e44faf582301b19337f59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BomKeyManager.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00331</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <class kind="class">stdair::BomKeyManager</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomManager.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00332</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00319" name="BomHolder.hpp" local="no" imported="no">stdair/bom/BomHolder.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <includes id="a00303" name="AirlineFeature.hpp" local="no" imported="no">stdair/bom/AirlineFeature.hpp</includes>
    <class kind="class">stdair::BomManager</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomRetriever.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00333</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00331" name="BomKeyManager.hpp" local="no" imported="no">stdair/bom/BomKeyManager.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00336" name="BomRoot.hpp" local="no" imported="no">stdair/bom/BomRoot.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <includes id="a00303" name="AirlineFeature.hpp" local="no" imported="no">stdair/bom/AirlineFeature.hpp</includes>
    <includes id="a00387" name="FlightDate.hpp" local="no" imported="no">stdair/bom/FlightDate.hpp</includes>
    <includes id="a00411" name="LegDate.hpp" local="no" imported="no">stdair/bom/LegDate.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <includes id="a00406" name="LegCabin.hpp" local="no" imported="no">stdair/bom/LegCabin.hpp</includes>
    <includes id="a00448" name="SegmentCabin.hpp" local="no" imported="no">stdair/bom/SegmentCabin.hpp</includes>
    <includes id="a00372" name="FareFamily.hpp" local="no" imported="no">stdair/bom/FareFamily.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <includes id="a00334" name="BomRetriever.hpp" local="no" imported="no">stdair/bom/BomRetriever.hpp</includes>
    <includes id="a00431" name="ParsedKey.hpp" local="no" imported="no">stdair/bom/ParsedKey.hpp</includes>
    <includes id="a00310" name="AirportPair.hpp" local="no" imported="no">stdair/bom/AirportPair.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomRetriever.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00334</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00362" name="DatePeriod.hpp" local="no" imported="no">stdair/bom/DatePeriod.hpp</includes>
    <class kind="class">stdair::BomRetriever</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomRoot.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00335</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00336" name="BomRoot.hpp" local="no" imported="no">stdair/bom/BomRoot.hpp</includes>
    <includes id="a00401" name="InventoryKey.hpp" local="no" imported="no">stdair/bom/InventoryKey.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomRoot.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00336</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00338" name="BomRootKey.hpp" local="no" imported="no">stdair/bom/BomRootKey.hpp</includes>
    <includes id="a00397" name="FRAT5CurveHolderStruct.hpp" local="no" imported="no">stdair/bom/FRAT5CurveHolderStruct.hpp</includes>
    <includes id="a00385" name="FFDisutilityCurveHolderStruct.hpp" local="no" imported="no">stdair/bom/FFDisutilityCurveHolderStruct.hpp</includes>
    <class kind="class">stdair::BomRoot</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BomRootKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00337</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00338" name="BomRootKey.hpp" local="no" imported="no">stdair/bom/BomRootKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>BomRootKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3cae3c56021178d4c16419c085df3cfc</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BomRootKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac177f99945f0042d6316421b1fe64a3e</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BomRootKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00338</filename>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::BomRootKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BookingClass.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00339</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00287" name="RandomGeneration.hpp" local="no" imported="no">stdair/basic/RandomGeneration.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BookingClass.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00340</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <includes id="a00541" name="stdair_rm_types.hpp" local="no" imported="no">stdair/stdair_rm_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00342" name="BookingClassKey.hpp" local="no" imported="no">stdair/bom/BookingClassKey.hpp</includes>
    <includes id="a00343" name="BookingClassTypes.hpp" local="no" imported="no">stdair/bom/BookingClassTypes.hpp</includes>
    <class kind="class">stdair::BookingClass</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BookingClassKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00341</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00342" name="BookingClassKey.hpp" local="no" imported="no">stdair/bom/BookingClassKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BookingClassKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00342</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::BookingClassKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BookingClassTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00343</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; BookingClass * &gt;</type>
      <name>BookingClassList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4f856d999ece4dac721ce2278072a0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, BookingClass * &gt;</type>
      <name>BookingClassMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9ac7b6849f4393e580811535c52a9baf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BookingRequestStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00344</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00246" name="BasConst_Request.hpp" local="no" imported="no">stdair/basic/BasConst_Request.hpp</includes>
    <includes id="a00345" name="BookingRequestStruct.hpp" local="no" imported="no">stdair/bom/BookingRequestStruct.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>void</type>
      <name>intDisplay</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aff1780eaa3661bacb2d61cf80401ea6c</anchor>
      <arglist>(std::ostream &amp;oStream, const int &amp;iInt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BookingRequestStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00345</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00346" name="BookingRequestTypes.hpp" local="no" imported="no">stdair/bom/BookingRequestTypes.hpp</includes>
    <class kind="struct">stdair::BookingRequestStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BookingRequestTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00346</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BookingRequestStruct &gt;</type>
      <name>BookingRequestPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a376ecba1a0c40aea05229412e20f4d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DemandGeneratorKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0750ab4b88b3f56eab651f0b1f87c129</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BreakPointStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00347</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00348" name="BreakPointStruct.hpp" local="no" imported="no">stdair/bom/BreakPointStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BreakPointStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00348</filename>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00349" name="BreakPointTypes.hpp" local="no" imported="no">stdair/bom/BreakPointTypes.hpp</includes>
    <class kind="struct">stdair::BreakPointStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BreakPointTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00349</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BreakPointStruct &gt;</type>
      <name>BreakPointPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab85873dc0976c0c69cfbc9798bf6e267</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BreakPointStruct &gt;</type>
      <name>BreakPointList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2d6c897f085bca1928b3dfc7ab0f14c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Bucket.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00350</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00351" name="Bucket.hpp" local="no" imported="no">stdair/bom/Bucket.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>Bucket.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00351</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00353" name="BucketKey.hpp" local="no" imported="no">stdair/bom/BucketKey.hpp</includes>
    <includes id="a00354" name="BucketTypes.hpp" local="no" imported="no">stdair/bom/BucketTypes.hpp</includes>
    <class kind="class">stdair::Bucket</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BucketKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00352</filename>
    <includes id="a00353" name="BucketKey.hpp" local="no" imported="no">stdair/bom/BucketKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>BucketKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a022a1698ef92c45f2de8fc4e267201e1</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BucketKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad7ad14adae3090b19e071b282118b5aa</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BucketKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00353</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::BucketKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>BucketTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00354</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; Bucket * &gt;</type>
      <name>BucketList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac1a5f291b14977f8533e75bc23c4b428</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, Bucket * &gt;</type>
      <name>BucketMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0f5458bb0ec4f6f48649e787b8e1d62e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CancellationStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00355</filename>
    <includes id="a00240" name="BasConst_BookingClass.hpp" local="no" imported="no">stdair/basic/BasConst_BookingClass.hpp</includes>
    <includes id="a00356" name="CancellationStruct.hpp" local="no" imported="no">stdair/bom/CancellationStruct.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>CancellationStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00356</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00343" name="BookingClassTypes.hpp" local="no" imported="no">stdair/bom/BookingClassTypes.hpp</includes>
    <includes id="a00480" name="TravelSolutionTypes.hpp" local="no" imported="no">stdair/bom/TravelSolutionTypes.hpp</includes>
    <includes id="a00323" name="BomIDTypes.hpp" local="no" imported="no">stdair/bom/BomIDTypes.hpp</includes>
    <class kind="struct">stdair::CancellationStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>CancellationTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00357</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CancellationStruct &gt;</type>
      <name>CancellationPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af22f6fe034d76f3f2a8377bb2a436d32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConfigHolderStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00358</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00269" name="ForecastingMethod.hpp" local="no" imported="no">stdair/basic/ForecastingMethod.hpp</includes>
    <includes id="a00294" name="UnconstrainingMethod.hpp" local="no" imported="no">stdair/basic/UnconstrainingMethod.hpp</includes>
    <includes id="a00275" name="PartnershipTechnique.hpp" local="no" imported="no">stdair/basic/PartnershipTechnique.hpp</includes>
    <includes id="a00281" name="PreOptimisationMethod.hpp" local="no" imported="no">stdair/basic/PreOptimisationMethod.hpp</includes>
    <includes id="a00273" name="OptimisationMethod.hpp" local="no" imported="no">stdair/basic/OptimisationMethod.hpp</includes>
    <includes id="a00303" name="AirlineFeature.hpp" local="no" imported="no">stdair/bom/AirlineFeature.hpp</includes>
    <includes id="a00359" name="ConfigHolderStruct.hpp" local="no" imported="no">stdair/bom/ConfigHolderStruct.hpp</includes>
    <includes id="a00334" name="BomRetriever.hpp" local="no" imported="no">stdair/bom/BomRetriever.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigHolderStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00359</filename>
    <includes id="a00536" name="stdair_file.hpp" local="no" imported="no">stdair/stdair_file.hpp</includes>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00360" name="ConfigHolderTypes.hpp" local="no" imported="no">stdair/bom/ConfigHolderTypes.hpp</includes>
    <class kind="struct">stdair::ConfigHolderStruct</class>
    <namespace>bpt</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigHolderTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00360</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigHolderStruct &gt;</type>
      <name>ConfigHolderPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa9d724b05c95d086bf99e8056259b63e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DatePeriod.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00361</filename>
    <includes id="a00245" name="BasConst_Period_BOM.hpp" local="no" imported="no">stdair/basic/BasConst_Period_BOM.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00362" name="DatePeriod.hpp" local="no" imported="no">stdair/bom/DatePeriod.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DatePeriod.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00362</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00364" name="DatePeriodKey.hpp" local="no" imported="no">stdair/bom/DatePeriodKey.hpp</includes>
    <includes id="a00365" name="DatePeriodTypes.hpp" local="no" imported="no">stdair/bom/DatePeriodTypes.hpp</includes>
    <class kind="class">stdair::DatePeriod</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DatePeriodKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00363</filename>
    <includes id="a00245" name="BasConst_Period_BOM.hpp" local="no" imported="no">stdair/basic/BasConst_Period_BOM.hpp</includes>
    <includes id="a00364" name="DatePeriodKey.hpp" local="no" imported="no">stdair/bom/DatePeriodKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DatePeriodKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00364</filename>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <class kind="struct">stdair::DatePeriodKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DatePeriodTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00365</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; DatePeriod * &gt;</type>
      <name>DatePeriodList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0cb61b0f5151e050d83c5574f0f55cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, DatePeriod * &gt;</type>
      <name>DatePeriodMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad516cd0474d7ef11e6239e12a8e32ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, DatePeriod * &gt;</type>
      <name>DatePeriodWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7c1bb43497dd65593a540c8d4d2c7a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; DatePeriodWithKey_T &gt;</type>
      <name>DatePeriodDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7cd9ca12d2c0e00f974168707ac5cc5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DoWStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00366</filename>
    <includes id="a00245" name="BasConst_Period_BOM.hpp" local="no" imported="no">stdair/basic/BasConst_Period_BOM.hpp</includes>
    <includes id="a00367" name="DoWStruct.hpp" local="no" imported="no">stdair/bom/DoWStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DoWStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00367</filename>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::DoWStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>EventStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00368</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00242" name="BasConst_Event.hpp" local="no" imported="no">stdair/basic/BasConst_Event.hpp</includes>
    <includes id="a00345" name="BookingRequestStruct.hpp" local="no" imported="no">stdair/bom/BookingRequestStruct.hpp</includes>
    <includes id="a00428" name="OptimisationNotificationStruct.hpp" local="no" imported="no">stdair/bom/OptimisationNotificationStruct.hpp</includes>
    <includes id="a00471" name="SnapshotStruct.hpp" local="no" imported="no">stdair/bom/SnapshotStruct.hpp</includes>
    <includes id="a00356" name="CancellationStruct.hpp" local="no" imported="no">stdair/bom/CancellationStruct.hpp</includes>
    <includes id="a00445" name="RMEventStruct.hpp" local="no" imported="no">stdair/bom/RMEventStruct.hpp</includes>
    <includes id="a00348" name="BreakPointStruct.hpp" local="no" imported="no">stdair/bom/BreakPointStruct.hpp</includes>
    <includes id="a00369" name="EventStruct.hpp" local="no" imported="no">stdair/bom/EventStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>EventStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00369</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00533" name="stdair_event_types.hpp" local="no" imported="no">stdair/stdair_event_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00265" name="EventType.hpp" local="no" imported="no">stdair/basic/EventType.hpp</includes>
    <includes id="a00370" name="EventTypes.hpp" local="no" imported="no">stdair/bom/EventTypes.hpp</includes>
    <includes id="a00346" name="BookingRequestTypes.hpp" local="no" imported="no">stdair/bom/BookingRequestTypes.hpp</includes>
    <includes id="a00429" name="OptimisationNotificationTypes.hpp" local="no" imported="no">stdair/bom/OptimisationNotificationTypes.hpp</includes>
    <includes id="a00472" name="SnapshotTypes.hpp" local="no" imported="no">stdair/bom/SnapshotTypes.hpp</includes>
    <includes id="a00357" name="CancellationTypes.hpp" local="no" imported="no">stdair/bom/CancellationTypes.hpp</includes>
    <includes id="a00446" name="RMEventTypes.hpp" local="no" imported="no">stdair/bom/RMEventTypes.hpp</includes>
    <includes id="a00349" name="BreakPointTypes.hpp" local="no" imported="no">stdair/bom/BreakPointTypes.hpp</includes>
    <class kind="struct">stdair::EventStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>EventTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00370</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00533" name="stdair_event_types.hpp" local="no" imported="no">stdair/stdair_event_types.hpp</includes>
    <includes id="a00283" name="ProgressStatus.hpp" local="no" imported="no">stdair/basic/ProgressStatus.hpp</includes>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::pair&lt; const LongDuration_T, EventStruct &gt;</type>
      <name>EventListElement_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a25473102145e079429a176e154bd093a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const LongDuration_T, EventStruct &gt;</type>
      <name>EventList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a263e8fbf0e3a3fe943f71206ae24bf2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FareFamily.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00371</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00372" name="FareFamily.hpp" local="no" imported="no">stdair/bom/FareFamily.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FareFamily.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00372</filename>
    <includes id="a00541" name="stdair_rm_types.hpp" local="no" imported="no">stdair/stdair_rm_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00374" name="FareFamilyKey.hpp" local="no" imported="no">stdair/bom/FareFamilyKey.hpp</includes>
    <includes id="a00375" name="FareFamilyTypes.hpp" local="no" imported="no">stdair/bom/FareFamilyTypes.hpp</includes>
    <class kind="class">stdair::FareFamily</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FareFamilyKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00373</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00374" name="FareFamilyKey.hpp" local="no" imported="no">stdair/bom/FareFamilyKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>FareFamilyKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a69bd520202ba3fb68abac7ed992f88ec</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>FareFamilyKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8639a37aaf0aed0ff9ff0fe8208875b9</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FareFamilyKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00374</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::FareFamilyKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FareFamilyTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00375</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; FareFamily * &gt;</type>
      <name>FareFamilyList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4bd88a2bde64467cbdec49a20eb51f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, FareFamily * &gt;</type>
      <name>FareFamilyMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3e8db1d930a083b220ec1652e2a2c262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FareFeatures.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00376</filename>
    <includes id="a00241" name="BasConst_DefaultObject.hpp" local="no" imported="no">stdair/basic/BasConst_DefaultObject.hpp</includes>
    <includes id="a00246" name="BasConst_Request.hpp" local="no" imported="no">stdair/basic/BasConst_Request.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00377" name="FareFeatures.hpp" local="no" imported="no">stdair/bom/FareFeatures.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FareFeatures.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00377</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00379" name="FareFeaturesKey.hpp" local="no" imported="no">stdair/bom/FareFeaturesKey.hpp</includes>
    <includes id="a00380" name="FareFeaturesTypes.hpp" local="no" imported="no">stdair/bom/FareFeaturesTypes.hpp</includes>
    <class kind="class">stdair::FareFeatures</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FareFeaturesKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00378</filename>
    <includes id="a00241" name="BasConst_DefaultObject.hpp" local="no" imported="no">stdair/basic/BasConst_DefaultObject.hpp</includes>
    <includes id="a00246" name="BasConst_Request.hpp" local="no" imported="no">stdair/basic/BasConst_Request.hpp</includes>
    <includes id="a00379" name="FareFeaturesKey.hpp" local="no" imported="no">stdair/bom/FareFeaturesKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FareFeaturesKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00379</filename>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <class kind="struct">stdair::FareFeaturesKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FareFeaturesTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00380</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; FareFeatures * &gt;</type>
      <name>FareFeaturesList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0df270edcfb5329221a2ef19764786c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, FareFeatures * &gt;</type>
      <name>FareFeaturesMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a026294852c39b7085bee4997ec69ebad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, FareFeatures * &gt;</type>
      <name>FareFeaturesWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abfd19cd8d825e6bfeb574208e2cda09b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; FareFeaturesWithKey_T &gt;</type>
      <name>FareFeaturesDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab00918262ec54528cf3a02dbc4cea1b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FareOptionStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00381</filename>
    <includes id="a00240" name="BasConst_BookingClass.hpp" local="no" imported="no">stdair/basic/BasConst_BookingClass.hpp</includes>
    <includes id="a00382" name="FareOptionStruct.hpp" local="no" imported="no">stdair/bom/FareOptionStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FareOptionStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00382</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00343" name="BookingClassTypes.hpp" local="no" imported="no">stdair/bom/BookingClassTypes.hpp</includes>
    <class kind="struct">stdair::FareOptionStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FareOptionTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00383</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; FareOptionStruct &gt;</type>
      <name>FareOptionList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a014029d86ff1c4a3c21445280ed44545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FFDisutilityCurveHolderStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00384</filename>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00385" name="FFDisutilityCurveHolderStruct.hpp" local="no" imported="no">stdair/bom/FFDisutilityCurveHolderStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FFDisutilityCurveHolderStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00385</filename>
    <includes id="a00541" name="stdair_rm_types.hpp" local="no" imported="no">stdair/stdair_rm_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::FFDisutilityCurveHolderStruct</class>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::map&lt; const std::string, FFDisutilityCurve_T &gt;</type>
      <name>FFDisutilityCurveHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aba549b34ee34dd5cba3fd20ce5ea2c1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlightDate.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00386</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <includes id="a00387" name="FlightDate.hpp" local="no" imported="no">stdair/bom/FlightDate.hpp</includes>
    <includes id="a00411" name="LegDate.hpp" local="no" imported="no">stdair/bom/LegDate.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FlightDate.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00387</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00389" name="FlightDateKey.hpp" local="no" imported="no">stdair/bom/FlightDateKey.hpp</includes>
    <includes id="a00390" name="FlightDateTypes.hpp" local="no" imported="no">stdair/bom/FlightDateTypes.hpp</includes>
    <class kind="class">stdair::FlightDate</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FlightDateKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00388</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00389" name="FlightDateKey.hpp" local="no" imported="no">stdair/bom/FlightDateKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>FlightDateKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab8881f634651289075f156eef55b4c4e</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>FlightDateKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af7d68fb8723032f61afe8f4810eb84ec</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlightDateKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00389</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::FlightDateKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FlightDateTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00390</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; FlightDate * &gt;</type>
      <name>FlightDateList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac897d12d418f6bfe878303905a3b943b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, FlightDate * &gt;</type>
      <name>FlightDateMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a161cab8007596da006451289628a1137</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlightPeriod.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00391</filename>
    <includes id="a00392" name="FlightPeriod.hpp" local="no" imported="no">stdair/bom/FlightPeriod.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FlightPeriod.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00392</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00394" name="FlightPeriodKey.hpp" local="no" imported="no">stdair/bom/FlightPeriodKey.hpp</includes>
    <includes id="a00395" name="FlightPeriodTypes.hpp" local="no" imported="no">stdair/bom/FlightPeriodTypes.hpp</includes>
    <class kind="class">stdair::FlightPeriod</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FlightPeriodKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00393</filename>
    <includes id="a00394" name="FlightPeriodKey.hpp" local="no" imported="no">stdair/bom/FlightPeriodKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FlightPeriodKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00394</filename>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <includes id="a00433" name="PeriodStruct.hpp" local="no" imported="no">stdair/bom/PeriodStruct.hpp</includes>
    <class kind="struct">stdair::FlightPeriodKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FlightPeriodTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00395</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; FlightPeriod * &gt;</type>
      <name>FlightPeriodList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a712c73859b508c7e2ca9e39f9b82980c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, FlightPeriod * &gt;</type>
      <name>FlightPeriodMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad7427121107cac491cf38848e17bc5fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FRAT5CurveHolderStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00396</filename>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00397" name="FRAT5CurveHolderStruct.hpp" local="no" imported="no">stdair/bom/FRAT5CurveHolderStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FRAT5CurveHolderStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00397</filename>
    <includes id="a00541" name="stdair_rm_types.hpp" local="no" imported="no">stdair/stdair_rm_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <class kind="struct">stdair::FRAT5CurveHolderStruct</class>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::map&lt; const std::string, FRAT5Curve_T &gt;</type>
      <name>FRAT5CurveHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a36c8a04ff858ec431537e57d392c566d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Inventory.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00398</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <includes id="a00387" name="FlightDate.hpp" local="no" imported="no">stdair/bom/FlightDate.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>Inventory.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00399</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00303" name="AirlineFeature.hpp" local="no" imported="no">stdair/bom/AirlineFeature.hpp</includes>
    <includes id="a00401" name="InventoryKey.hpp" local="no" imported="no">stdair/bom/InventoryKey.hpp</includes>
    <includes id="a00402" name="InventoryTypes.hpp" local="no" imported="no">stdair/bom/InventoryTypes.hpp</includes>
    <class kind="class">stdair::Inventory</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>InventoryKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00400</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00401" name="InventoryKey.hpp" local="no" imported="no">stdair/bom/InventoryKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>InventoryKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a414a12f421889ae35d6bea16f4b90ecf</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>InventoryKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3a5de95a47203a41277f8b0f59f1df4d</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InventoryKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00401</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::InventoryKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>InventoryTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00402</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; Inventory * &gt;</type>
      <name>InventoryList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa2443c204cfcb7ce31e90308b9a63d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, Inventory * &gt;</type>
      <name>InventoryMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a60e533d85c1c82a42910d122389ef9ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>key_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00403</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::string</type>
      <name>MapKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4a8f15e43d18c1f3e34ba36afb3ad142</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; std::string &gt;</type>
      <name>KeyList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a800514140baf9c73b3bef47d80656623</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KeyAbstract.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00404</filename>
    <class kind="struct">stdair::KeyAbstract</class>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>a39b487973091ef3fa83b07b2f036d223</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;ioOut, const stdair::KeyAbstract &amp;iKey)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; charT, traits &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>a192e5ca0d0be67651760a709d8302e00</anchor>
      <arglist>(std::basic_istream&lt; charT, traits &gt; &amp;ioIn, stdair::KeyAbstract &amp;ioKey)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LegCabin.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00405</filename>
    <includes id="a00240" name="BasConst_BookingClass.hpp" local="no" imported="no">stdair/basic/BasConst_BookingClass.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00411" name="LegDate.hpp" local="no" imported="no">stdair/bom/LegDate.hpp</includes>
    <includes id="a00406" name="LegCabin.hpp" local="no" imported="no">stdair/bom/LegCabin.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>LegCabin.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00406</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00408" name="LegCabinKey.hpp" local="no" imported="no">stdair/bom/LegCabinKey.hpp</includes>
    <includes id="a00409" name="LegCabinTypes.hpp" local="no" imported="no">stdair/bom/LegCabinTypes.hpp</includes>
    <includes id="a00482" name="VirtualClassStruct.hpp" local="no" imported="no">stdair/bom/VirtualClassStruct.hpp</includes>
    <includes id="a00483" name="VirtualClassTypes.hpp" local="no" imported="no">stdair/bom/VirtualClassTypes.hpp</includes>
    <class kind="class">stdair::LegCabin</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>LegCabinKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00407</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00408" name="LegCabinKey.hpp" local="no" imported="no">stdair/bom/LegCabinKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>LegCabinKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00408</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::LegCabinKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>LegCabinTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00409</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; LegCabin * &gt;</type>
      <name>LegCabinList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad5491ad2e9525a32f0bb858dd5fde224</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, LegCabin * &gt;</type>
      <name>LegCabinMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2cd72335b8d18e896ada6f74f792937a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LegDate.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00410</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00387" name="FlightDate.hpp" local="no" imported="no">stdair/bom/FlightDate.hpp</includes>
    <includes id="a00406" name="LegCabin.hpp" local="no" imported="no">stdair/bom/LegCabin.hpp</includes>
    <includes id="a00411" name="LegDate.hpp" local="no" imported="no">stdair/bom/LegDate.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>LegDate.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00411</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00413" name="LegDateKey.hpp" local="no" imported="no">stdair/bom/LegDateKey.hpp</includes>
    <includes id="a00414" name="LegDateTypes.hpp" local="no" imported="no">stdair/bom/LegDateTypes.hpp</includes>
    <class kind="class">stdair::LegDate</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>LegDateKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00412</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00413" name="LegDateKey.hpp" local="no" imported="no">stdair/bom/LegDateKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>LegDateKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00413</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::LegDateKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>LegDateTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00414</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; LegDate * &gt;</type>
      <name>LegDateList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af5036d369b7d3f5c1692d5a22a4b87b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, LegDate * &gt;</type>
      <name>LegDateMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a22138aca6ae648763cbfe6f9216a30d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NestingNode.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00415</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <includes id="a00343" name="BookingClassTypes.hpp" local="no" imported="no">stdair/bom/BookingClassTypes.hpp</includes>
    <includes id="a00416" name="NestingNode.hpp" local="no" imported="no">stdair/bom/NestingNode.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>NestingNode.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00416</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00541" name="stdair_rm_types.hpp" local="no" imported="no">stdair/stdair_rm_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00343" name="BookingClassTypes.hpp" local="no" imported="no">stdair/bom/BookingClassTypes.hpp</includes>
    <includes id="a00418" name="NestingNodeKey.hpp" local="no" imported="no">stdair/bom/NestingNodeKey.hpp</includes>
    <class kind="class">stdair::NestingNode</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>NestingNodeKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00417</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00418" name="NestingNodeKey.hpp" local="no" imported="no">stdair/bom/NestingNodeKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>NestingNodeKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a882b7aa42c1a90e511685228f436d4b4</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>NestingNodeKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a13870a08f0c629e6feaad4c055cef3d7</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NestingNodeKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00418</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::NestingNodeKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>NestingNodeTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00419</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; NestingNode * &gt;</type>
      <name>NestingNodeList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac50741795be118353665ef377e905159</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, NestingNode * &gt;</type>
      <name>NestingNodeMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8c66c1a5b6ca2115217d266055ba93ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NestingStructureKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00420</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00421" name="NestingStructureKey.hpp" local="no" imported="no">stdair/bom/NestingStructureKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>NestingStructureKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae873d2e7ed2fec08013a8df7bfd19735</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>NestingStructureKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab5b193efeda473cc22a9af8d2e2b4b8d</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NestingStructureKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00421</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::NestingStructureKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>OnDDate.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00422</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <includes id="a00423" name="OnDDate.hpp" local="no" imported="no">stdair/bom/OnDDate.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>OnDDate.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00423</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00541" name="stdair_rm_types.hpp" local="no" imported="no">stdair/stdair_rm_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00425" name="OnDDateKey.hpp" local="no" imported="no">stdair/bom/OnDDateKey.hpp</includes>
    <includes id="a00426" name="OnDDateTypes.hpp" local="no" imported="no">stdair/bom/OnDDateTypes.hpp</includes>
    <class kind="class">stdair::OnDDate</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>OnDDateKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00424</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00425" name="OnDDateKey.hpp" local="no" imported="no">stdair/bom/OnDDateKey.hpp</includes>
    <includes id="a00331" name="BomKeyManager.hpp" local="no" imported="no">stdair/bom/BomKeyManager.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <includes id="a00387" name="FlightDate.hpp" local="no" imported="no">stdair/bom/FlightDate.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <includes id="a00318" name="BomDisplay.hpp" local="no" imported="no">stdair/bom/BomDisplay.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>OnDDateKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a12bc25bc1749363256eda063dd224209</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>OnDDateKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afa74b5e532a8ef3ff8131a129f02667b</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OnDDateKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00425</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::OnDDateKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>OnDDateTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00426</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; OnDDate * &gt;</type>
      <name>OnDDateList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa12f23be931367ac86ffcb48e01d614e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, OnDDate * &gt;</type>
      <name>OnDDateMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adc94912a5c87963c73589447f3fce03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::string, YieldDemandPair_T &gt;</type>
      <name>StringDemandStructPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a76b2b6ce1c9949e140e3509f3813cb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, YieldDemandPair_T &gt;</type>
      <name>StringDemandStructMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa3b2a3047ab4fb3c0047cbeb76fb0361</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, CabinClassPairList_T &gt;</type>
      <name>StringCabinClassPairListMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2e4e4f8618bb573c5e742088d912ab4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::string, CabinClassPairList_T &gt;</type>
      <name>StringCabinClassPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a19d765d08f5c1c2da8e9cdabc6367cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; CabinCode_T, WTPDemandPair_T &gt;</type>
      <name>CabinForecastMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a981e30933189b8cdca53f147bef97c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; CabinCode_T, WTPDemandPair_T &gt;</type>
      <name>CabinForecastPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3cf4e69eb0eae553f767958b2028ca74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OptimisationNotificationStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00427</filename>
    <includes id="a00428" name="OptimisationNotificationStruct.hpp" local="no" imported="no">stdair/bom/OptimisationNotificationStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>OptimisationNotificationStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00428</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00429" name="OptimisationNotificationTypes.hpp" local="no" imported="no">stdair/bom/OptimisationNotificationTypes.hpp</includes>
    <class kind="struct">stdair::OptimisationNotificationStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>OptimisationNotificationTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00429</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; OptimisationNotificationStruct &gt;</type>
      <name>OptimisationNotificationPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a33133fb67e4726a04b73a38ace47cbe4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParsedKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00430</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00401" name="InventoryKey.hpp" local="no" imported="no">stdair/bom/InventoryKey.hpp</includes>
    <includes id="a00389" name="FlightDateKey.hpp" local="no" imported="no">stdair/bom/FlightDateKey.hpp</includes>
    <includes id="a00455" name="SegmentDateKey.hpp" local="no" imported="no">stdair/bom/SegmentDateKey.hpp</includes>
    <includes id="a00413" name="LegDateKey.hpp" local="no" imported="no">stdair/bom/LegDateKey.hpp</includes>
    <includes id="a00431" name="ParsedKey.hpp" local="no" imported="no">stdair/bom/ParsedKey.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>const boost::char_separator&lt; char &gt;</type>
      <name>TokeniserDashSeparator</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaef49d92505ca284d7633e7174555265</anchor>
      <arglist>(&quot;-&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const boost::char_separator&lt; char &gt;</type>
      <name>TokeniserTimeSeparator</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abd89371445fc77dbfc67603e417be259</anchor>
      <arglist>(&quot;:&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParsedKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00431</filename>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::ParsedKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PeriodStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00432</filename>
    <includes id="a00245" name="BasConst_Period_BOM.hpp" local="no" imported="no">stdair/basic/BasConst_Period_BOM.hpp</includes>
    <includes id="a00433" name="PeriodStruct.hpp" local="no" imported="no">stdair/bom/PeriodStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PeriodStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00433</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00367" name="DoWStruct.hpp" local="no" imported="no">stdair/bom/DoWStruct.hpp</includes>
    <class kind="struct">stdair::PeriodStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>Policy.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00434</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <includes id="a00343" name="BookingClassTypes.hpp" local="no" imported="no">stdair/bom/BookingClassTypes.hpp</includes>
    <includes id="a00435" name="Policy.hpp" local="no" imported="no">stdair/bom/Policy.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>Policy.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00435</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00541" name="stdair_rm_types.hpp" local="no" imported="no">stdair/stdair_rm_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00343" name="BookingClassTypes.hpp" local="no" imported="no">stdair/bom/BookingClassTypes.hpp</includes>
    <includes id="a00437" name="PolicyKey.hpp" local="no" imported="no">stdair/bom/PolicyKey.hpp</includes>
    <class kind="class">stdair::Policy</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PolicyKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00436</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00437" name="PolicyKey.hpp" local="no" imported="no">stdair/bom/PolicyKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>PolicyKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1f3ee7b1c6bd642222c937591d9721f0</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>PolicyKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab60da4790caf0e51b3730048b7d21412</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00437</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::PolicyKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PolicyTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00438</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; Policy * &gt;</type>
      <name>PolicyList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1a8b86d75f9df58cee68782b96c78f09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, Policy * &gt;</type>
      <name>PolicyMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aceff09f8e3bab64ecbac731aa87fe652</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PosChannel.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00439</filename>
    <includes id="a00246" name="BasConst_Request.hpp" local="no" imported="no">stdair/basic/BasConst_Request.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00440" name="PosChannel.hpp" local="no" imported="no">stdair/bom/PosChannel.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PosChannel.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00440</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00442" name="PosChannelKey.hpp" local="no" imported="no">stdair/bom/PosChannelKey.hpp</includes>
    <includes id="a00443" name="PosChannelTypes.hpp" local="no" imported="no">stdair/bom/PosChannelTypes.hpp</includes>
    <class kind="class">stdair::PosChannel</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PosChannelKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00441</filename>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00246" name="BasConst_Request.hpp" local="no" imported="no">stdair/basic/BasConst_Request.hpp</includes>
    <includes id="a00442" name="PosChannelKey.hpp" local="no" imported="no">stdair/bom/PosChannelKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PosChannelKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00442</filename>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <class kind="struct">stdair::PosChannelKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>PosChannelTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00443</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; PosChannel * &gt;</type>
      <name>PosChannelList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab378126c72fa818a3741ba1f3978a480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, PosChannel * &gt;</type>
      <name>PosChannelMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3ea3ffefc8914879075b7f0b3e52aa34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, PosChannel * &gt;</type>
      <name>PosChannelWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae62a09d51d4a77da11717a87c8f5ca8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; PosChannelWithKey_T &gt;</type>
      <name>PosChannelDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a74ef2097a23127c4579c9f73a3d13473</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RMEventStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00444</filename>
    <includes id="a00445" name="RMEventStruct.hpp" local="no" imported="no">stdair/bom/RMEventStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>RMEventStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00445</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00446" name="RMEventTypes.hpp" local="no" imported="no">stdair/bom/RMEventTypes.hpp</includes>
    <class kind="struct">stdair::RMEventStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>RMEventTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00446</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RMEventStruct &gt;</type>
      <name>RMEventPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a17cc4d17f6f73773a3595cab8d44255e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; RMEventStruct &gt;</type>
      <name>RMEventList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a58402aa223de18bff5d7c612b55b7771</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SegmentCabin.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00447</filename>
    <includes id="a00240" name="BasConst_BookingClass.hpp" local="no" imported="no">stdair/basic/BasConst_BookingClass.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00249" name="BasConst_Yield.hpp" local="no" imported="no">stdair/basic/BasConst_Yield.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <includes id="a00448" name="SegmentCabin.hpp" local="no" imported="no">stdair/bom/SegmentCabin.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <includes id="a00343" name="BookingClassTypes.hpp" local="no" imported="no">stdair/bom/BookingClassTypes.hpp</includes>
    <includes id="a00435" name="Policy.hpp" local="no" imported="no">stdair/bom/Policy.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentCabin.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00448</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00450" name="SegmentCabinKey.hpp" local="no" imported="no">stdair/bom/SegmentCabinKey.hpp</includes>
    <includes id="a00451" name="SegmentCabinTypes.hpp" local="no" imported="no">stdair/bom/SegmentCabinTypes.hpp</includes>
    <includes id="a00438" name="PolicyTypes.hpp" local="no" imported="no">stdair/bom/PolicyTypes.hpp</includes>
    <class kind="class">stdair::SegmentCabin</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentCabinKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00449</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00450" name="SegmentCabinKey.hpp" local="no" imported="no">stdair/bom/SegmentCabinKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>SegmentCabinKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acdce7e2c1894bc97ad4be21e05f86358</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentCabinKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7d8cce4855f55a87612623ed294bbbea</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SegmentCabinKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00450</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::SegmentCabinKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentCabinTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00451</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; SegmentCabin * &gt;</type>
      <name>SegmentCabinList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a77747e9e9d97c04f98993229220b3aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, SegmentCabin * &gt;</type>
      <name>SegmentCabinMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7d7e29126a52bc41ab05c2478062347f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SegmentDate.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00452</filename>
    <includes id="a00240" name="BasConst_BookingClass.hpp" local="no" imported="no">stdair/basic/BasConst_BookingClass.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <includes id="a00448" name="SegmentCabin.hpp" local="no" imported="no">stdair/bom/SegmentCabin.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentDate.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00453</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00455" name="SegmentDateKey.hpp" local="no" imported="no">stdair/bom/SegmentDateKey.hpp</includes>
    <includes id="a00456" name="SegmentDateTypes.hpp" local="no" imported="no">stdair/bom/SegmentDateTypes.hpp</includes>
    <class kind="class">stdair::SegmentDate</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; std::string &gt;</type>
      <name>RoutingLegKeyList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a673bb4facb8845ce33503eff6e66a6db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SegmentDateKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00454</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00455" name="SegmentDateKey.hpp" local="no" imported="no">stdair/bom/SegmentDateKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>SegmentDateKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a10a001674b51947e0d06ec8a1e0d92ac</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentDateKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afd00db1ac92ce0733f9ba56128147aac</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SegmentDateKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00455</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::SegmentDateKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentDateTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00456</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; SegmentDate * &gt;</type>
      <name>SegmentDateList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2d85d5a19c517fc13241cc3bb8ac3043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, SegmentDate * &gt;</type>
      <name>SegmentDateMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a28f3285c7facbec2793d6d8ba339f0ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SegmentPeriod.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00457</filename>
    <includes id="a00240" name="BasConst_BookingClass.hpp" local="no" imported="no">stdair/basic/BasConst_BookingClass.hpp</includes>
    <includes id="a00458" name="SegmentPeriod.hpp" local="no" imported="no">stdair/bom/SegmentPeriod.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentPeriod.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00458</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00460" name="SegmentPeriodKey.hpp" local="no" imported="no">stdair/bom/SegmentPeriodKey.hpp</includes>
    <includes id="a00461" name="SegmentPeriodTypes.hpp" local="no" imported="no">stdair/bom/SegmentPeriodTypes.hpp</includes>
    <class kind="class">stdair::SegmentPeriod</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentPeriodKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00459</filename>
    <includes id="a00460" name="SegmentPeriodKey.hpp" local="no" imported="no">stdair/bom/SegmentPeriodKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentPeriodKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00460</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::SegmentPeriodKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentPeriodTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00461</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; SegmentPeriod * &gt;</type>
      <name>SegmentPeriodList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3fdd48b295e0d4dec52c6fce1786b3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, SegmentPeriod * &gt;</type>
      <name>SegmentPeriodMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a85164f4b4b9f047b465ccf953deabd94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, SegmentPeriod * &gt;</type>
      <name>SegmentPeriodWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6794fcab030ca310dd87dad614cdd43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; SegmentPeriodWithKey_T &gt;</type>
      <name>SegmentPeriodDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab0485ab32847941f93ee4217d10e7a97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SegmentSnapshotTable.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00462</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00463" name="SegmentSnapshotTable.hpp" local="no" imported="no">stdair/bom/SegmentSnapshotTable.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentSnapshotTable.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00463</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00465" name="SegmentSnapshotTableKey.hpp" local="no" imported="no">stdair/bom/SegmentSnapshotTableKey.hpp</includes>
    <includes id="a00466" name="SegmentSnapshotTableTypes.hpp" local="no" imported="no">stdair/bom/SegmentSnapshotTableTypes.hpp</includes>
    <class kind="class">stdair::SegmentSnapshotTable</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentSnapshotTableKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00464</filename>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00239" name="BasConst_BomDisplay.hpp" local="no" imported="no">stdair/basic/BasConst_BomDisplay.hpp</includes>
    <includes id="a00465" name="SegmentSnapshotTableKey.hpp" local="no" imported="no">stdair/bom/SegmentSnapshotTableKey.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>template void</type>
      <name>SegmentSnapshotTableKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeb99161a07f0d06f87388292ce0b8551</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentSnapshotTableKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a14d79320240d7376aee1b05f4e6fc3c5</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SegmentSnapshotTableKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00465</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::SegmentSnapshotTableKey</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SegmentSnapshotTableTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00466</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; SegmentSnapshotTable * &gt;</type>
      <name>SegmentSnapshotTableList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a66d18ef800c893f6db854a94d2e4c3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, SegmentSnapshotTable * &gt;</type>
      <name>SegmentSnapshotTableMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3fbf7d7f45e61d97e0d6331cf19b3e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const SegmentCabin *, SegmentDataID_T &gt;</type>
      <name>SegmentCabinIndexMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac2d71db3a1b0390307b1231c99836972</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, ClassIndex_T &gt;</type>
      <name>ClassIndexMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5810786ff70162f3833af9f77e537169</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleNestingStructure.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00467</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <includes id="a00468" name="SimpleNestingStructure.hpp" local="no" imported="no">stdair/bom/SimpleNestingStructure.hpp</includes>
    <includes id="a00416" name="NestingNode.hpp" local="no" imported="no">stdair/bom/NestingNode.hpp</includes>
    <includes id="a00419" name="NestingNodeTypes.hpp" local="no" imported="no">stdair/bom/NestingNodeTypes.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleNestingStructure.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00468</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00419" name="NestingNodeTypes.hpp" local="no" imported="no">stdair/bom/NestingNodeTypes.hpp</includes>
    <includes id="a00469" name="SimpleNestingStructureTypes.hpp" local="no" imported="no">stdair/bom/SimpleNestingStructureTypes.hpp</includes>
    <includes id="a00421" name="NestingStructureKey.hpp" local="no" imported="no">stdair/bom/NestingStructureKey.hpp</includes>
    <class kind="class">stdair::SimpleNestingStructure</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleNestingStructureTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00469</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; SimpleNestingStructure * &gt;</type>
      <name>SimpleNestingStructureList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab8b62892c66ee8bcf26288f8b9da5bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, SimpleNestingStructure * &gt;</type>
      <name>SimpleNestingStructureMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aafab5cdfdbd54a336ce79226b6bfa1be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnapshotStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00470</filename>
    <includes id="a00471" name="SnapshotStruct.hpp" local="no" imported="no">stdair/bom/SnapshotStruct.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SnapshotStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00471</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00472" name="SnapshotTypes.hpp" local="no" imported="no">stdair/bom/SnapshotTypes.hpp</includes>
    <class kind="struct">stdair::SnapshotStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>SnapshotTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00472</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SnapshotStruct &gt;</type>
      <name>SnapshotPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8a5341cad8d23b83dbacb1b2a74d150e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimePeriod.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00473</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00474" name="TimePeriod.hpp" local="no" imported="no">stdair/bom/TimePeriod.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>TimePeriod.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00474</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00476" name="TimePeriodKey.hpp" local="no" imported="no">stdair/bom/TimePeriodKey.hpp</includes>
    <includes id="a00477" name="TimePeriodTypes.hpp" local="no" imported="no">stdair/bom/TimePeriodTypes.hpp</includes>
    <class kind="class">stdair::TimePeriod</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>TimePeriodKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00475</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00476" name="TimePeriodKey.hpp" local="no" imported="no">stdair/bom/TimePeriodKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>TimePeriodKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00476</filename>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <class kind="struct">stdair::TimePeriodKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>TimePeriodTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00477</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; TimePeriod * &gt;</type>
      <name>TimePeriodList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a060ae38f706a8d404f558060855e0c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, TimePeriod * &gt;</type>
      <name>TimePeriodMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8fe66d2dbd5cd269196354f388ea4a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, TimePeriod * &gt;</type>
      <name>TimePeriodWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a37a2a59547f81760673c0be3b76c2858</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; TimePeriodWithKey_T &gt;</type>
      <name>TimePeriodDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1822868ce82272eaee807c03b5485b90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TravelSolutionStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00478</filename>
    <includes id="a00240" name="BasConst_BookingClass.hpp" local="no" imported="no">stdair/basic/BasConst_BookingClass.hpp</includes>
    <includes id="a00479" name="TravelSolutionStruct.hpp" local="no" imported="no">stdair/bom/TravelSolutionStruct.hpp</includes>
    <includes id="a00331" name="BomKeyManager.hpp" local="no" imported="no">stdair/bom/BomKeyManager.hpp</includes>
    <includes id="a00431" name="ParsedKey.hpp" local="no" imported="no">stdair/bom/ParsedKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>TravelSolutionStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00479</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00343" name="BookingClassTypes.hpp" local="no" imported="no">stdair/bom/BookingClassTypes.hpp</includes>
    <includes id="a00382" name="FareOptionStruct.hpp" local="no" imported="no">stdair/bom/FareOptionStruct.hpp</includes>
    <includes id="a00383" name="FareOptionTypes.hpp" local="no" imported="no">stdair/bom/FareOptionTypes.hpp</includes>
    <includes id="a00480" name="TravelSolutionTypes.hpp" local="no" imported="no">stdair/bom/TravelSolutionTypes.hpp</includes>
    <class kind="struct">stdair::TravelSolutionStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>TravelSolutionTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00480</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00323" name="BomIDTypes.hpp" local="no" imported="no">stdair/bom/BomIDTypes.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; TravelSolutionStruct &gt;</type>
      <name>TravelSolutionList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7044bfd349753c09860d25bdba03144a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyList_T</type>
      <name>SegmentPath_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a55b9164cbb39950d96cb44165fd7277a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; SegmentPath_T &gt;</type>
      <name>SegmentPathList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7a311b7c0dda6cc904ab0d24768d0e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const ClassCode_T, Availability_T &gt;</type>
      <name>ClassAvailabilityMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6b90932da2c94e4db3283c13c606a14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ClassAvailabilityMap_T &gt;</type>
      <name>ClassAvailabilityMapHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adb9f2693563aa1fab9c0927563d2e8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const ClassCode_T, BookingClassID_T &gt;</type>
      <name>ClassObjectIDMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af2a6622f4c07a8dcae9f305e9c16ead4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ClassObjectIDMap_T &gt;</type>
      <name>ClassObjectIDMapHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af8327c90ce7ddc2c9a8a71aa491dafb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const ClassCode_T, YieldValue_T &gt;</type>
      <name>ClassYieldMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8c288f503d7744b81c959a7f145ebc82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ClassYieldMap_T &gt;</type>
      <name>ClassYieldMapHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aefc556baddbb14979f4b78273ca7ce6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BidPriceVector_T &gt;</type>
      <name>BidPriceVectorHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aef0dce68661165996af82c2c487aa164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const ClassCode_T, const BidPriceVector_T * &gt;</type>
      <name>ClassBpvMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac24a4a21a4c5d499e22b8193015a2aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ClassBpvMap_T &gt;</type>
      <name>ClassBpvMapHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab140bbaa77ddb2d4ee2d87a1d3341013</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VirtualClassStruct.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00481</filename>
    <includes id="a00482" name="VirtualClassStruct.hpp" local="no" imported="no">stdair/bom/VirtualClassStruct.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>VirtualClassStruct.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00482</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <includes id="a00541" name="stdair_rm_types.hpp" local="no" imported="no">stdair/stdair_rm_types.hpp</includes>
    <includes id="a00292" name="StructAbstract.hpp" local="no" imported="no">stdair/basic/StructAbstract.hpp</includes>
    <includes id="a00343" name="BookingClassTypes.hpp" local="no" imported="no">stdair/bom/BookingClassTypes.hpp</includes>
    <class kind="struct">stdair::VirtualClassStruct</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>VirtualClassTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00483</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; VirtualClassStruct &gt;</type>
      <name>VirtualClassList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1ba89e9a3280b974defe8dad89ce50c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const YieldLevel_T, VirtualClassStruct &gt;</type>
      <name>VirtualClassMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a73b81249c5454af80823447709427789</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>YieldFeatures.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00484</filename>
    <includes id="a00246" name="BasConst_Request.hpp" local="no" imported="no">stdair/basic/BasConst_Request.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00485" name="YieldFeatures.hpp" local="no" imported="no">stdair/bom/YieldFeatures.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>YieldFeatures.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00485</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00487" name="YieldFeaturesKey.hpp" local="no" imported="no">stdair/bom/YieldFeaturesKey.hpp</includes>
    <includes id="a00488" name="YieldFeaturesTypes.hpp" local="no" imported="no">stdair/bom/YieldFeaturesTypes.hpp</includes>
    <class kind="class">stdair::YieldFeatures</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>YieldFeaturesKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00486</filename>
    <includes id="a00246" name="BasConst_Request.hpp" local="no" imported="no">stdair/basic/BasConst_Request.hpp</includes>
    <includes id="a00487" name="YieldFeaturesKey.hpp" local="no" imported="no">stdair/bom/YieldFeaturesKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>YieldFeaturesKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00487</filename>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <class kind="struct">stdair::YieldFeaturesKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>YieldFeaturesTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00488</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; YieldFeatures * &gt;</type>
      <name>YieldFeaturesList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad1c7cd5db8cf3ed3e721595087ac98c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, YieldFeatures * &gt;</type>
      <name>YieldFeaturesMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a84ff89af680e5147f012222333703742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, YieldFeatures * &gt;</type>
      <name>YieldFeaturesWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a46a6d8f2b739784f51aa2edb559066ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; YieldFeaturesWithKey_T &gt;</type>
      <name>YieldFeaturesDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab8e954242a63ed84605f703766869dba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>YieldStore.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00489</filename>
    <includes id="a00490" name="YieldStore.hpp" local="no" imported="no">stdair/bom/YieldStore.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>YieldStore.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00490</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00492" name="YieldStoreKey.hpp" local="no" imported="no">stdair/bom/YieldStoreKey.hpp</includes>
    <includes id="a00493" name="YieldStoreTypes.hpp" local="no" imported="no">stdair/bom/YieldStoreTypes.hpp</includes>
    <class kind="class">stdair::YieldStore</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>YieldStoreKey.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00491</filename>
    <includes id="a00492" name="YieldStoreKey.hpp" local="no" imported="no">stdair/bom/YieldStoreKey.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>YieldStoreKey.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00492</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00404" name="KeyAbstract.hpp" local="no" imported="no">stdair/bom/KeyAbstract.hpp</includes>
    <class kind="struct">stdair::YieldStoreKey</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>YieldStoreTypes.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/bom/</path>
    <filename>a00493</filename>
    <includes id="a00403" name="key_types.hpp" local="no" imported="no">stdair/bom/key_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::list&lt; YieldStore * &gt;</type>
      <name>YieldStoreList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a14f930fef72811a2273ab3d72a49ffaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, YieldStore * &gt;</type>
      <name>YieldStoreMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0499395b6d165da12f6ec05aa8ddbb75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CmdAbstract.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/command/</path>
    <filename>a00494</filename>
    <includes id="a00495" name="CmdAbstract.hpp" local="no" imported="no">stdair/command/CmdAbstract.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>CmdAbstract.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/command/</path>
    <filename>a00495</filename>
    <class kind="class">stdair::CmdAbstract</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>CmdBomManager.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/command/</path>
    <filename>a00496</filename>
  </compound>
  <compound kind="file">
    <name>CmdBomManager.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/command/</path>
    <filename>a00497</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00289" name="SampleType.hpp" local="no" imported="no">stdair/basic/SampleType.hpp</includes>
    <includes id="a00480" name="TravelSolutionTypes.hpp" local="no" imported="no">stdair/bom/TravelSolutionTypes.hpp</includes>
    <includes id="a00495" name="CmdAbstract.hpp" local="no" imported="no">stdair/command/CmdAbstract.hpp</includes>
    <class kind="class">stdair::CmdBomManager</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>CmdBomSerialiser.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/command/</path>
    <filename>a00498</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00336" name="BomRoot.hpp" local="no" imported="no">stdair/bom/BomRoot.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <includes id="a00387" name="FlightDate.hpp" local="no" imported="no">stdair/bom/FlightDate.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <includes id="a00448" name="SegmentCabin.hpp" local="no" imported="no">stdair/bom/SegmentCabin.hpp</includes>
    <includes id="a00372" name="FareFamily.hpp" local="no" imported="no">stdair/bom/FareFamily.hpp</includes>
    <includes id="a00411" name="LegDate.hpp" local="no" imported="no">stdair/bom/LegDate.hpp</includes>
    <includes id="a00406" name="LegCabin.hpp" local="no" imported="no">stdair/bom/LegCabin.hpp</includes>
    <includes id="a00351" name="Bucket.hpp" local="no" imported="no">stdair/bom/Bucket.hpp</includes>
    <includes id="a00512" name="FacBomManager.hpp" local="no" imported="no">stdair/factory/FacBomManager.hpp</includes>
    <includes id="a00510" name="FacBom.hpp" local="no" imported="no">stdair/factory/FacBom.hpp</includes>
    <includes id="a00499" name="CmdBomSerialiser.hpp" local="no" imported="no">stdair/command/CmdBomSerialiser.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>void</type>
      <name>serialiseHelper</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6df755135da86129778da717bfa8b6c3</anchor>
      <arglist>(BOM_OBJECT1 &amp;ioObject1, Archive &amp;ioArchive, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BomRoot::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6887120c912337fc83927cda2668d806</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BomRoot::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a84cdeab557f956598cc4e5acad9ee154</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>Inventory::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>add6e12425e5e2b9ab7a8ae6ba0f6575f</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>Inventory::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9d11313512e56522847c959c0eea6385</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>FlightDate::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5abec1f4afab123bb09c5edf6d2c406f</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>FlightDate::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a19b4f18d9a6add3e87e9572709eb4efc</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentDate::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a41b8cf7b9ce0453c236e637d53e654c9</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentDate::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a68530bd90302b9954186d553ea0be8f8</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentCabin::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afe08e122df5b74143c1313de779d0ab0</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentCabin::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2a2a431554718f677c0e6742a38c3453</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CmdBomSerialiser.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/command/</path>
    <filename>a00499</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00480" name="TravelSolutionTypes.hpp" local="no" imported="no">stdair/bom/TravelSolutionTypes.hpp</includes>
    <includes id="a00495" name="CmdAbstract.hpp" local="no" imported="no">stdair/command/CmdAbstract.hpp</includes>
    <class kind="class">stdair::CmdBomSerialiser</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>CmdCloneBomManager.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/command/</path>
    <filename>a00500</filename>
  </compound>
  <compound kind="file">
    <name>CmdCloneBomManager.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/command/</path>
    <filename>a00501</filename>
    <includes id="a00495" name="CmdAbstract.hpp" local="no" imported="no">stdair/command/CmdAbstract.hpp</includes>
    <includes id="a00336" name="BomRoot.hpp" local="no" imported="no">stdair/bom/BomRoot.hpp</includes>
    <includes id="a00399" name="Inventory.hpp" local="no" imported="no">stdair/bom/Inventory.hpp</includes>
    <includes id="a00303" name="AirlineFeature.hpp" local="no" imported="no">stdair/bom/AirlineFeature.hpp</includes>
    <includes id="a00423" name="OnDDate.hpp" local="no" imported="no">stdair/bom/OnDDate.hpp</includes>
    <includes id="a00387" name="FlightDate.hpp" local="no" imported="no">stdair/bom/FlightDate.hpp</includes>
    <includes id="a00411" name="LegDate.hpp" local="no" imported="no">stdair/bom/LegDate.hpp</includes>
    <includes id="a00406" name="LegCabin.hpp" local="no" imported="no">stdair/bom/LegCabin.hpp</includes>
    <includes id="a00351" name="Bucket.hpp" local="no" imported="no">stdair/bom/Bucket.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <includes id="a00448" name="SegmentCabin.hpp" local="no" imported="no">stdair/bom/SegmentCabin.hpp</includes>
    <includes id="a00372" name="FareFamily.hpp" local="no" imported="no">stdair/bom/FareFamily.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <includes id="a00310" name="AirportPair.hpp" local="no" imported="no">stdair/bom/AirportPair.hpp</includes>
    <includes id="a00440" name="PosChannel.hpp" local="no" imported="no">stdair/bom/PosChannel.hpp</includes>
    <includes id="a00362" name="DatePeriod.hpp" local="no" imported="no">stdair/bom/DatePeriod.hpp</includes>
    <includes id="a00474" name="TimePeriod.hpp" local="no" imported="no">stdair/bom/TimePeriod.hpp</includes>
    <includes id="a00377" name="FareFeatures.hpp" local="no" imported="no">stdair/bom/FareFeatures.hpp</includes>
    <includes id="a00485" name="YieldFeatures.hpp" local="no" imported="no">stdair/bom/YieldFeatures.hpp</includes>
    <includes id="a00298" name="AirlineClassList.hpp" local="no" imported="no">stdair/bom/AirlineClassList.hpp</includes>
    <includes id="a00458" name="SegmentPeriod.hpp" local="no" imported="no">stdair/bom/SegmentPeriod.hpp</includes>
    <includes id="a00392" name="FlightPeriod.hpp" local="no" imported="no">stdair/bom/FlightPeriod.hpp</includes>
    <class kind="class">stdair::CmdCloneBomManager</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DBManagerForAirlines.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/command/</path>
    <filename>a00502</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00308" name="AirlineStruct.hpp" local="no" imported="no">stdair/bom/AirlineStruct.hpp</includes>
    <includes id="a00507" name="DbaAirline.hpp" local="no" imported="no">stdair/dbadaptor/DbaAirline.hpp</includes>
    <includes id="a00503" name="DBManagerForAirlines.hpp" local="no" imported="no">stdair/command/DBManagerForAirlines.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DBManagerForAirlines.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/command/</path>
    <filename>a00503</filename>
    <includes id="a00531" name="stdair_db.hpp" local="no" imported="no">stdair/stdair_db.hpp</includes>
    <includes id="a00495" name="CmdAbstract.hpp" local="no" imported="no">stdair/command/CmdAbstract.hpp</includes>
    <class kind="class">stdair::DBManagerForAirlines</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DbaAbstract.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/dbadaptor/</path>
    <filename>a00504</filename>
    <includes id="a00505" name="DbaAbstract.hpp" local="no" imported="no">stdair/dbadaptor/DbaAbstract.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DbaAbstract.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/dbadaptor/</path>
    <filename>a00505</filename>
    <class kind="class">stdair::DbaAbstract</class>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a619220cbc12d623aa4f9c11d8dbb7997</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;ioOut, const stdair::DbaAbstract &amp;iDba)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; charT, traits &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a342933276c51137a235f3562758d5025</anchor>
      <arglist>(std::basic_istream&lt; charT, traits &gt; &amp;ioIn, stdair::DbaAbstract &amp;ioDba)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DbaAirline.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/dbadaptor/</path>
    <filename>a00506</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00308" name="AirlineStruct.hpp" local="no" imported="no">stdair/bom/AirlineStruct.hpp</includes>
    <includes id="a00507" name="DbaAirline.hpp" local="no" imported="no">stdair/dbadaptor/DbaAirline.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>soci</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DbaAirline.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/dbadaptor/</path>
    <filename>a00507</filename>
    <class kind="struct">soci::type_conversion&lt; stdair::AirlineStruct &gt;</class>
    <namespace>stdair</namespace>
    <namespace>soci</namespace>
  </compound>
  <compound kind="file">
    <name>FacAbstract.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/factory/</path>
    <filename>a00508</filename>
    <includes id="a00314" name="BomAbstract.hpp" local="no" imported="no">stdair/bom/BomAbstract.hpp</includes>
    <includes id="a00509" name="FacAbstract.hpp" local="no" imported="no">stdair/factory/FacAbstract.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacAbstract.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/factory/</path>
    <filename>a00509</filename>
    <class kind="class">stdair::FacAbstract</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacBom.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/factory/</path>
    <filename>a00510</filename>
    <includes id="a00509" name="FacAbstract.hpp" local="no" imported="no">stdair/factory/FacAbstract.hpp</includes>
    <includes id="a00521" name="FacSupervisor.hpp" local="no" imported="no">stdair/service/FacSupervisor.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <class kind="class">stdair::FacBom</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacBomManager.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/factory/</path>
    <filename>a00511</filename>
    <includes id="a00243" name="BasConst_General.hpp" local="no" imported="no">stdair/basic/BasConst_General.hpp</includes>
    <includes id="a00244" name="BasConst_Inventory.hpp" local="no" imported="no">stdair/basic/BasConst_Inventory.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00448" name="SegmentCabin.hpp" local="no" imported="no">stdair/bom/SegmentCabin.hpp</includes>
    <includes id="a00468" name="SimpleNestingStructure.hpp" local="no" imported="no">stdair/bom/SimpleNestingStructure.hpp</includes>
    <includes id="a00416" name="NestingNode.hpp" local="no" imported="no">stdair/bom/NestingNode.hpp</includes>
    <includes id="a00340" name="BookingClass.hpp" local="no" imported="no">stdair/bom/BookingClass.hpp</includes>
    <includes id="a00512" name="FacBomManager.hpp" local="no" imported="no">stdair/factory/FacBomManager.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacBomManager.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/factory/</path>
    <filename>a00512</filename>
    <includes id="a00319" name="BomHolder.hpp" local="no" imported="no">stdair/bom/BomHolder.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00509" name="FacAbstract.hpp" local="no" imported="no">stdair/factory/FacAbstract.hpp</includes>
    <includes id="a00510" name="FacBom.hpp" local="no" imported="no">stdair/factory/FacBom.hpp</includes>
    <includes id="a00453" name="SegmentDate.hpp" local="no" imported="no">stdair/bom/SegmentDate.hpp</includes>
    <class kind="class">stdair::FacBomManager</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacCloneBom.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/factory/</path>
    <filename>a00513</filename>
    <includes id="a00509" name="FacAbstract.hpp" local="no" imported="no">stdair/factory/FacAbstract.hpp</includes>
    <includes id="a00521" name="FacSupervisor.hpp" local="no" imported="no">stdair/service/FacSupervisor.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <class kind="class">stdair::FacCloneBom</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DBSessionManager.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00514</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00251" name="BasDBParams.hpp" local="no" imported="no">stdair/basic/BasDBParams.hpp</includes>
    <includes id="a00515" name="DBSessionManager.hpp" local="no" imported="no">stdair/service/DBSessionManager.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>DBSessionManager.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00515</filename>
    <includes id="a00531" name="stdair_db.hpp" local="no" imported="no">stdair/stdair_db.hpp</includes>
    <class kind="class">stdair::DBSessionManager</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacServiceAbstract.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00516</filename>
    <includes id="a00525" name="ServiceAbstract.hpp" local="no" imported="no">stdair/service/ServiceAbstract.hpp</includes>
    <includes id="a00517" name="FacServiceAbstract.hpp" local="no" imported="no">stdair/service/FacServiceAbstract.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacServiceAbstract.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00517</filename>
    <class kind="class">stdair::FacServiceAbstract</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacSTDAIRServiceContext.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00518</filename>
    <includes id="a00521" name="FacSupervisor.hpp" local="no" imported="no">stdair/service/FacSupervisor.hpp</includes>
    <includes id="a00519" name="FacSTDAIRServiceContext.hpp" local="no" imported="no">stdair/service/FacSTDAIRServiceContext.hpp</includes>
    <includes id="a00528" name="STDAIR_ServiceContext.hpp" local="no" imported="no">stdair/service/STDAIR_ServiceContext.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacSTDAIRServiceContext.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00519</filename>
    <includes id="a00517" name="FacServiceAbstract.hpp" local="no" imported="no">stdair/service/FacServiceAbstract.hpp</includes>
    <class kind="class">stdair::FacSTDAIRServiceContext</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacSupervisor.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00520</filename>
    <includes id="a00509" name="FacAbstract.hpp" local="no" imported="no">stdair/factory/FacAbstract.hpp</includes>
    <includes id="a00517" name="FacServiceAbstract.hpp" local="no" imported="no">stdair/service/FacServiceAbstract.hpp</includes>
    <includes id="a00521" name="FacSupervisor.hpp" local="no" imported="no">stdair/service/FacSupervisor.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00515" name="DBSessionManager.hpp" local="no" imported="no">stdair/service/DBSessionManager.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>FacSupervisor.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00521</filename>
    <class kind="class">stdair::FacSupervisor</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>Logger.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00522</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>Logger.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00523</filename>
    <includes id="a00539" name="stdair_log.hpp" local="no" imported="no">stdair/stdair_log.hpp</includes>
    <includes id="a00255" name="BasLogParams.hpp" local="no" imported="no">stdair/basic/BasLogParams.hpp</includes>
    <class kind="class">stdair::Logger</class>
    <namespace>stdair</namespace>
    <member kind="define">
      <type>#define</type>
      <name>STDAIR_LOG_CORE</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a3e595907a99ee1795bd6631f5998d08a</anchor>
      <arglist>(iLevel, iToBeLogged)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STDAIR_LOG_CRITICAL</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a822c0576369b3f8c529a3286de96e8c0</anchor>
      <arglist>(iToBeLogged)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STDAIR_LOG_ERROR</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a5783c16fbea78f09924fd6154e7173c9</anchor>
      <arglist>(iToBeLogged)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STDAIR_LOG_NOTIFICATION</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>af0a129cd6bc6bbcb41179d08dd79b1af</anchor>
      <arglist>(iToBeLogged)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STDAIR_LOG_WARNING</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a12802252f61143c77d4f8999f47d2bb3</anchor>
      <arglist>(iToBeLogged)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STDAIR_LOG_DEBUG</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a24f87ac1961418818b267ed4d02ff487</anchor>
      <arglist>(iToBeLogged)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STDAIR_LOG_VERBOSE</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>abff2ef39e78859f8122001b0eb6820d1</anchor>
      <arglist>(iToBeLogged)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ServiceAbstract.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00524</filename>
    <includes id="a00525" name="ServiceAbstract.hpp" local="no" imported="no">stdair/service/ServiceAbstract.hpp</includes>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>ServiceAbstract.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00525</filename>
    <class kind="class">stdair::ServiceAbstract</class>
    <namespace>stdair</namespace>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>a8587463be647120c598a9c58bfdc7f34</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;ioOut, const stdair::ServiceAbstract &amp;iService)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; charT, traits &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>a3e93ef989caaeb835e677e0826f2e7e6</anchor>
      <arglist>(std::basic_istream&lt; charT, traits &gt; &amp;ioIn, stdair::ServiceAbstract &amp;ioService)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STDAIR_Service.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00526</filename>
    <includes id="a00544" name="stdair_types.hpp" local="no" imported="no">stdair/stdair_types.hpp</includes>
    <includes id="a00538" name="stdair_json.hpp" local="no" imported="no">stdair/stdair_json.hpp</includes>
    <includes id="a00237" name="BasChronometer.hpp" local="no" imported="no">stdair/basic/BasChronometer.hpp</includes>
    <includes id="a00332" name="BomManager.hpp" local="no" imported="no">stdair/bom/BomManager.hpp</includes>
    <includes id="a00334" name="BomRetriever.hpp" local="no" imported="no">stdair/bom/BomRetriever.hpp</includes>
    <includes id="a00327" name="BomJSONExport.hpp" local="no" imported="no">stdair/bom/BomJSONExport.hpp</includes>
    <includes id="a00329" name="BomJSONImport.hpp" local="no" imported="no">stdair/bom/BomJSONImport.hpp</includes>
    <includes id="a00325" name="BomINIImport.hpp" local="no" imported="no">stdair/bom/BomINIImport.hpp</includes>
    <includes id="a00318" name="BomDisplay.hpp" local="no" imported="no">stdair/bom/BomDisplay.hpp</includes>
    <includes id="a00336" name="BomRoot.hpp" local="no" imported="no">stdair/bom/BomRoot.hpp</includes>
    <includes id="a00369" name="EventStruct.hpp" local="no" imported="no">stdair/bom/EventStruct.hpp</includes>
    <includes id="a00345" name="BookingRequestStruct.hpp" local="no" imported="no">stdair/bom/BookingRequestStruct.hpp</includes>
    <includes id="a00362" name="DatePeriod.hpp" local="no" imported="no">stdair/bom/DatePeriod.hpp</includes>
    <includes id="a00497" name="CmdBomManager.hpp" local="no" imported="no">stdair/command/CmdBomManager.hpp</includes>
    <includes id="a00501" name="CmdCloneBomManager.hpp" local="no" imported="no">stdair/command/CmdCloneBomManager.hpp</includes>
    <includes id="a00521" name="FacSupervisor.hpp" local="no" imported="no">stdair/service/FacSupervisor.hpp</includes>
    <includes id="a00519" name="FacSTDAIRServiceContext.hpp" local="no" imported="no">stdair/service/FacSTDAIRServiceContext.hpp</includes>
    <includes id="a00523" name="Logger.hpp" local="no" imported="no">stdair/service/Logger.hpp</includes>
    <includes id="a00515" name="DBSessionManager.hpp" local="no" imported="no">stdair/service/DBSessionManager.hpp</includes>
    <includes id="a00542" name="STDAIR_Service.hpp" local="no" imported="no">stdair/STDAIR_Service.hpp</includes>
    <namespace>bpt</namespace>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>STDAIR_ServiceContext.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00527</filename>
  </compound>
  <compound kind="file">
    <name>STDAIR_ServiceContext.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/service/</path>
    <filename>a00528</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00255" name="BasLogParams.hpp" local="no" imported="no">stdair/basic/BasLogParams.hpp</includes>
    <includes id="a00251" name="BasDBParams.hpp" local="no" imported="no">stdair/basic/BasDBParams.hpp</includes>
    <includes id="a00359" name="ConfigHolderStruct.hpp" local="no" imported="no">stdair/bom/ConfigHolderStruct.hpp</includes>
    <includes id="a00291" name="ServiceInitialisationType.hpp" local="no" imported="no">stdair/basic/ServiceInitialisationType.hpp</includes>
    <includes id="a00525" name="ServiceAbstract.hpp" local="no" imported="no">stdair/service/ServiceAbstract.hpp</includes>
    <class kind="class">stdair::STDAIR_ServiceContext</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>stdair_basic_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00529</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::string</type>
      <name>LocationCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a194808a1bf90a2ce7b76b21b4e82196e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>Distance_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a210e274e0cd4cb20eee6947655f52c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocationCode_T</type>
      <name>AirportCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af1b500f17ebcafbb4a83d03e5a0d7846</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocationCode_T</type>
      <name>CityCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae40f6b7ccf542e22817e0f4a4d5d9a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>KeyDescription_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a469c2588c43138c03ce1800f933e6bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>AirlineCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac0ab9f765621de3140cc27d6472f5581</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>FlightNumber_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abb24a0796f29fe921b6dbe3ba0fa638e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TableID_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afa892e4ae1702750a781d9f83cbec007</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CabinCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af6e007ccf2f470cad8779ea76dc958c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>FamilyCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa8f1eaf9bbab3ad018c9e96be9b1a45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>PolicyCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5953b9a9bafaa47f39b430c010a95ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>NestingStructureCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a72bd92927ccd6db1c90c81445e8762e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>NestingNodeCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af3bb7165c3205bd0fff31f5b920c29a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>ClassCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2333a1276804180fe52c77f099005054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>Identity_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5becadf974980975c25ee7a5dd57f4d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>TripType_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3fc070ff94549282179c4e0e10213667</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>MonetaryValue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3bd7e80eaccd69d2450b24e1508b4aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealNumber_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac8fc702736cc285308091cec22440ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Percentage_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4575a0d83bcce499ad574f795720e330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>PriceValue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2fa5b378f892db246eab1e14126a66a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>YieldValue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>add400a1cfac7bd4e3eda0624cab7d54a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>PriceCurrency_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4356fc7c27becfcb9b6df970611e3ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Revenue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae20e89311b33bf1e09eb44da18cfb3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Multiplier_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acc8da938b124d1a5ec9d0ecbaa547517</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfSeats_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad571e4c3f7a893d5caf605dd90c6315f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Count_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeb25b3ef91ed7080a5d43a20cd099d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>PartySize_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a474d6775eb6e99cd3877248807335cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfRequests_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab5c73bf4ab614fa17ddb15710ae1f982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NbOfRequests_T</type>
      <name>NbOfBookings_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4ccbb6018b0ae289333d15298e47ecb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NbOfRequests_T</type>
      <name>NbOfCancellations_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7d8717b4bd0c3447deb34a889e907ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>NbOfTravelSolutions_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a239e221bcfc2a1750ce5192e57e52c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>ClassList_String_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8955958d7655605902d49df1588c3dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>NbOfSegments_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aee716785c6fba1d4d1a0b6bd446e6e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>NbOfAirlines_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0b71b9439496e53b82a15ba7ed5e7663</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Availability_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a98f98ecbccf4e7bfea260b013e1c6c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Fare_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a04f34b37b2ec54fcda45cc9a77d080f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Flag_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a106c0f4d63d9311775849171233bcd36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>UnsignedIndex_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9f7ff5ce50fd08acd7aa589777c4425b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>NbOfClasses_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a346894440ebc0e73b3a348e672c07232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>NbOfFareFamilies_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4b1840f8f1744b40c199f0371a646d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>Filename_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a79a6f56285b817edc02d72eb1f437dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>FileAddress_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8cb8088370501a4e5f60695ae9952459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>ProgressPercentage_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a10ee9d7556c5dfaa863372db3989c60c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdair_date_time_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00530</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>boost::posix_time::time_duration</type>
      <name>Duration_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac2284dabf9336e9472063158510f62c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::gregorian::date</type>
      <name>Date_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a049eb52315b4e9bb21a411f8b9d9012e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::time_duration</type>
      <name>Time_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a43f981bcd64afe6461278a030d27a926</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::ptime</type>
      <name>DateTime_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a158c02e7885bcab624391189d7563c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::gregorian::date_period</type>
      <name>DatePeriod_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a923842effcf1b0dc1001731efc276d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DOW_String_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9e160a1675542a2c0fbf32e4bca17770</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::gregorian::date_duration</type>
      <name>DateOffset_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1b93767b6aab60b88f5309ce0f8894ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>DayDuration_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad35d13dc390443e736db5bca9bfe1966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>SaturdayStay_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a713af56dbc04fcb11b3a2fc8ff71b407</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long int</type>
      <name>IntDuration_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a201867dc3e3703d41da8be03ff6e25b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long int</type>
      <name>LongDuration_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a334dd114dfe45bd0ef8b7bef0d215ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>FloatDuration_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6bbf062db5f41f65b9693e409b1cd2e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdair_db.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00531</filename>
    <namespace>soci</namespace>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>soci::session</type>
      <name>DBSession_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af9885c4dbd3b05a275c49b96aadd7165</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soci::statement</type>
      <name>DBRequestStatement_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a29d5eb8225d8560ae8ee69a8a2a01cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DBConnectionName_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a20a2ca798efe2ac5b059bb1934b5de4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdair_demand_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00532</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>bool</type>
      <name>ChangeFees_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adb0bab11604ea43463915616cd74c1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>NonRefundable_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aae06fc88e5f52d47c178eb5825f0ab4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>SaturdayStayRatio_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8e0551227e8f078de0c5c0bbb176cc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ChangeFeesRatio_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a86c6bf8b72d40081c0acfae28e57f2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NonRefundableRatio_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8ff050baa49d6ebbc6ed667619bacbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Disutility_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aed5b100656577a93a8c6e96007f487dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>PassengerType_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5ba32c2de036f4a1c704d075bf5eb4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DistributionPatternId_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ace1cc6f4eff5a3513e170ec0fa250011</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CancellationRateCurveId_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af4ea03146fd7250355b8335b0e904168</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>AirlinePreferenceId_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a078952f8c879eb6288f1b6099454ca81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Percentage_T, Percentage_T &gt;</type>
      <name>CancellationNoShowRatePair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa96bc57c3c4e883e01d5be16b55986fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CharacteristicsPatternId_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a04f304cc675ec1f8b923276d909bcbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CharacteristicsIndex_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6842b8ce18e8522e0368cbd629c1dae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>WTP_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a17d2c82c69a07adacf6cb8af20868a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::tuples::tuple&lt; double, WTP_T &gt;</type>
      <name>CharacteristicsWTP_tuple_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a71768d148fa4770424103cb7d2555a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; WTP_T, MeanStdDevPair_T &gt;</type>
      <name>WTPDemandPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a37773dac4c9c93592d2d1029be1d8071</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NbOfRequests_T</type>
      <name>NbOfNoShows_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abb06b40a7644317314f00283e5bb24af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>MatchingIndicator_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad7b4cda9e924a0269784a9cb95c85bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DemandStreamKeyStr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a90cee6070c2d9b17bc1c4cf1f211af14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>ChannelLabel_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3a2502a9ba99e5bfd61fd5a2aa9e6de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>FrequentFlyer_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a77e7582d7cd3bdb95c08e1011dd25359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>RequestStatus_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3ec503be2fc504e4e16f27635382f395</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Identity_T, Identity_T &gt;</type>
      <name>BookingTSIDMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a58ead137eb196b0050efcb20e64b38fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; CabinCode_T, ClassCode_T &gt;</type>
      <name>CabinClassPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a33716c7d1329113b462f6f2722c501c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; CabinClassPair_T &gt;</type>
      <name>CabinClassPairList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9dccfd1fab140d3d8202b352574ad06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ProportionFactor_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afe8f60121c7e067b184fb29df3d3335d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ProportionFactor_T &gt;</type>
      <name>ProportionFactorList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a182792417b05735c47c7a34da2f32d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>OnDString_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a89ce8c389c63742d2a8f9dddebfba464</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; OnDString_T &gt;</type>
      <name>OnDStringList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a856a099c44b6c21b4497f928d04f59e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdair_event_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00533</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::string</type>
      <name>EventName_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a24c84f29a52ea7f8b5f73b7fe66dc847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfEvents_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad6b2d9ac6bf704d333688c80cff656be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>EventGeneratorKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a66631d797512e182c89681d4c29c68b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdair_exceptions.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00534</filename>
    <class kind="class">stdair::RootException</class>
    <class kind="class">stdair::FileNotFoundException</class>
    <class kind="class">stdair::NonInitialisedLogServiceException</class>
    <class kind="class">stdair::NonInitialisedServiceException</class>
    <class kind="class">stdair::NonInitialisedContainerException</class>
    <class kind="class">stdair::NonInitialisedRelationShipException</class>
    <class kind="class">stdair::MemoryAllocationException</class>
    <class kind="class">stdair::ObjectLinkingException</class>
    <class kind="class">stdair::DocumentNotFoundException</class>
    <class kind="class">stdair::ParserException</class>
    <class kind="class">stdair::SerialisationException</class>
    <class kind="class">stdair::KeyNotFoundException</class>
    <class kind="class">stdair::CodeConversionException</class>
    <class kind="class">stdair::CodeDuplicationException</class>
    <class kind="class">stdair::KeyDuplicationException</class>
    <class kind="class">stdair::ObjectCreationgDuplicationException</class>
    <class kind="class">stdair::ObjectNotFoundException</class>
    <class kind="class">stdair::ParsingFileFailedException</class>
    <class kind="class">stdair::SQLDatabaseException</class>
    <class kind="class">stdair::NonInitialisedDBSessionManagerException</class>
    <class kind="class">stdair::SQLDatabaseConnectionImpossibleException</class>
    <class kind="class">stdair::EventException</class>
    <class kind="class">stdair::SimpleNestingStructException</class>
    <class kind="class">stdair::BookingClassListEmptyInNestingStructException</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>stdair_fare_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00535</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfFareRules_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2bbe1ce014ce39835ffbef70a57323cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdair_file.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00536</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <class kind="class">stdair::RootFilePath</class>
    <class kind="class">stdair::InputFilePath</class>
    <class kind="class">stdair::ScheduleFilePath</class>
    <class kind="class">stdair::ODFilePath</class>
    <class kind="class">stdair::FRAT5FilePath</class>
    <class kind="class">stdair::FFDisutilityFilePath</class>
    <class kind="class">stdair::ConfigINIFile</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>stdair_inventory_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00537</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::string</type>
      <name>NetworkID_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a329aef2f972a1a6b877e68dd39dfb45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; AirlineCode_T &gt;</type>
      <name>AirlineCodeList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>add4270789c27c30c5e0790dc75975bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ClassList_String_T &gt;</type>
      <name>ClassList_StringList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a69c4d11d732cf09e256e34c0b94db5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ClassCode_T &gt;</type>
      <name>ClassCodeList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a10bdcb460aab76cd895ea7f6b1cc4ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>SubclassCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a05539487afe6043bb67b0615e2856f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>FlightPathCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7fb9d24c1a9f3cfe89e39ffa8fb1227f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; CabinCode_T, ClassList_String_T &gt;</type>
      <name>CabinBookingClassMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a60e2bb63cedd3c4fb7eb0f5d702d368f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CurveKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adda6ea693b732214d2df929ecc56bec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>CabinCapacity_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2dd15bf37056ace1becadd061d66c07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfFlightDates_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0d89da689bffd9788a235446d5161c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>CommittedSpace_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac1b3fcabadc2e8f4b22284e932229880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>UPR_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa5cc3550f745b833c72ffae6b1039167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>BookingLimit_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a644b8a574f2bd64b0a0f2dee7331a700</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>AuthorizationLevel_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a937aa3e31f289f98c05e29035e9f0672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>CapacityAdjustment_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a98519dc2fe3a1bd54c15f085003b2457</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>BlockSpace_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad43de8572007cb72b3175e684c2c1db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>AvailabilityStatus_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8a7ba0c63ccd5843603a1716f2aa7552</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Availability_T &gt;</type>
      <name>BucketAvailabilities_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3d5abcd1509de1baeea5708600672115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfYields_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2adabf98119ad71c04a245925eb6934e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfInventoryControlRules_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a88a962f2f6c0c2a471b37f4bbeb8715e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>CensorshipFlag_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acb0e6114614d7ad9938e5d51374148b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>DTD_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3803f0eb780fa19f7a2be3dc34d1993e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>DCP_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7b2bfea0300dbfcdafe5e750777597b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; DCP_T &gt;</type>
      <name>DCPList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae7b7a2c903179a252462ef1643e4542e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; DTD_T, RealNumber_T &gt;</type>
      <name>DTDFratMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a61e8b74e6455e2dc8aba3db599371cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; FloatDuration_T, float &gt;</type>
      <name>DTDProbMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adbc9d3be0f7f0d93d07db20c7c6941e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CensorshipFlag_T &gt;</type>
      <name>CensorshipFlagList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a66e241c9a10521c83ed12afefe295c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>BookingRatio_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae43055cffaf2f44e2c452aaa9eee26f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Yield_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a941af3a267bc922f2dd2c1910c629347</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>YieldLevel_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac38e691f6716c16f38cd0ebf73ef906b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; YieldLevel_T, MeanStdDevPair_T &gt;</type>
      <name>YieldLevelDemandMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1b16b1e0c01c8fd02c6347550294869d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Yield_T, MeanStdDevPair_T &gt;</type>
      <name>YieldDemandPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afb4f549c18e4421413e374cd31160451</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>BidPrice_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1583a1546eacb3362340aa4cd83a0428</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; BidPrice_T &gt;</type>
      <name>BidPriceVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af27a097c480c0fe3f180f94aa849332b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>SeatIndex_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a67a1e74e305a27f44c1c0de5c6a4bf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>ControlMode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1e5282fddf0f83f7e48af6410647f951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>OverbookingRate_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8fa5d5fec4a18be2646baad214fa73fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ProtectionLevel_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ade9a4ed4074bafb157fe3a2178e6c743</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>EmsrValueList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeddf830276041c4717cf6fba04901f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>BookingLimitVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a434f4cbff6ed8afa7a645eb8b8aab50c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>ProtectionLevelVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0fc8b6055766923dbe770222fb08343b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::multi_array&lt; double, 2 &gt;</type>
      <name>SnapshotBlock_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abc047297bafc81066189464ef9c36ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SnapshotBlock_T::index_range</type>
      <name>SnapshotBlockRange_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae91acd217b23920f3ea2d85f6abc24ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SnapshotBlock_T::array_view&lt; 1 &gt;::type</type>
      <name>SegmentCabinDTDSnapshotView_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7d8b70fc090e73fca5ddca6945cc758f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SnapshotBlock_T::array_view&lt; 2 &gt;::type</type>
      <name>SegmentCabinDTDRangeSnapshotView_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaff1abb2c962c3a7bc6c999e6883bc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SnapshotBlock_T::const_array_view&lt; 1 &gt;::type</type>
      <name>ConstSegmentCabinDTDSnapshotView_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8f2f5969ed322013db90d087b3305678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SnapshotBlock_T::const_array_view&lt; 2 &gt;::type</type>
      <name>ConstSegmentCabinDTDRangeSnapshotView_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a01745cd7f9c3d85e27dd09f53cc74465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>SegmentDataID_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2c217e10cfed4185080cad4f060ae756</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>LegDataID_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9279b26c2e715192cc1432fc27d9896f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ClassIndex_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab7a6dd51e6046c54d640a42bfd2c023b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdair_json.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00538</filename>
    <class kind="class">stdair::JSONString</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>stdair_log.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00539</filename>
    <namespace>stdair</namespace>
    <namespace>stdair::LOG</namespace>
    <member kind="enumeration">
      <type></type>
      <name>EN_LogLevel</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a0e942800c20ab8c1dc913408f555112d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>_logLevels</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>ab15e937386bb6bc190838e738083f1fc</anchor>
      <arglist>[LAST_VALUE]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdair_maths_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00540</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>ReplicationNumber_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad7631988657d35fb876a5fd02a664cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>ExponentialSeed_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afdc0677a827ab1cc3bc6fdaa949b006e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>UniformSeed_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac24ad69ea5e9289c890547fb41a767e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>RandomSeed_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a28f4ca572c351c2d9cd763fe292120d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::minstd_rand</type>
      <name>BaseGenerator_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae032e6a18e6d41a54b6094443d5e70ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uniform_real</type>
      <name>UniformDistribution_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a86a88a1fdd470578e4699041a6340353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variate_generator&lt; BaseGenerator_T &amp;, UniformDistribution_T &gt;</type>
      <name>UniformGenerator_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a164c497820aba553d0749df0ca8fc4e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::normal_distribution</type>
      <name>NormalDistribution_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4af596b2d9c9f038721408fcea29a150</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variate_generator&lt; BaseGenerator_T &amp;, NormalDistribution_T &gt;</type>
      <name>NormalGenerator_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adeb72b19f0756d82b931021b4e3ee2fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::exponential_distribution</type>
      <name>ExponentialDistribution_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af21463523241138b8a4d52932ef99ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variate_generator&lt; BaseGenerator_T &amp;, ExponentialDistribution_T &gt;</type>
      <name>ExponentialGenerator_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8bd56626dfcf3aa923facd2e280507f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>MeanValue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a761f03cfa1f92b22572b88650b3dc8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>StdDevValue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a399beabb7114698e10b44e8dd4d675f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MeanValue_T, StdDevValue_T &gt;</type>
      <name>MeanStdDevPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2d11d25d3d03504ff4a4542381744fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; MeanStdDevPair_T &gt;</type>
      <name>MeanStdDevPairVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8b604fc4a6a53961b5826534f810adae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Probability_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2ec4f7e0b2490de52864f5dde1223ed8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdair_rm_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00541</filename>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>std::string</type>
      <name>ForecasterMode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9afef0c4f3c829663e134612750b6d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>HistoricalDataLimit_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a794c138f2d96fb0c5d47fb8d1bd874bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>OptimizerMode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a39105836919c65a2a44e37290d91d9e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NbOfBookings_T</type>
      <name>PolicyDemand_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acc91747447ed1e8c4bac17dea1f595fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>GeneratedDemandVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae4eeb43f719814a21cb0f81327c57e64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; GeneratedDemandVector_T &gt;</type>
      <name>GeneratedDemandVectorHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa2521ee0a45eb529cd29e3ea3422abe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>SellupProbability_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a15196adc93f0b8ca44f7bf31dc9f0569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NbOfRequests_T &gt;</type>
      <name>UncDemVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa793b6077131fe489b32a9e841c1427a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NbOfBookings_T &gt;</type>
      <name>BookingVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acb5e59e757a8681dc20e4dcd8193a03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>FRAT5_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aba34421003a47345228243335246cc16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const DTD_T, FRAT5_T &gt;</type>
      <name>FRAT5Curve_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a701dac3e3c3e99cb895f1f2345b4a298</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const DTD_T, double &gt;</type>
      <name>FFDisutilityCurve_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abc4b39a98a573fd94083a33fad35ca79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const DTD_T, double &gt;</type>
      <name>SellUpCurve_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8dea7265bdd95f6c0f5c5ecfdbde0beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const DTD_T, double &gt;</type>
      <name>DispatchingCurve_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6526fe10511e692991e087ba8893add6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; BookingClass *, SellUpCurve_T &gt;</type>
      <name>BookingClassSellUpCurveMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>add561eb02c001b33edd2983c0b06794f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; BookingClass *, DispatchingCurve_T &gt;</type>
      <name>BookingClassDispatchingCurveMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a64a27422c135fe794149c1bf5c91fc1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const Yield_T, double &gt;</type>
      <name>YieldDemandMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af29d2c1436c1c424f4eae4910734aeaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>NbOfSamples_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a67f3361d613b3964f73229e25e7dd119</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STDAIR_Service.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00542</filename>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00543" name="stdair_service_types.hpp" local="no" imported="no">stdair/stdair_service_types.hpp</includes>
    <includes id="a00536" name="stdair_file.hpp" local="no" imported="no">stdair/stdair_file.hpp</includes>
    <includes id="a00255" name="BasLogParams.hpp" local="no" imported="no">stdair/basic/BasLogParams.hpp</includes>
    <includes id="a00251" name="BasDBParams.hpp" local="no" imported="no">stdair/basic/BasDBParams.hpp</includes>
    <includes id="a00291" name="ServiceInitialisationType.hpp" local="no" imported="no">stdair/basic/ServiceInitialisationType.hpp</includes>
    <includes id="a00480" name="TravelSolutionTypes.hpp" local="no" imported="no">stdair/bom/TravelSolutionTypes.hpp</includes>
    <includes id="a00359" name="ConfigHolderStruct.hpp" local="no" imported="no">stdair/bom/ConfigHolderStruct.hpp</includes>
    <includes id="a00528" name="STDAIR_ServiceContext.hpp" local="no" imported="no">stdair/service/STDAIR_ServiceContext.hpp</includes>
    <class kind="class">stdair::STDAIR_Service</class>
    <namespace>stdair</namespace>
  </compound>
  <compound kind="file">
    <name>stdair_service_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00543</filename>
    <namespace>stdair</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; STDAIR_Service &gt;</type>
      <name>STDAIR_ServicePtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a288fd7fc4006868dee11013657cc843d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdair_types.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/</path>
    <filename>a00544</filename>
    <includes id="a00534" name="stdair_exceptions.hpp" local="no" imported="no">stdair/stdair_exceptions.hpp</includes>
    <includes id="a00539" name="stdair_log.hpp" local="no" imported="no">stdair/stdair_log.hpp</includes>
    <includes id="a00531" name="stdair_db.hpp" local="no" imported="no">stdair/stdair_db.hpp</includes>
    <includes id="a00529" name="stdair_basic_types.hpp" local="no" imported="no">stdair/stdair_basic_types.hpp</includes>
    <includes id="a00532" name="stdair_demand_types.hpp" local="no" imported="no">stdair/stdair_demand_types.hpp</includes>
    <includes id="a00540" name="stdair_maths_types.hpp" local="no" imported="no">stdair/stdair_maths_types.hpp</includes>
    <includes id="a00535" name="stdair_fare_types.hpp" local="no" imported="no">stdair/stdair_fare_types.hpp</includes>
    <includes id="a00537" name="stdair_inventory_types.hpp" local="no" imported="no">stdair/stdair_inventory_types.hpp</includes>
    <includes id="a00541" name="stdair_rm_types.hpp" local="no" imported="no">stdair/stdair_rm_types.hpp</includes>
    <includes id="a00530" name="stdair_date_time_types.hpp" local="no" imported="no">stdair/stdair_date_time_types.hpp</includes>
    <includes id="a00543" name="stdair_service_types.hpp" local="no" imported="no">stdair/stdair_service_types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>readline_autocomp.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/ui/cmdline/</path>
    <filename>a00545</filename>
    <class kind="struct">COMMAND</class>
    <member kind="typedef">
      <type>int(*</type>
      <name>pt2Func</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a76090cf60018264cb717e6761a53077d</anchor>
      <arglist>)(char *)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getwd</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a80ac0d1f43ea1efa9df53269d995704d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>xmalloc</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a44ac83d6ef82a3b8c7dd44383b0669bd</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>com_list</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a7bec9f62fb765897634590f83b38c48b</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>com_view</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a899f7415818f36844b674008bdc73362</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>com_rename</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a8a362ea31826fa32ad8273fc69d2a617</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>com_stat</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ad4966ac3a5e26c4b5b9f4972defc0c92</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>com_pwd</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a20f7ce22278c14c84ec569f8d611897c</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>com_delete</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>af2fce80be5865e82a99af2b520da7c55</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>com_help</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a57afede554043271250fa336bd784bac</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>com_cd</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a8cfcb1f8caeb82e00134d3912202c1be</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>com_quit</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a0527d8c085bcfa4c3396b7eaffa610b0</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>stripwhite</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a28d6d217d5c68ec45d5cc08bf9cd00dc</anchor>
      <arglist>(char *iString)</arglist>
    </member>
    <member kind="function">
      <type>COMMAND *</type>
      <name>find_command</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ad4f1c32d8f7883ba2caa68862f7a3cb9</anchor>
      <arglist>(char *iString)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>dupstr</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a4ccd43b75c8635f941a74b57876ef0fb</anchor>
      <arglist>(char *iString)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>execute_line</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a683d67784f898e6d892d1106f2cdef5c</anchor>
      <arglist>(char *line)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>command_generator</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a647cf5dc156c39765d0df6358fb9e8cc</anchor>
      <arglist>(char *text, int state)</arglist>
    </member>
    <member kind="function">
      <type>char **</type>
      <name>fileman_completion</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>afe037fa443442d866d9515420c9578e1</anchor>
      <arglist>(char *text, int start, int end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_readline</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a4a84b36bf2499d6633a1371ba6d06c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>too_dangerous</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a58c470c429f2dd995fb75252b1077d8c</anchor>
      <arglist>(char *caller)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>valid_argument</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a1d666cd51e401ee13bebb8ab2e368fc3</anchor>
      <arglist>(char *caller, char *arg)</arglist>
    </member>
    <member kind="variable">
      <type>COMMAND</type>
      <name>commands</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a65fdb89db8a30e859113a3f232aa6980</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>done</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a5992b274cfdcacdbc1fa8347fd01ebde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char</type>
      <name>syscom</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a15ab56f94b90f779b916e341c4c59119</anchor>
      <arglist>[1024]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SReadline.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/stdair/ui/cmdline/</path>
    <filename>a00546</filename>
    <class kind="class">swift::SKeymap</class>
    <class kind="class">swift::SReadline</class>
    <namespace>swift</namespace>
  </compound>
  <compound kind="file">
    <name>MPBomRoot.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/test/stdair/</path>
    <filename>a00547</filename>
  </compound>
  <compound kind="file">
    <name>MPBomRoot.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/test/stdair/</path>
    <filename>a00548</filename>
  </compound>
  <compound kind="file">
    <name>MPInventory.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/test/stdair/</path>
    <filename>a00549</filename>
  </compound>
  <compound kind="file">
    <name>MPInventory.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/test/stdair/</path>
    <filename>a00550</filename>
  </compound>
  <compound kind="file">
    <name>StandardAirlineITTestSuite.cpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/test/stdair/</path>
    <filename>a00551</filename>
  </compound>
  <compound kind="file">
    <name>StdairTestLib.hpp</name>
    <path>/home/build/dev/sim/stdair/stdairgit/test/stdair/</path>
    <filename>a00552</filename>
    <class kind="struct">stdair_test::BookingClass</class>
    <class kind="struct">stdair_test::Cabin</class>
    <namespace>stdair_test</namespace>
  </compound>
  <compound kind="class">
    <name>stdair::AirlineClassList</name>
    <filename>a00051.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>AirlineClassListKey</type>
      <name>Key_T</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a4dbf81b4684d22526399f369d1803bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ada29d06c7059f849d01706d6fa18cb6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a81916d7615310c264ddb8638943b20af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirlineCodeList_T &amp;</type>
      <name>getAirlineCodeList</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a852de5abb79015588c919e2cd47db8d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClassList_StringList_T &amp;</type>
      <name>getClassCodeList</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a3ac3ebe428f0b30e4d05587898900205</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ada32b6c8535fc151bde6443b81352a62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const stdair::Yield_T &amp;</type>
      <name>getYield</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a8e47e33321a542a1c6e7ecc42a7086c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const stdair::Fare_T &amp;</type>
      <name>getFare</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a1721030a46576affee32da02584ae1d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYield</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a5445c16cbfd0cd165cf76090a9f6a089</anchor>
      <arglist>(const Yield_T &amp;iYield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFare</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a6c3feb3c7c7cc4e07ef754835f831d4a</anchor>
      <arglist>(const Fare_T &amp;iFare)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>adc33f45ea8a5ca8569520a93339ced3f</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ae13279210324bdb13585077f60d48b2d</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a63436ba8b8a64ddfd3866271f4d90d03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a44f27b853b144db7206d523cdf16385b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a5767bafab419f07003e6772fd567de4a</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AirlineClassList</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a3f006cf551a06802b766e2daa77307f0</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~AirlineClassList</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a2ff8a2f9a91425b02ec3ae59975c708b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aba758beca4974b89c79fd7a1a45eae96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a5f661ee298983217b023450b707946cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a3d2487a1090c6fa103299c3adcd1bd58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Yield_T</type>
      <name>_yield</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a46f980659b0661b236b0b2494b575815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Fare_T</type>
      <name>_fare</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a749e04a7779097d1c3329669be2f8c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::AirlineClassListKey</name>
    <filename>a00052.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>AirlineClassListKey</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a4ec659cd5b6303b2c79fc015ed3f8c26</anchor>
      <arglist>(const AirlineCodeList_T &amp;, const ClassList_StringList_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirlineClassListKey</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a6b7ace4da20f90042dd3559b950cee95</anchor>
      <arglist>(const AirlineClassListKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AirlineClassListKey</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aadf7fb72297795dd163894f72f477faf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AirlineCodeList_T &amp;</type>
      <name>getAirlineCodeList</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a70512ca72db803dc281f2ec2ecdeea12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClassList_StringList_T &amp;</type>
      <name>getClassCodeList</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a1cd9a5fe97ac6ea1331d684b40901582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aff2955016ea3895f7cab615808617c3f</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a0679fc71df758d87fc4afa0573d99ab2</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a2143732a51bacc5cabe03b2f38007142</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a80e36d44cb6897991284a0f8e8c854cd</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::AirlineFeature</name>
    <filename>a00053.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>AirlineFeatureKey</type>
      <name>Key_T</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab039117dd43e24babff422da22012048</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>acb6c8bec5fc49effc69559c398e7d656</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a8c421ba8f7769706dbb432a9fe2d9d4c</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad7f7a7600cbd66da70db6d6a7b3cc16b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad6d6f7b31238a7292dc86a64703d7d14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a8d41e907e37ccad3c8ed8fe2955770a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aea12f96e498a52afb8c359203821c9d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a62447222d1034fa367a2b9388ef4e399</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ForecastingMethod::EN_ForecastingMethod</type>
      <name>getForecastingMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a2d1711ab5440515f36221734e28aac71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnconstrainingMethod::EN_UnconstrainingMethod</type>
      <name>getUnconstrainingMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a87e408369ec0b9f95ed8237450d84a06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PartnershipTechnique::EN_PartnershipTechnique</type>
      <name>getPartnershipTechnique</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a52c4a1bdbcf2138d92d99cf4098a5835</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PreOptimisationMethod::EN_PreOptimisationMethod</type>
      <name>getPreOptimisationMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a67782083b9052a84af89f2765895194f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OptimisationMethod::EN_OptimisationMethod</type>
      <name>getOptimisationMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>afc3cd3a25eff53179ca2cced795a1b1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a411102a73f072265453b5d104233eee2</anchor>
      <arglist>(const ForecastingMethod &amp;, const UnconstrainingMethod &amp;, const PreOptimisationMethod &amp;, const OptimisationMethod &amp;, const HistoricalDataLimit_T &amp;, const ControlMode_T &amp;, const PartnershipTechnique &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForecastingMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a18b96c40e637f117c49776cd500486af</anchor>
      <arglist>(const ForecastingMethod &amp;iForecastingMethod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnconstrainingMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>adf6def1a4507304348f7ca18459ba0ac</anchor>
      <arglist>(const UnconstrainingMethod &amp;iUnconstrainingMethod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPartnershipTechnique</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a9e763668eb51bb688f676153489fe6f2</anchor>
      <arglist>(const PartnershipTechnique &amp;iPartnershipTechnique)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreOptimisationMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab5b8a5e1c07d7a7c575a0a8bd4bb7ca4</anchor>
      <arglist>(const PreOptimisationMethod &amp;iPreOptimisationMethod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimisationMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a3a51487d692a7f70420d28d058bf5848</anchor>
      <arglist>(const OptimisationMethod &amp;iOptimisationMethod)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AirlineFeature</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ae6ae2e0ca034538b0e2c71bf71f2ba2e</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~AirlineFeature</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a1d15be1118069b37a8d1e7b078f4674d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a191050671e463e4be327dbfe70d0782f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a5db094f6b451dabe159a201058723fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a25b12aeb77cf82eb35aacedd1d18ffa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ForecastingMethod</type>
      <name>_forecastingMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>add7e387d04ef67d95781e65f6bfabb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HistoricalDataLimit_T</type>
      <name>_historicalDataLimit</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aca92b1853cf9f55c3343852cc093616c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlMode_T</type>
      <name>_controlMode</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad93e8c7cf6198d48bdb16430b3978eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnconstrainingMethod</type>
      <name>_unconstrainingMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a197b33491de9f1656283bc080e1e1d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PreOptimisationMethod</type>
      <name>_preOptimisationMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a4f7121d98a709d2a9124bf5cce8f5cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OptimisationMethod</type>
      <name>_optimisationMethod</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a23f51100f9a32d48c309c3d8a3609a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PartnershipTechnique</type>
      <name>_partnershipTechnique</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6a88bc46f9fbad220d5fd0015205cef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::AirlineFeatureKey</name>
    <filename>a00054.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>AirlineFeatureKey</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a877b1a548f7f563d9b15a222214ecd69</anchor>
      <arglist>(const AirlineCode_T &amp;iAirlineCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AirlineFeatureKey</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a09b186bbab92628ae8f4657adb01c08a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a2f34145fbe423e5a62686312bcadb003</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ab31ae82ad72fcf894065acd8e2a8a562</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a26c4ed93efef9da50585517301cd5ce9</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>afe9c3bed249edf8d03549f305d011a7c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::AirlineStruct</name>
    <filename>a00055.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a51979824d380648aff488097ea12e29c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getAirlineName</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a5f13968fb97e237b5a95e5b3ce347ac6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAirlineCode</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ac6c6584ee90c2023a780cdb4c19d522f</anchor>
      <arglist>(const AirlineCode_T &amp;iAirlineCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAirlineName</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a7cc55278e4c3f54f7daedfa06c1c82e1</anchor>
      <arglist>(const std::string &amp;iAirlineName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a9d487cab4a9e32aee75e6a7fd3f6eaa8</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a25039be36fb87b85e94942a540a199ce</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a34ae64474a1a721c72c945994561063a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirlineStruct</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a6b970351a082a80d2a45528f608b2f0a</anchor>
      <arglist>(const AirlineCode_T &amp;, const std::string &amp;iAirlineName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirlineStruct</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a679d76f6370f92a9c51e5f5f6b14ec06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirlineStruct</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a08fa54d6c9a1a477847f8acc2be44ec6</anchor>
      <arglist>(const AirlineStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AirlineStruct</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a10565102772302d375a631dc553ae913</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::AirportPair</name>
    <filename>a00056.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>AirportPairKey</type>
      <name>Key_T</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ad83da099b947f72f475466426d692863</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a2ee83e95327d7ff1ceef45b45bd03cb3</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>af7ac7224ed0c93e4599aeb356b7ea14b</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a88d807cdc539ed52ff22f487fca8ee79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>acb2dc4daa91a45e38e4aed707a24524f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a2155a292c8b780560039e709d074a551</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getBoardingPoint</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a429a1c920be2c9d6544b901444c59969</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getOffPoint</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a8be753ce0888b0ceaa4cca861e7862ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>adec2a65e4096a2ea0641c9df83e0415b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a7cf605430103c3d5481cf610acbf4686</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AirportPair</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a2b31443d389bdddf4b1a3b10a24c8384</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~AirportPair</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a9f2c129573009b00bb99defb23e4d64a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a833c1c6ffb412ff6c41ed3870f495ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a068fd8815b2838761541d4cf9c507040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a9b5bb9bf0feb3e9f2f66a7e0d04f20b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::AirportPairKey</name>
    <filename>a00057.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>AirportPairKey</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a878afe0324fa15bc13a041f14768f71b</anchor>
      <arglist>(const stdair::AirportCode_T &amp;, const stdair::AirportCode_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirportPairKey</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ab89c650d184d2e33fa8e7cfa1a2282c8</anchor>
      <arglist>(const AirportPairKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AirportPairKey</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a6dd147f20cd4b5adbaf603dd1d14f983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const stdair::AirportCode_T &amp;</type>
      <name>getBoardingPoint</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a74502238ae6152cedb22d72e55f828fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const stdair::AirportCode_T &amp;</type>
      <name>getOffPoint</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ac21179612b26b7bf2d1a270d0fd9721b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a1346e739744bf3565272d79c0096d356</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aa0d2f5c0391319d0250eb4cf0f8342eb</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a64b05c70a1311d2dad13a744977bc964</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BasChronometer</name>
    <filename>a00058.html</filename>
    <member kind="function">
      <type></type>
      <name>BasChronometer</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>affa09ee80ffc62733b1ca469ef10c589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ad54ed3f144820fad48dc134c6d224ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getStart</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ac8f1b859b45c886f8206531e77a29695</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a5901833b656f50b5a95c264664e81ded</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BasDBParams</name>
    <filename>a00059.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getUser</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ac2810934d371b6427f78f0b0eb17239b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPassword</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>adf7c80ca9b47ae4a8fe187c64a4817b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getHost</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a44109859fa2f8d1bd800677c3f2e5cc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPort</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a5385f4de20db01a13eb44a5400c52bca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getDBName</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a7caa0401665f54388f4d1a1bc2143abb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUser</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a828c9bb93d76bf3a1389569cf7fbbe86</anchor>
      <arglist>(const std::string &amp;iUser)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPassword</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>adf7ba33f1047f40a41f27a22e38faef3</anchor>
      <arglist>(const std::string &amp;iPasswd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHost</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ac3023c0f74cf04834ef8df21eca5f869</anchor>
      <arglist>(const std::string &amp;iHost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPort</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a2e84ec71621a2059c0d254dc662070c8</anchor>
      <arglist>(const std::string &amp;iPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDBName</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a2f5eaa97f3f864869387d57998451cde</anchor>
      <arglist>(const std::string &amp;iDBName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a195aa7f9e572b12f576cd80199b4ac94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a12d4bd4e335c5fcc87ec1b6f8e1418e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toShortString</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a4cfd7f20414af07563edcc242d421699</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a548c89f5f841042b04ab624cf34bc09b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasDBParams</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a1f3f3361b25a77c1abdccd777d9aef35</anchor>
      <arglist>(const std::string &amp;iDBUser, const std::string &amp;iDBPasswd, const std::string &amp;iDBHost, const std::string &amp;iDBPort, const std::string &amp;iDBName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasDBParams</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ad973c5e542cc14f17d677a88df47bd60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasDBParams</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ae8d1bacb74e2bfbcb33a1f210849faa4</anchor>
      <arglist>(const BasDBParams &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BasDBParams</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a2bd572b2b523e86f48f07221e56f1e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BasFileMgr</name>
    <filename>a00060.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>doesExistAndIsReadable</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a5997add535a9f2a14a409f429f897bb8</anchor>
      <arglist>(const std::string &amp;iFilepath)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BasLogParams</name>
    <filename>a00061.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const LOG::EN_LogLevel &amp;</type>
      <name>getLogLevel</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aa1f0b6adb53859b236b3554557877c20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>getLogStream</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>afb03e04dd192cbb911bf5e9c3fc3a943</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const bool</type>
      <name>getForcedInitialisationFlag</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ac263a33afd1ef310d7b1c46b896183c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForcedInitialisationFlag</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>adaa7b1d8e3a8bd103e18120ae9cd268a</anchor>
      <arglist>(const bool iForceMultipleInstance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a8b90a4b2a6e83f84dd2b107918983842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a036fe5355b79e0e4104d402050e4c6ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toShortString</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aad8d0995d04b6ba413f99b07db7748d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a6c0e35566e9c52f0f02b6b678e7d7afa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasLogParams</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>af2532af7b76fd83948b9acb437dbae84</anchor>
      <arglist>(const LOG::EN_LogLevel iLogLevel, std::ostream &amp;ioLogOutputStream, const bool iForceMultipleInstance=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasLogParams</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a165925a5a4ac0d4137b9607098c6fa93</anchor>
      <arglist>(const BasLogParams &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BasLogParams</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad32a057f969a0077ff196f2371ce4a90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Logger</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aff02b76416d2846736b7ecd798921a0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomAbstract</name>
    <filename>a00062.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>toStream</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aeb067e16f81b4ad77699f68eea93fbbb</anchor>
      <arglist>(std::ostream &amp;ioOut) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a3566c1516414b91e2448c98c076b88cd</anchor>
      <arglist>(std::istream &amp;ioIn)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a46ae2e7fa3231d7caa1eedce7b7e5bb0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BomAbstract</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a503451b4aad9701a48526db1477ab9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BomAbstract</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a4f79c2f172ed4cb993e1f3fbe0c6d2e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BomAbstract</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a6cf49586728509fb4b2dbd499a5925d9</anchor>
      <arglist>(const BomAbstract &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomArchive</name>
    <filename>a00063.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>archive</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae12be19002e0cdb9c28ba291615558fd</anchor>
      <arglist>(const BomRoot &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>archive</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a0bbea832f21ab4c53e57f8f37b7fb7f0</anchor>
      <arglist>(const Inventory &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>restore</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a8a24ac919e22a6357d47ef7f052d3063</anchor>
      <arglist>(const std::string &amp;iArchive, Inventory &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>archive</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ad3f2868f6bdce0e9adb622718a71f72a</anchor>
      <arglist>(const FlightDate &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomDisplay</name>
    <filename>a00064.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>list</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a4194fad2dbf13e42dbe538247d2b69f6</anchor>
      <arglist>(std::ostream &amp;, const BomRoot &amp;, const AirlineCode_T &amp;iAirlineCode=&quot;all&quot;, const FlightNumber_T &amp;iFlightNumber=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>list</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a2b2efb5790990b6fbf320facfa0afe6e</anchor>
      <arglist>(std::ostream &amp;, const Inventory &amp;, const unsigned short iInventoryIndex=0, const FlightNumber_T &amp;iFlightNumber=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>listAirportPairDateRange</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a991993c31794ec255f866deed1860f43</anchor>
      <arglist>(std::ostream &amp;, const BomRoot &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>af662d1fb9dffc3f1c66171270f7df3b0</anchor>
      <arglist>(std::ostream &amp;, const BomRoot &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a9af8e7007e05a19fbd2fc70c4384b4ea</anchor>
      <arglist>(std::ostream &amp;, const Inventory &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a9ca48dd1a8432721746884903332d757</anchor>
      <arglist>(std::ostream &amp;, const OnDDate &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8bbc3e99eaef26d6cad2e62c3ce6c0f8</anchor>
      <arglist>(std::ostream &amp;, const FlightDate &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvLegDateDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a84e310c83325715692fbf400e1cfcf6f</anchor>
      <arglist>(std::ostream &amp;, const FlightDate &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvSegmentDateDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a3a0ab8374f37d594413468861fd55ca3</anchor>
      <arglist>(std::ostream &amp;, const FlightDate &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvLegCabinDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>accbe4206c58be110c0c42e02dfdef162</anchor>
      <arglist>(std::ostream &amp;, const FlightDate &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvSegmentCabinDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ad0c2a63f14f4d7be6293a4f043e65ef2</anchor>
      <arglist>(std::ostream &amp;, const FlightDate &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvFareFamilyDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a57043884e2b9656342b5875ebf51ea70</anchor>
      <arglist>(std::ostream &amp;, const FlightDate &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvBucketDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ae5415f5b4ba42e5d2fe933e04fe578e9</anchor>
      <arglist>(std::ostream &amp;, const FlightDate &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvBookingClassDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a3890724ab40d2a236f621e6ab2c0bb9e</anchor>
      <arglist>(std::ostream &amp;, const BookingClass &amp;, const std::string &amp;iLeadingString)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvBookingClassDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a38e2156aad1b0e5218e83e306ca57a98</anchor>
      <arglist>(std::ostream &amp;, const FlightDate &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>abe226f2abbe4165e72c659416298290c</anchor>
      <arglist>(std::ostream &amp;, const TravelSolutionList_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa9335ed1744f58d63e36baa62aa68542</anchor>
      <arglist>(std::ostream &amp;, const DatePeriodList_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvSimFQTAirRACDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ab7d14b57c1738395ad9ff76f30416c5f</anchor>
      <arglist>(std::ostream &amp;, const BomRoot &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvAirportPairDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>af651226360d8fd69fe84c45973d5688c</anchor>
      <arglist>(std::ostream &amp;, const AirportPair &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvDateDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a59a999a8e9587c812e7929cbcf725555</anchor>
      <arglist>(std::ostream &amp;, const DatePeriod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvPosChannelDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a7e07369290979e8eeea18b57d8e9b654</anchor>
      <arglist>(std::ostream &amp;, const PosChannel &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvTimeDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ad1a20d83105291961c412abef2957056</anchor>
      <arglist>(std::ostream &amp;, const TimePeriod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvFeatureListDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a9394603fd775789fdf00bd4369c13344</anchor>
      <arglist>(std::ostream &amp;oStream, const TimePeriod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvFeaturesDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a80e618f6c1cf075c0a4fd10bbb4dad95</anchor>
      <arglist>(std::ostream &amp;oStream, const FEATURE_TYPE &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>csvAirlineClassDisplay</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ad7fbed19a729fc1676584bbd7c6f2907</anchor>
      <arglist>(std::ostream &amp;, const AirlineClassList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomHolder</name>
    <filename>a00065.html</filename>
    <templarg>BOM</templarg>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>stdair::BomHolderKey</type>
      <name>Key_T</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a627fb790c64df1e86edfc38c429c5ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BOM * &gt;</type>
      <name>BomList_T</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aabc461db403584b1abce44af8ebcc26b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, BOM * &gt;</type>
      <name>BomMap_T</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a2b990f54781bf19301f91f9ee575c0ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a094e539430ba0d5c481858ada2f09c07</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a67de5ce91e98d5153c823f65db156242</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a51bc0d456ac8996b5b4191fbb001507a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a6eb1aa2957c65e49a98cb197d4aa92be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ae7245c061c04816278f3ca921452ea36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BomList_T</type>
      <name>_bomList</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>afb11b8739fc63e8a06f8d36b9cec9453</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BomMap_T</type>
      <name>_bomMap</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a4e72a2c959c17476360ae09001a7f340</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BomHolder</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ad3fb7490f072c1d0579b1d9bd1ddc864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BomHolder</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a8e20448f4660558d4a5607312840ad36</anchor>
      <arglist>(const BomHolder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BomHolder</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ad22d881672304fb4d1a3b9ac00210446</anchor>
      <arglist>(const Key_T &amp;iKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~BomHolder</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a38447a3125d6cfc27e06524a37126446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BomHolderKey</name>
    <filename>a00066.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>BomHolderKey</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a7e116e69daa220372d80b0d71321c807</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BomHolderKey</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a79babbb56e08ab2147d03a57d828bc13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ad4abcf0636539474689339cd6ecb9f2b</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a5301bf47862bee3ada4733bbbe24ec4f</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a18f7b01e379acfaad31909fc243a490e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a2dfd0427b758eb891caa3e8adfbb123f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BomID</name>
    <filename>a00067.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>BOM &amp;</type>
      <name>getObject</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a86bab3f60e564f72e593834e15d3dfeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BomID</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a1905aad3dbe15edfb62c8924c135a076</anchor>
      <arglist>(BOM &amp;iBOM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BomID</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aad07ca55d1efe6326cc8d2e09769abca</anchor>
      <arglist>(const BomID &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BomID</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a955ea124569178d8ddeec25f8fbd0eec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomINIImport</name>
    <filename>a00068.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>importINIConfig</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acdc92ba195a07451c828e26e9e6f3bf1</anchor>
      <arglist>(ConfigHolderStruct &amp;, const ConfigINIFile &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomJSONExport</name>
    <filename>a00069.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>jsonExportFlightDateList</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a310bfc5f38c716bd9f60686fe4cfd756</anchor>
      <arglist>(std::ostream &amp;, const BomRoot &amp;, const AirlineCode_T &amp;iAirlineCode=&quot;all&quot;, const FlightNumber_T &amp;iFlightNumber=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>jsonExportFlightDateObjects</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a0c9b0625fd48f4a0c5c85a46f6d623fa</anchor>
      <arglist>(std::ostream &amp;, const FlightDate &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>jsonExportBookingRequestObject</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a7dc8c7bd588accd9c4559807af6d5343</anchor>
      <arglist>(std::ostream &amp;, const EventStruct &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>jsonExportBreakPointObject</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a3c68becb551b0c1814bab4cdc681890e</anchor>
      <arglist>(std::ostream &amp;, const EventStruct &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomJSONImport</name>
    <filename>a00070.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>jsonImportCommand</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a1811d56209421732c31c0cf8991f4ce5</anchor>
      <arglist>(const JSONString &amp;, JSonCommand::EN_JSonCommand &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>jsonImportInventoryKey</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a007266529efefae63135e1973cf8291e</anchor>
      <arglist>(const JSONString &amp;, AirlineCode_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>jsonImportFlightDate</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a24b9906777848bee8a8172413cef49b1</anchor>
      <arglist>(const JSONString &amp;, Date_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>jsonImportFlightNumber</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ac84a7e0c56012e04a554baa5aa27b909</anchor>
      <arglist>(const JSONString &amp;, FlightNumber_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>jsonImportBreakPoints</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a55c53e66131907be2cfa6e291e970259</anchor>
      <arglist>(const JSONString &amp;, BreakPointList_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>jsonImportEventType</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a2a8b24a55269d53552663f05b0511e85</anchor>
      <arglist>(const JSONString &amp;, EventType::EN_EventType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>jsonImportConfig</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a2e79ce6875367461013944a01f3a5041</anchor>
      <arglist>(const JSONString &amp;, ConfigHolderStruct &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomKeyManager</name>
    <filename>a00071.html</filename>
    <member kind="function" static="yes">
      <type>static ParsedKey</type>
      <name>extractKeys</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ab654115fc8ce531433533fab75f9bf2c</anchor>
      <arglist>(const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InventoryKey</type>
      <name>extractInventoryKey</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a80e5a19855fb0f2dde4e269a493d19b6</anchor>
      <arglist>(const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlightDateKey</type>
      <name>extractFlightDateKey</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a42eb199e2e4151340b0b9f94c150d049</anchor>
      <arglist>(const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SegmentDateKey</type>
      <name>extractSegmentDateKey</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a4b5b9b83bda511d71fdcb9736a3ad22f</anchor>
      <arglist>(const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LegDateKey</type>
      <name>extractLegDateKey</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aba35583085656c502d3a2735cf77bc13</anchor>
      <arglist>(const std::string &amp;iFullKeyStr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomManager</name>
    <filename>a00072.html</filename>
    <member kind="function">
      <type>const BomHolder&lt; OBJECT2 &gt;::BomList_T &amp;</type>
      <name>getList</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a297e012689d48bffad1e4cba68772a9e</anchor>
      <arglist>(const OBJECT1 &amp;iObject1)</arglist>
    </member>
    <member kind="function">
      <type>const BomHolder&lt; OBJECT2 &gt;::BomMap_T &amp;</type>
      <name>getMap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ad1f77232d9ce1e72a32784f56fe99b1b</anchor>
      <arglist>(const OBJECT1 &amp;iObject1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasList</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a2b5e4d5b1046c9dd11ad2b7b5dd47043</anchor>
      <arglist>(const SegmentDate &amp;ioSegmentDate)</arglist>
    </member>
    <member kind="function">
      <type>const BomHolder&lt; SegmentDate &gt;::BomList_T &amp;</type>
      <name>getList</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a99b159b45d7a3c77c04179833a8539b8</anchor>
      <arglist>(const SegmentDate &amp;ioSegmentDate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a89c410bd5f22dfc3ae04869b079c52ee</anchor>
      <arglist>(const SegmentDate &amp;ioSegmentDate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasList</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aaafab69e2286327daaef28ffdb603aae</anchor>
      <arglist>(const Inventory &amp;ioInventory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8406004599f484d9f62522bffa318058</anchor>
      <arglist>(const Inventory &amp;ioInventory)</arglist>
    </member>
    <member kind="function">
      <type>AirlineFeature *</type>
      <name>getObjectPtr</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a9b86c74b0d7518544e66ababd694aaa1</anchor>
      <arglist>(const Inventory &amp;iInventory, const MapKey_T &amp;iKey)</arglist>
    </member>
    <member kind="function">
      <type>AirlineFeature &amp;</type>
      <name>getObject</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aaeda6a8479bb829a162b69763e9d996d</anchor>
      <arglist>(const Inventory &amp;iInventory, const MapKey_T &amp;iKey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BomHolder&lt; OBJECT2 &gt;::BomList_T &amp;</type>
      <name>getList</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a7281d98a7bfa10525dee585def81e2ff</anchor>
      <arglist>(const OBJECT1 &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BomHolder&lt; OBJECT2 &gt;::BomMap_T &amp;</type>
      <name>getMap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a4d5799cdc662792cc739eaf8f9937948</anchor>
      <arglist>(const OBJECT1 &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasList</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a429633365e3f89aaa300a0a1fd8680d2</anchor>
      <arglist>(const OBJECT1 &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasMap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a79e585846973924b2498e0b52706e158</anchor>
      <arglist>(const OBJECT1 &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PARENT *</type>
      <name>getParentPtr</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a6352eb327e80724be980b66999509726</anchor>
      <arglist>(const CHILD &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PARENT &amp;</type>
      <name>getParent</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ab988fdc79578c8403050ac632ac54ee3</anchor>
      <arglist>(const CHILD &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBJECT2 *</type>
      <name>getObjectPtr</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ad4e30f31d1b91633a76f70874855aa39</anchor>
      <arglist>(const OBJECT1 &amp;, const MapKey_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBJECT2 &amp;</type>
      <name>getObject</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5fed97afb95d8058c11cd39e4a7a29ae</anchor>
      <arglist>(const OBJECT1 &amp;, const MapKey_T &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomRetriever</name>
    <filename>a00073.html</filename>
    <member kind="function" static="yes">
      <type>static Inventory *</type>
      <name>retrieveInventoryFromLongKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a7e7ad1962e4961a518131c9df8cbb12f</anchor>
      <arglist>(const BomRoot &amp;, const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inventory *</type>
      <name>retrieveInventoryFromLongKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a1da815f5ddbe169aec0fe6b01a9d09ca</anchor>
      <arglist>(const Inventory &amp;, const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inventory *</type>
      <name>retrieveInventoryFromKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a98dc3a0c44604636b2845869ed996c95</anchor>
      <arglist>(const BomRoot &amp;, const InventoryKey &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inventory *</type>
      <name>retrieveInventoryFromKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ad31cdec2cb0598714d78322729830c15</anchor>
      <arglist>(const BomRoot &amp;, const AirlineCode_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AirlineFeature *</type>
      <name>retrieveAirlineFeatureFromKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>abb3b4d9282b2b7ab70f92cd7a24ce12d</anchor>
      <arglist>(const BomRoot &amp;, const AirlineCode_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlightDate *</type>
      <name>retrieveFlightDateFromLongKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a95748765e1da1f0e75314b19e6a8a40d</anchor>
      <arglist>(const BomRoot &amp;, const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlightDate *</type>
      <name>retrieveFlightDateFromKeySet</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>aa049696d9ad5e8301e9f6da1067a7a46</anchor>
      <arglist>(const BomRoot &amp;, const AirlineCode_T &amp;, const FlightNumber_T &amp;, const Date_T &amp;iFlightDateDate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlightDate *</type>
      <name>retrieveFlightDateFromLongKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a6b3fbed3ad7d9a089f399c9a3aa77986</anchor>
      <arglist>(const Inventory &amp;, const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlightDate *</type>
      <name>retrieveFlightDateFromKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a3b549b8c9de87d9cc4ebb0d8802722d7</anchor>
      <arglist>(const Inventory &amp;, const FlightDateKey &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlightDate *</type>
      <name>retrieveFlightDateFromKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a7b3000f559acbf95d0cfeb2d321e44e3</anchor>
      <arglist>(const Inventory &amp;, const FlightNumber_T &amp;, const Date_T &amp;iFlightDateDate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LegDate *</type>
      <name>retrieveOperatingLegDateFromLongKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a187876979eac3b264029f96fb058be91</anchor>
      <arglist>(const FlightDate &amp;, const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SegmentDate *</type>
      <name>retrievePartnerSegmentDateFromLongKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a3ce488910f33f30051c70b53ef52ba0a</anchor>
      <arglist>(const Inventory &amp;, const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SegmentDate *</type>
      <name>retrieveSegmentDateFromLongKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a9800f183c387587fa3f73ca5fb9a10d3</anchor>
      <arglist>(const BomRoot &amp;, const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SegmentDate *</type>
      <name>retrieveSegmentDateFromLongKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a2005f3d644dcd3442296daef6781b8a7</anchor>
      <arglist>(const Inventory &amp;, const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SegmentDate *</type>
      <name>retrieveSegmentDateFromLongKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a9f91d7cc72b758ecd3270621d71bd98d</anchor>
      <arglist>(const FlightDate &amp;, const std::string &amp;iFullKeyStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SegmentDate *</type>
      <name>retrieveSegmentDateFromKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a5d65eb785f063fe87060c56865bf645f</anchor>
      <arglist>(const FlightDate &amp;, const SegmentDateKey &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SegmentDate *</type>
      <name>retrieveSegmentDateFromKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a11ded3a3f0b01f07ce8a4b7f09601fba</anchor>
      <arglist>(const FlightDate &amp;, const AirportCode_T &amp;iOrigin, const AirportCode_T &amp;iDestination)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BookingClass *</type>
      <name>retrieveBookingClassFromLongKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a531d8826ebe62bb346dcce0409ad2654</anchor>
      <arglist>(const Inventory &amp;, const std::string &amp;iFullKeyStr, const ClassCode_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AirportPair *</type>
      <name>retrieveAirportPairFromKeySet</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ab4c5ea211e0c541aecc060a24c14915c</anchor>
      <arglist>(const BomRoot &amp;, const stdair::AirportCode_T &amp;, const stdair::AirportCode_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>retrieveDatePeriodListFromKey</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ac4fc75fab5725b89c0010e640d5c05c9</anchor>
      <arglist>(const AirportPair &amp;, const stdair::Date_T &amp;, stdair::DatePeriodList_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>retrieveDatePeriodListFromKeySet</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ab3bfd3e69864ca48510ef7f988c5019f</anchor>
      <arglist>(const BomRoot &amp;, const stdair::AirportCode_T &amp;, const stdair::AirportCode_T &amp;, const stdair::Date_T &amp;, stdair::DatePeriodList_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static stdair::LegCabin &amp;</type>
      <name>retrieveDummyLegCabin</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a3d7f321323378c6da864298e81d74ea5</anchor>
      <arglist>(stdair::BomRoot &amp;, const bool isForFareFamilies=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static stdair::SegmentCabin &amp;</type>
      <name>retrieveDummySegmentCabin</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>acbaa88f95c4f3332792e977cdabed35c</anchor>
      <arglist>(stdair::BomRoot &amp;, const bool isForFareFamilies=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>retrieveFullKeyFromSegmentDate</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ae3fae219001d6c0180eb084df3dba524</anchor>
      <arglist>(const SegmentDate &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BomRoot</name>
    <filename>a00074.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>BomRootKey</type>
      <name>Key_T</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a345856db6f9aa00421f997f911c1cca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ac1b6901ab89ba0a52194bcd5038cae9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a4117e056a2b40340c60d2dd42db494f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FRAT5Curve_T &amp;</type>
      <name>getFRAT5Curve</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>acb1eb92a3c18b75e3f09c67c63ee3704</anchor>
      <arglist>(const std::string &amp;iKey) const </arglist>
    </member>
    <member kind="function">
      <type>const FFDisutilityCurve_T &amp;</type>
      <name>getFFDisutilityCurve</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a142b71c4a315c34467742be0a2880009</anchor>
      <arglist>(const std::string &amp;iKey) const </arglist>
    </member>
    <member kind="function">
      <type>Inventory *</type>
      <name>getInventory</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a73c84237e4a7308bd009bc436d498a18</anchor>
      <arglist>(const std::string &amp;iInventoryKeyStr) const </arglist>
    </member>
    <member kind="function">
      <type>Inventory *</type>
      <name>getInventory</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a3f1c0ad181ded15f8d662c6b7f82bcde</anchor>
      <arglist>(const InventoryKey &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFRAT5Curve</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a825875f621e743149a863997af126fc6</anchor>
      <arglist>(const std::string &amp;iKey, const FRAT5Curve_T &amp;iCurve)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFFDisutilityCurve</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a41b739811632d071da830caef777d105</anchor>
      <arglist>(const std::string &amp;iKey, const FFDisutilityCurve_T &amp;iCurve)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a248902c1293db812c59a364112bff045</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a83f38b40091e55fb961dfcba465f8b40</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae6b28bb51659392ac31e3c2943d9b67e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a2e5ffe8887b014acb18c858e44c6d21c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aac32b12496e3687c38ff56df4fc16c13</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BomRoot</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>acd93d9d9186453089796610119f4b272</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BomRoot</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a9d3cd4fa6e95a02bc23671979afc0e4e</anchor>
      <arglist>(const BomRoot &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BomRoot</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad1992b0ac6d679a6a7fc2b7a810bf5f1</anchor>
      <arglist>(const Key_T &amp;iKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~BomRoot</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a3cc87f4ea9632ba9e2556e4fe7b72a0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a1afd95029bd704dbc990b074ec3a91cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a73d65e6021f6544ccf5133b9ff9a49d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FRAT5CurveHolderStruct</type>
      <name>_frat5CurveHolder</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a4de021d169c51dc9d60b4c627f08ce63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FFDisutilityCurveHolderStruct</type>
      <name>_ffDisutilityCurveHolder</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad9b1b32e651c296730c6414d07114331</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BomRootKey</name>
    <filename>a00075.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>BomRootKey</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af8e6348de64e8a7a4bf9f141f7c2e864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BomRootKey</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2ab0c1d6b77bf30d06ab7cbe999a94db</anchor>
      <arglist>(const std::string &amp;iIdentification)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BomRootKey</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab403b2759b7c49ce88f36f3c231c1750</anchor>
      <arglist>(const BomRootKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BomRootKey</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ac0c5c1a29ae809b8a5bfd3ec5ad7b137</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getID</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a22389df489a258682ba3297bbf5c2839</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ae7537968b496d6bc24b130bbcfcc8cad</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a57c854648f4591d424da5a4c7073679e</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af9293fcc3ede228e9607fa44a86ac7bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa3cc2a78ad48440f422b642e29228dad</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair_test::BookingClass</name>
    <filename>a00076.html</filename>
    <member kind="function">
      <type></type>
      <name>BookingClass</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a8499ef9617f10806a20463c0b9401abd</anchor>
      <arglist>(const std::string &amp;iClassCode)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>afc45d0ace718bc0557d77a67c34c5849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_classCode</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a318792b7030f0642d9f16366efef16ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BookingClass</name>
    <filename>a00077.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>BookingClassKey</type>
      <name>Key_T</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a1bdc86bf9c21dcc6cfbec167f9c64fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a37faf4d1e0e59f0e59c35cee562e9bf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T &amp;</type>
      <name>getClassCode</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a73d4024a6aea1377dc4d3f64f09dc679</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a523e5845af8fc5f672f501007bfc7e87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>acf540ccf4955327869b7576b2a541360</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SubclassCode_T &amp;</type>
      <name>getSubclassCode</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a83ddcb260a4df10f016b485126b86464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AuthorizationLevel_T &amp;</type>
      <name>getAuthorizationLevel</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ab27135cea1dc4f92129e795bd0bddf01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ProtectionLevel_T &amp;</type>
      <name>getProtection</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ab8324d25e3d5e5598ab17548063d7050</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ProtectionLevel_T &amp;</type>
      <name>getCumulatedProtection</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a5d834e6cf2a7b9c31206ccabe511e3f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BookingLimit_T &amp;</type>
      <name>getCumulatedBookingLimit</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a163ee5358387a581d1059bf02a497681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T &amp;</type>
      <name>getNegotiatedSpace</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a11234dee082e7c25eac5ae8aeff0ed8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OverbookingRate_T &amp;</type>
      <name>getNoShowPercentage</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ab80ef27ed5899020309a68cf5aa31d85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OverbookingRate_T &amp;</type>
      <name>getCancellationPercentage</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a2483f542728040ddc449158520bf95b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T &amp;</type>
      <name>getNbOfBookings</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>acba3f253865be30af4abd14e4ccd31e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T &amp;</type>
      <name>getNbOfGroupBookings</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa889e1f1faaea8e1cb3b039c0b9d58ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T &amp;</type>
      <name>getNbOfPendingGroupBookings</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a3343502ab4b851646037a5f4e15c7898</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T &amp;</type>
      <name>getNbOfStaffBookings</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a5ea59a9ff9863dc570d92e960414fed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T &amp;</type>
      <name>getNbOfWLBookings</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a98d65aa792f1106ac152530e15ecc3f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfCancellations_T &amp;</type>
      <name>getNbOfCancellations</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a799608138d7227cbc0bfd57c68b3ff6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T &amp;</type>
      <name>getETB</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a0d5c7cc0ce31be5641bddf37d5161a3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Availability_T &amp;</type>
      <name>getNetClassAvailability</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>acf8e2e207e5e326a72ebfbbf1d594b16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Availability_T &amp;</type>
      <name>getSegmentAvailability</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ada22a00dd5539a919ac12b05459572d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Availability_T &amp;</type>
      <name>getNetRevenueAvailability</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a727312faf81a279aef783890629e0c35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Yield_T &amp;</type>
      <name>getYield</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa55c787d96b94fb665d850d924c79d8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Yield_T &amp;</type>
      <name>getAdjustedYield</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>af488d822434b2d867bee9cf4b2150679</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MeanValue_T &amp;</type>
      <name>getMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad1f56fd1a9196773936aaa6081ca842c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StdDevValue_T &amp;</type>
      <name>getStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a4c5a784648ca4fab81aa41c305bdae80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MeanValue_T &amp;</type>
      <name>getPriceDemMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ab489dfe7b7167341ceb43164cb814e5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StdDevValue_T &amp;</type>
      <name>getPriceDemStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>adb9c49c5eb3b956f9ffed9a2c51adc2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MeanValue_T &amp;</type>
      <name>getCumuPriceDemMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a5d373e23ec46c213afbd47e2b77fb075</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StdDevValue_T &amp;</type>
      <name>getCumuPriceDemStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ae5f12676567cc037e2c8e198a5ce9ee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MeanValue_T &amp;</type>
      <name>getProductDemMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a492cece0329a076d4799b6e1bee9dc5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StdDevValue_T &amp;</type>
      <name>getProductDemStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a30c0df7d3c83876ecd0b87817e495bf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GeneratedDemandVector_T &amp;</type>
      <name>getGeneratedDemandVector</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a94a05dda06f9c3817064ce0c844db28f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumulatedProtection</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a2c7823fa9ea4f1f99dedcd0092cd08ef</anchor>
      <arglist>(const ProtectionLevel_T &amp;iPL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProtection</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a05f7f7e81429d92a53ee51ed8b15dfbb</anchor>
      <arglist>(const ProtectionLevel_T &amp;iPL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumulatedBookingLimit</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a8620e415f9d39903c94ef706e0af7531</anchor>
      <arglist>(const BookingLimit_T &amp;iBL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAuthorizationLevel</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a2e75ff20f72a5937784a618a8071898a</anchor>
      <arglist>(const AuthorizationLevel_T &amp;iAU)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSegmentAvailability</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ab92c964ee5671e2fd3599210369325da</anchor>
      <arglist>(const Availability_T &amp;iAvl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYield</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ac28223827b95d57e306d36403f1e2ed0</anchor>
      <arglist>(const Yield_T &amp;iYield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdjustedYield</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aece9628d28bf73504841e7939f351d7b</anchor>
      <arglist>(const Yield_T &amp;iYield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a15503b73e3e89295772704def5b07759</anchor>
      <arglist>(const MeanValue_T &amp;iMean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a07c760aba154e209a9250f2484b0a69e</anchor>
      <arglist>(const StdDevValue_T &amp;iStdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPriceDemMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a1faf0169c26a7cce0e0a7959507b14a5</anchor>
      <arglist>(const MeanValue_T &amp;iMean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPriceDemStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a98b3db77845888f2b4d11b9cabd3b134</anchor>
      <arglist>(const StdDevValue_T &amp;iStdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumuPriceDemMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a2f505cba2b3170cb80492528bc14259b</anchor>
      <arglist>(const MeanValue_T &amp;iMean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumuPriceDemStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aead6cb007181d4633377784e2e42630f</anchor>
      <arglist>(const StdDevValue_T &amp;iStdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProductDemMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a977ec2f48e824213fc5eebd335d666e5</anchor>
      <arglist>(const MeanValue_T &amp;iMean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProductDemStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a7cb19bfa25a2141d0f1b5544a0aac95a</anchor>
      <arglist>(const StdDevValue_T &amp;iStdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a9b0b77a348b2acfe4c9fcbdbf920700d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a508f31ceaf979acf4474a45ad66ea990</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>af75e100f6beec4bcf18bd1e69a03ab37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a5a6b00565902b5a88424d45475611fb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sell</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ae48c9211e70ef5343c66437069ae46b6</anchor>
      <arglist>(const NbOfBookings_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a9edb4f1340d4eb3a83f4dd4f5ccbf07a</anchor>
      <arglist>(const NbOfBookings_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDemandSamples</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a37ac92e5f273cef92a37be01a6601783</anchor>
      <arglist>(const NbOfSamples_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDemandSamples</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a55a9faaa8a8d845897c563160bdea287</anchor>
      <arglist>(const NbOfSamples_T &amp;, const RandomSeed_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BookingClass</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>add2ad41f7fa0e93a10be8c7b34a54317</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~BookingClass</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a8da556c54f9814215368b6c8d04f65be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad7da30627ddcb37da2f72144dc199514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ac57e81e1c329d71216c71279ec8d4a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a36f07dd2d2831c6904f94a8000d6321a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SubclassCode_T</type>
      <name>_subclassCode</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a020b1c4bcca681c58f3b1ef735234dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProtectionLevel_T</type>
      <name>_cumulatedProtection</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a4fd840d26daa4e4b456894fea0251b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProtectionLevel_T</type>
      <name>_protection</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a5c1ea03f722080b5a0a3b9afbde04994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BookingLimit_T</type>
      <name>_cumulatedBookingLimit</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>acf8d6ba5d51ff336c33318aef10819dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AuthorizationLevel_T</type>
      <name>_au</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>af5949d95fdcf01261494e1cfe8707ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfSeats_T</type>
      <name>_nego</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa14216212a37c30742b564c72d0a1179</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverbookingRate_T</type>
      <name>_noShowPercentage</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a8f4e658da1d5dc8f9464c47ccbb525c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverbookingRate_T</type>
      <name>_cancellationPercentage</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a6dc7a0eddbe39c593565b5fb49850338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfBookings_T</type>
      <name>_nbOfBookings</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a3a848b254b4b9c0452bb8c93796e09bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfBookings_T</type>
      <name>_groupNbOfBookings</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a91a595e091b0b9260b5445080b544878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfBookings_T</type>
      <name>_groupPendingNbOfBookings</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ade6fcfbbfeafa37be92cfcf703864729</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfBookings_T</type>
      <name>_staffNbOfBookings</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad9e10f457514ec50d8e160cdfdb36d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfBookings_T</type>
      <name>_wlNbOfBookings</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a74ba7ecd2d04a5f10dca36efb919329d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfCancellations_T</type>
      <name>_nbOfCancellations</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a638bb3d7d10fbc513902c25fabd5009a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfBookings_T</type>
      <name>_etb</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a9098b5f4e03791c0f9697bcde92a50e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Availability_T</type>
      <name>_netClassAvailability</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a7cb37dd1b374f25faf1d3318e8160269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Availability_T</type>
      <name>_segmentAvailability</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa2de600e93c84c87f796ea58eb550130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Availability_T</type>
      <name>_netRevenueAvailability</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ae04bcfddfc6c8da1735cc9abeaeb1a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Yield_T</type>
      <name>_yield</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa2e81941f5dd5c8e261089b80446facb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Yield_T</type>
      <name>_adjustedYield</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a0be64609e59d3fa6e28d91fbc5aae10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MeanValue_T</type>
      <name>_mean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a4d8d582f5c555723826de1249fc68e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StdDevValue_T</type>
      <name>_stdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a263eadad2278a853568447e8d66c25c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MeanValue_T</type>
      <name>_priceDemMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a018ec231d4e62bd9864170f39169282e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StdDevValue_T</type>
      <name>_priceDemStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a0027793f4cc93beb80753bb24c5391b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MeanValue_T</type>
      <name>_cumuPriceDemMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>abb18cb035f3d2e01ece16f354fee1103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StdDevValue_T</type>
      <name>_cumuPriceDemStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ae7affb64bd17eb7acdc3239cd4f47280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MeanValue_T</type>
      <name>_productDemMean</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a891f52e4b8c726918786aa7e06d62748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StdDevValue_T</type>
      <name>_productDemStdDev</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad5cd8b147fe4d650c772da2c4c8df512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeneratedDemandVector_T</type>
      <name>_generatedDemandVector</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aab3d328e655aa6384119ceedff762613</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BookingClassKey</name>
    <filename>a00078.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>BookingClassKey</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a46cf1edcc79dfa9facaf671465fe9468</anchor>
      <arglist>(const ClassCode_T &amp;iClassCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BookingClassKey</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ad318b90aa0fa3c098eeec1dcdfb21793</anchor>
      <arglist>(const BookingClassKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BookingClassKey</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a3a1832b6e201316ef3b70c0d593d2278</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T &amp;</type>
      <name>getClassCode</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ac417e476f852ef65ce784e0eae66ee7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a156a2fa82ab23b688e5f1f7ba87b7ada</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a287c214844f273677f9022f56bf8c53c</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a35097fb5ba846e4471c979c31e281674</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::BookingClassListEmptyInNestingStructException</name>
    <filename>a00079.html</filename>
    <base>stdair::SimpleNestingStructException</base>
    <member kind="function">
      <type></type>
      <name>BookingClassListEmptyInNestingStructException</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ab2e988865b3280c7df2e1101d56031d6</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BookingRequestStruct</name>
    <filename>a00080.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const DemandGeneratorKey_T &amp;</type>
      <name>getDemandGeneratorKey</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a2dc326286e6b69f165f1859df32982d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getOrigin</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aee19c7efb7638bbd19a8336afc05dae7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getDestination</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ad870ea82ed747efad4c6e390fa36a3c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CityCode_T &amp;</type>
      <name>getPOS</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>acfad421a6491d007c4fedcc4b9de43b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Date_T &amp;</type>
      <name>getPreferedDepartureDate</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>afb0e1c638c5a5c3fca5458a05bf0786d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getPreferredDepartureTime</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a79aa4ceb4866fe6539a9b9108230819e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T &amp;</type>
      <name>getRequestDateTime</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aef3bd4096514769d41347e0a9fd89705</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T &amp;</type>
      <name>getPreferredCabin</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>add24b18c818bccdfc49e095a393ccaec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T &amp;</type>
      <name>getPartySize</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a5d924d84e69c9e3964df872b977eb04c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChannelLabel_T &amp;</type>
      <name>getBookingChannel</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a49fd87997010deb06e387818b1347365</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TripType_T &amp;</type>
      <name>getTripType</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a04db8502f0c7251934bc4ea72c80b4ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T &amp;</type>
      <name>getStayDuration</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a54cb65b7e626e089d3905c37deaf7dd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FrequentFlyer_T &amp;</type>
      <name>getFrequentFlyerType</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab1863582337e5ec83a82b57ed54c552e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const WTP_T &amp;</type>
      <name>getWTP</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a434b82ae38589be7dfb3337646d35feb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PriceValue_T &amp;</type>
      <name>getValueOfTime</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a294a31870e053898ff2b520376c8e8a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChangeFees_T &amp;</type>
      <name>getChangeFees</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aba01104e577e9488a6c6af28dc80bf31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Disutility_T &amp;</type>
      <name>getChangeFeeDisutility</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>afc0a5cdb7dd89abc4440466c0073725b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NonRefundable_T &amp;</type>
      <name>getNonRefundable</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a1ee5ab214326a80e4a86a7f3dab5da43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Disutility_T &amp;</type>
      <name>getNonRefundableDisutility</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a589a2ab5fb59900d512defebeb0abb72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ae2e283980140e33fb7194ff6e93c14df</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a91def7ed24f9df42a4abab4c6bf5ce3e</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a3879a61be88b30732235ac33b14d418f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>display</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a25b9474dbf992a0ed617f3edf50caf2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BookingRequestStruct</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ac3f3817213acea6de1e3e3d2f00ecf18</anchor>
      <arglist>(const DemandGeneratorKey_T &amp;iGeneratorKey, const AirportCode_T &amp;iOrigin, const AirportCode_T &amp;iDestination, const CityCode_T &amp;iPOS, const Date_T &amp;iDepartureDate, const DateTime_T &amp;iRequestDateTime, const CabinCode_T &amp;iPreferredCabin, const NbOfSeats_T &amp;iPartySize, const ChannelLabel_T &amp;iChannel, const TripType_T &amp;iTripType, const DayDuration_T &amp;iStayDuration, const FrequentFlyer_T &amp;iFrequentFlyerType, const Duration_T &amp;iPreferredDepartureTime, const WTP_T &amp;iWTP, const PriceValue_T &amp;iValueOfTime, const ChangeFees_T &amp;iChangeFees, const Disutility_T &amp;iChangeFeeDisutility, const NonRefundable_T &amp;iNonRefundable, const Disutility_T &amp;iNonRefundableDisutility)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BookingRequestStruct</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a3a95df75e29cc7f40b9391386f9079be</anchor>
      <arglist>(const AirportCode_T &amp;iOrigin, const AirportCode_T &amp;iDestination, const CityCode_T &amp;iPOS, const Date_T &amp;iDepartureDate, const DateTime_T &amp;iRequestDateTime, const CabinCode_T &amp;iPreferredCabin, const NbOfSeats_T &amp;iPartySize, const ChannelLabel_T &amp;iChannel, const TripType_T &amp;iTripType, const DayDuration_T &amp;iStayDuration, const FrequentFlyer_T &amp;iFrequentFlyerType, const Duration_T &amp;iPreferredDepartureTime, const WTP_T &amp;iWTP, const PriceValue_T &amp;iValueOfTime, const ChangeFees_T &amp;iChangeFees, const Disutility_T &amp;iChangeFeeDisutility, const NonRefundable_T &amp;iNonRefundable, const Disutility_T &amp;iNonRefundableDisutility)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BookingRequestStruct</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>afd1da5ae92a3a0db78d2d922fb955e37</anchor>
      <arglist>(const BookingRequestStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BookingRequestStruct</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>adf345daf9ae8c29916fe2b83187e0519</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BreakPointStruct</name>
    <filename>a00081.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const DateTime_T &amp;</type>
      <name>getBreakPointTime</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a5bb01d464c1b370fb51f207fe0779f47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a312859790f8fe791f72a3877a5c021ea</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a42f86ed6bbf9d5796db179bc83f76a11</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a7b5d1b3e05c7908592a70d432e980bcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BreakPointStruct</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a1109e7796097c2f04e72e3f7bf0c33e9</anchor>
      <arglist>(const DateTime_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BreakPointStruct</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ad2e6d6946d1f093faecf65eca0cfae9f</anchor>
      <arglist>(const Date_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BreakPointStruct</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a2063ecb44a8e903e46ecc8c83eda22f1</anchor>
      <arglist>(const BreakPointStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BreakPointStruct</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a95b6db0f3bd14ea3af11e84e943d54a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::Bucket</name>
    <filename>a00082.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>BucketKey</type>
      <name>Key_T</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a6307775d1ebb225b6017e28a1087f9ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a8a834dc23e39c282627bd32899c1430d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af1b62d1b982d480bda46426d66355d72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a2f7ad54d5716b8d01f2faa2bf673f5b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SeatIndex_T &amp;</type>
      <name>getSeatIndex</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a87c3e5ed18037b46859a33b79aa63529</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Yield_T &amp;</type>
      <name>getYieldRangeUpperValue</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a08fef08f1794432244fbb2a842641c46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCapacity_T &amp;</type>
      <name>getAvailability</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab044da835484ecfa39886f261466b1ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T &amp;</type>
      <name>getSoldSeats</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>adc07a6268ce418d51532ba02096883b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYieldRangeUpperValue</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a85879e41575e9486cae8d35fdbf40c2e</anchor>
      <arglist>(const Yield_T &amp;iYield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvailability</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac85067a6e0b6fe4090d1b767f07bfc40</anchor>
      <arglist>(const CabinCapacity_T &amp;iAvl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoldSeats</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a7389a2d6538515e16ce38650cbba386c</anchor>
      <arglist>(const NbOfSeats_T &amp;iSoldSeats)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac345f81b6d84c5319c92c2824a0a7ffb</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a310a833267c04d8b051e3b34f0ef7c41</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a012368813f0a78ae9519604095a5ff88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a94f75485491d2776a597f647d13301f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad0952a59a0aefba5d1ac19b9e4d129a6</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Bucket</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ae895e0b76ea58ad45063a01a7b735565</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Bucket</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac7e6e96f8b569c4825a731173cc21b98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a33e4f620cc2e1bc5a1b4b7072f9c0a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a84320ea577cd3787035808306c0394c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3679331834512acbf42de073cf33f8bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Yield_T</type>
      <name>_yieldRangeUpperValue</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>abf54c6d27cdfb63730bd9bd01bc7d1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CabinCapacity_T</type>
      <name>_availability</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab1919985e53771973c4747f834e43d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfSeats_T</type>
      <name>_soldSeats</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>adb8a762a156b13d602db39bbe7170030</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::BucketKey</name>
    <filename>a00083.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>BucketKey</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a451f9b69e6c64001ad8b532c6a7c7acf</anchor>
      <arglist>(const SeatIndex_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BucketKey</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9a4c5658abf6b964faf2b457308203cf</anchor>
      <arglist>(const BucketKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BucketKey</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8deb1e195ab7961163df47526492e11a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SeatIndex_T &amp;</type>
      <name>getSeatIndex</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa2711384d45638a58a740e6313e12047</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7ba7c90ebda4073d21bf7163547db5fc</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a24ff923cf66d4f66735d488febf6a1cc</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aba38c501e4f53d9002107f5f49cbb437</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a4bfc5ed049afccc135bdced2d05fa8c9</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair_test::Cabin</name>
    <filename>a00084.html</filename>
    <member kind="typedef">
      <type>BookingClass</type>
      <name>child</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a4a51ae14f441dc3c5d771117c1628bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cabin</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a83e732fa3f4af1c63b02968a11936588</anchor>
      <arglist>(const BookingClass &amp;iBkgClass)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a7ac710e3ceeab0be90744d45d8304d0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>BookingClass</type>
      <name>_bookingClass</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a433280e12f7c8b17f3d14447ded8669f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::CancellationStruct</name>
    <filename>a00085.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const SegmentPath_T &amp;</type>
      <name>getSegmentPath</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>af863c55a4a5a0c7464be2b408ea18867</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClassList_String_T &amp;</type>
      <name>getClassList</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aa8a8709fc7a07704689e575c6e557777</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BookingClassIDList_T &amp;</type>
      <name>getClassIDList</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ab0293105854c35ba346bd72297d0511a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PartySize_T &amp;</type>
      <name>getPartySize</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a4b00c6692feff029dec2574263f5e138</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T &amp;</type>
      <name>getCancellationDateTime</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a9111cde9106bddb65805e0cd7c2d9f66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a87f358ac8ef02d649712d32bbf7927fd</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a3cb810e04517c6a6c0196df1eb5be2b4</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a2479ad5bdc085f411436a7640ef526d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>display</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aec52aa5e1d4ff0546132c58f7d06300f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CancellationStruct</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a40f9bd282b9da0f32b9adce5b6a575cf</anchor>
      <arglist>(const SegmentPath_T &amp;, const ClassList_String_T &amp;, const PartySize_T &amp;, const DateTime_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CancellationStruct</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a37a17205d37a9e1740c24edd3150ee6f</anchor>
      <arglist>(const SegmentPath_T &amp;, const BookingClassIDList_T &amp;, const PartySize_T &amp;, const DateTime_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CancellationStruct</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a0363ac84380dadfff9e8dd803a781ca1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::CmdAbstract</name>
    <filename>a00086.html</filename>
  </compound>
  <compound kind="class">
    <name>stdair::CmdBomManager</name>
    <filename>a00087.html</filename>
    <base>stdair::CmdAbstract</base>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>STDAIR_Service</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a1ed04ed1a9fc939ddb7831ca0dd401e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::CmdBomSerialiser</name>
    <filename>a00088.html</filename>
    <base>stdair::CmdAbstract</base>
  </compound>
  <compound kind="class">
    <name>stdair::CmdCloneBomManager</name>
    <filename>a00089.html</filename>
    <base>stdair::CmdAbstract</base>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>STDAIR_Service</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1ed04ed1a9fc939ddb7831ca0dd401e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::CodeConversionException</name>
    <filename>a00090.html</filename>
    <base>stdair::ParserException</base>
    <member kind="function">
      <type></type>
      <name>CodeConversionException</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a21d92fc8409b7cda8c61537e1c9b4d25</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::CodeDuplicationException</name>
    <filename>a00091.html</filename>
    <base>stdair::ParserException</base>
    <member kind="function">
      <type></type>
      <name>CodeDuplicationException</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a555ad0bb5c08a307f901d11b70a07519</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>COMMAND</name>
    <filename>a00092.html</filename>
    <member kind="variable">
      <type>char const *</type>
      <name>name</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a7d4e7481ce47be46ac779f12080aa953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pt2Func *</type>
      <name>func</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>af9b625faac70345a8eb08644482d1fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>doc</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a065e69a70bee89c08758fbc8f57cf893</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::ConfigHolderStruct</name>
    <filename>a00093.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a47bc860f88651da80d59c9709556cd60</anchor>
      <arglist>(const bpt::ptree &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addValue</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a6c30fdca993b1004f81fce7ce6371022</anchor>
      <arglist>(const std::string &amp;iValue, const std::string &amp;iPath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportValue</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>ae65f3c30c6a290ef214e3e541be82cc4</anchor>
      <arglist>(ValueType &amp;ioValue, const std::string &amp;iPath) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAirlineFeatures</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a90efe2c233fc080876256e0e29dfcbdc</anchor>
      <arglist>(BomRoot &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a0f211ed299d1029b689b934feaeb523d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>ac468974057fb9698c00804bb549238c1</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a2fd622c1520bd82c17afa6d45239741d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>jsonExport</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>abf188ffa8e53b758c7bd25ca9c40b176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigHolderStruct</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a09c79a654ddb04ae90dc656fbea03b70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigHolderStruct</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a063d0927f7a91f34019d2c09bdacbdab</anchor>
      <arglist>(const ConfigHolderStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConfigHolderStruct</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>ae4647f6bf28c16ff6e67e7b0bd63147b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportValue</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a2e6d752881a73496a057646fd467e902</anchor>
      <arglist>(Date_T &amp;ioValue, const std::string &amp;iPath) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::ConfigINIFile</name>
    <filename>a00094.html</filename>
    <base>stdair::InputFilePath</base>
    <member kind="function">
      <type></type>
      <name>ConfigINIFile</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>abe512e0b31928ede223f08cbdc4b9fbf</anchor>
      <arglist>(const Filename_T &amp;iFilename)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>af9e08933f4c33a13af30e187be9e8502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Filename_T</type>
      <name>_filename</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>add99acc274a1806b541841b27cce35a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::ContinuousAttributeLite</name>
    <filename>a00095.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; T, stdair::Probability_T &gt;</type>
      <name>ContinuousDistribution_T</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9a652d5eefa51201aef0a4304a70e425</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>getValue</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ad3f1751b2d04712acf8223e739bc5fe8</anchor>
      <arglist>(const stdair::Probability_T &amp;iCumulativeProbability) const </arglist>
    </member>
    <member kind="function">
      <type>const stdair::Probability_T</type>
      <name>getRemainingProportion</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0ac3c7333083cdb43b55c8770e90b705</anchor>
      <arglist>(const T &amp;iValue) const </arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>getDerivativeValue</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a847f166955e455bc305806c55df897ff</anchor>
      <arglist>(const T iKey) const </arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>getUpperBound</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae519a823fb3815d261bf79e54be92e43</anchor>
      <arglist>(const T iKey) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>displayCumulativeDistribution</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>acf2e5984b207a732397bdf39660a1651</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContinuousAttributeLite</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3cb2afb207432080e9c2b1acaae7384b</anchor>
      <arglist>(const ContinuousDistribution_T &amp;iValueMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContinuousAttributeLite</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a306f7f64264dbe48c75626f45344e4ba</anchor>
      <arglist>(const ContinuousAttributeLite &amp;iCAL)</arglist>
    </member>
    <member kind="function">
      <type>ContinuousAttributeLite &amp;</type>
      <name>operator=</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ad15a87362780612cc32a5a8c8d6926dc</anchor>
      <arglist>(const ContinuousAttributeLite &amp;iCAL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ContinuousAttributeLite</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a331b604a7b6ec18343de3bfc5aeeed66</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::date_time_element</name>
    <filename>a00096.html</filename>
    <templarg>MIN</templarg>
    <templarg>MAX</templarg>
    <member kind="function">
      <type></type>
      <name>date_time_element</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a20c3e2a307875fd0f9ed94439e3cd8c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>date_time_element</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5f57587734a751a4e762d46eed193ac9</anchor>
      <arglist>(const date_time_element &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>date_time_element</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a36a1b4059afc2ba660a4b95a1c4f8e02</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a58e17ddaf9b6f1fa610035704f5b2d4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>_value</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ad309232af410e3e25c40fdd1c74e4952</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::DatePeriod</name>
    <filename>a00097.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>DatePeriodKey</type>
      <name>Key_T</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a99c52c2dd3e02adee7c48e3dbb89b6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>af381eb71f64002c276bd8f28f8c454f3</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a4d96a91e9c96661e398c7741176cb356</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a9867bc47ec72b256171d8bbd4c897d94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a1f0ade9b3ab9c3eb3f67419a49d651b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>abd634d04e3cf4b57c1a31e57a3b9816d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>add089c5d07f72cf065bcb6cc0961b1db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a39183f267b3e52ec7fb1ffad0bf179bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DatePeriod_T &amp;</type>
      <name>getDatePeriod</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a8688d6264747172ea85c9a25b8b8ab5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDepartureDateValid</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a3f221b150750aadd9ca75d9218529fc1</anchor>
      <arglist>(const Date_T &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DatePeriod</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a1e3a422a8382632ef078ee373ff9d58f</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DatePeriod</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a87115eea798e3f4f2eb82adc22a67186</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a7bd86e82ba10448a62ecfc1b616634ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a153a2013a7236aecf1bda5f0c8882d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a000653b5ea2225e268efa50254bd3fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::DatePeriodKey</name>
    <filename>a00098.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>DatePeriodKey</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a9db11a7d4c0755728e5e39b0e69ade53</anchor>
      <arglist>(const DatePeriod_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DatePeriodKey</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a45780816db53ae245236dfb87777dd53</anchor>
      <arglist>(const DatePeriodKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DatePeriodKey</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>adb253b7d75bad688b4eecb17fa8e92f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DatePeriod_T &amp;</type>
      <name>getDatePeriod</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a016aa4f8cd09a0b16ea09559c830894c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ac3f3a28272a35c480c1d27b694aa7dc1</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a4d8713c573d76b850f91666712019f53</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>adaad8f660dd9ad8a19f0023d3131d714</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::DbaAbstract</name>
    <filename>a00099.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DbaAbstract</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a10cc2d7cdef9dd9059c87a362d7a6997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>toStream</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a401a6f43771e86b87b88cedafd73fec7</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a515f3ed2216045fc962c9071ce2831c5</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DbaAbstract</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aafe9da5c7ef6dc36e43c8bc92d34cc63</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::DBManagerForAirlines</name>
    <filename>a00100.html</filename>
    <base>stdair::CmdAbstract</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>updateAirlineInDB</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a3f1509f70fc5dd81f0586810ef97dc9b</anchor>
      <arglist>(DBSession_T &amp;, const AirlineStruct &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>retrieveAirline</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ad6eaaa2d89386b172a25abb267d770ca</anchor>
      <arglist>(DBSession_T &amp;, const AirlineCode_T &amp;, AirlineStruct &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>prepareSelectStatement</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a55667f58ee75bdcb87793fe3262814df</anchor>
      <arglist>(DBSession_T &amp;, DBRequestStatement_T &amp;, AirlineStruct &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>iterateOnStatement</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>aac370aa0b9bcdae2fbea716e83bf463b</anchor>
      <arglist>(DBRequestStatement_T &amp;, AirlineStruct &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::DBSessionManager</name>
    <filename>a00101.html</filename>
    <member kind="function">
      <type>DBSession_T &amp;</type>
      <name>getDBSession</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ac845264cf3e0c3ae1cc95ac6882e06b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DBSessionManager &amp;</type>
      <name>instance</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a9b631f93460405bc64795a70856b183b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacSupervisor</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a8407e264b8851af447183bb0a78f5688</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>STDAIR_Service</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a1ed04ed1a9fc939ddb7831ca0dd401e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::DefaultDCPList</name>
    <filename>a00102.html</filename>
    <member kind="function" static="yes">
      <type>static DCPList_T</type>
      <name>init</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a2984b58c5c6c0fa67173cfa165d70018</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::DefaultDtdFratMap</name>
    <filename>a00103.html</filename>
    <member kind="function" static="yes">
      <type>static DTDFratMap_T</type>
      <name>init</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abeb397780d65eb070691c592aabee6c3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::DefaultDtdProbMap</name>
    <filename>a00104.html</filename>
    <member kind="function" static="yes">
      <type>static DTDProbMap_T</type>
      <name>init</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a0305717fa94de19063768c4a242aa42f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::DefaultMap</name>
    <filename>a00105.html</filename>
    <member kind="function" static="yes">
      <type>static FRAT5Curve_T</type>
      <name>createFRAT5CurveA</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a26419cb480c94e10f1015af17794e5d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FRAT5Curve_T</type>
      <name>createFRAT5CurveB</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a45c366b9dc08399d8848003f6ce82dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FRAT5Curve_T</type>
      <name>createFRAT5CurveC</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a8974bddc939099ba69db370f9275161c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FRAT5Curve_T</type>
      <name>createFRAT5CurveD</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a01bbdeb2c1cbe541dbbe0717b8fe6e5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FFDisutilityCurve_T</type>
      <name>createFFDisutilityCurveA</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>ac6feb985d3766c6dbe325fe0cff40f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FFDisutilityCurve_T</type>
      <name>createFFDisutilityCurveB</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>aee4db08f1ae46faf9547aa7387529b29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FFDisutilityCurve_T</type>
      <name>createFFDisutilityCurveC</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a637f239daae3e368bb97a6b3c2bd9efe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FFDisutilityCurve_T</type>
      <name>createFFDisutilityCurveD</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a12479ce689cac5ac97d3c7e6d50c63d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FFDisutilityCurve_T</type>
      <name>createFFDisutilityCurveE</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a0023c843fc225b75b8a9bb37b6b87a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FFDisutilityCurve_T</type>
      <name>createFFDisutilityCurveF</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a16150b6065ecb9ed6ee1a5436e104286</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::DemandGenerationMethod</name>
    <filename>a00106.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_DemandGenerationMethod</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a71af04ae27518d3d8aa3771c297fa845</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POI_PRO</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a71af04ae27518d3d8aa3771c297fa845ac067460d06fbdd10106a4c47ebe195c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STA_ORD</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a71af04ae27518d3d8aa3771c297fa845a8bca16ab66a56b91fc838a3213c19376</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a71af04ae27518d3d8aa3771c297fa845a54c3d7725b87e16786d8081b60f1c40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_DemandGenerationMethod</type>
      <name>getMethod</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ae07ade1f1694ef7a929990ad7e7db9d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getMethodAsChar</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a8320478e3b9e47e7c3baf7d6779832fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMethodAsString</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ad4c714d3b8fe8ede056111bbca7733fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ae0f4c24547acc167c47b094fce5c900a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aecb315abbece7a290f9a19e941982269</anchor>
      <arglist>(const EN_DemandGenerationMethod &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DemandGenerationMethod</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a7b3d2a45bccbc989f803e4209bc453c5</anchor>
      <arglist>(const EN_DemandGenerationMethod &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DemandGenerationMethod</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ad40c00ae62084773878b7be3c448896b</anchor>
      <arglist>(const char iMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DemandGenerationMethod</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aedab29c1a2e117b1e2578132f2868577</anchor>
      <arglist>(const std::string &amp;iMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DemandGenerationMethod</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ac127543f0ef7cb994c5d4b379c325e8c</anchor>
      <arglist>(const DemandGenerationMethod &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a4d3a0b181528e1e56dbf690ee2faa3e2</anchor>
      <arglist>(const EN_DemandGenerationMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EN_DemandGenerationMethod</type>
      <name>getMethod</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a7bf131f6d80dd002e73c5868d8335111</anchor>
      <arglist>(const char)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getMethodLabel</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>af2fec3f52ee2f1d2f56f4b52c7975a1a</anchor>
      <arglist>(const EN_DemandGenerationMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getMethodLabelAsString</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a37d3d9e7f3f71f6934e376030dc36eb0</anchor>
      <arglist>(const EN_DemandGenerationMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>abb05c697ff5caaa6cdaa78362400e72e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::DictionaryManager</name>
    <filename>a00107.html</filename>
    <member kind="function" static="yes">
      <type>static const stdair::Probability_T</type>
      <name>keyToValue</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac8872818a4341d48045141196effff5a</anchor>
      <arglist>(const DictionaryKey_T)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DictionaryKey_T</type>
      <name>valueToKey</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a9882389535c31c8a9a8ff85b4fbdd90e</anchor>
      <arglist>(const stdair::Probability_T)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::DocumentNotFoundException</name>
    <filename>a00108.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>DocumentNotFoundException</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac07a31749d4dbda3c53a13fbbf164386</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::DoWStruct</name>
    <filename>a00109.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="typedef">
      <type>std::vector&lt; bool &gt;</type>
      <name>BooleanList_T</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a95f43574fbdcd0e69decfe474e158ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDayOfWeek</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ad827390fec3faa59f2a21a833033dc91</anchor>
      <arglist>(const unsigned short i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStandardDayOfWeek</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a03a026e9cd8e46c1a3668045497b375a</anchor>
      <arglist>(const unsigned short i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDayOfWeek</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>abaab0fb818fbac42e4c44c48ba8002f0</anchor>
      <arglist>(const unsigned short, const bool)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a1256b28f5a16686cd697d18921361906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeShort</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a2de5b830f734068f93165e994f14493b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DoWStruct</type>
      <name>shift</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a89ef02178ddd9476b304c33e358c2d85</anchor>
      <arglist>(const long &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>DoWStruct</type>
      <name>intersection</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af5a9e78c7f026539cad1826b71835550</anchor>
      <arglist>(const DoWStruct &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const bool</type>
      <name>isValid</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a67191208c60512b6b861df56b054a34d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoWStruct</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a595d28e58f1fc677602e744104152537</anchor>
      <arglist>(const std::string &amp;iDowString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoWStruct</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a35b34cc80f9dd7d0055d2f4b0402a6dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoWStruct</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ab59ba6b2b1daa1ce31b6247115936e1b</anchor>
      <arglist>(const DoWStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DoWStruct</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a594b49992b9f1fc600e0f99f956a7bab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::EventException</name>
    <filename>a00110.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>EventException</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ad07f3463822b58994dd85f3db9f0d9f1</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::EventStruct</name>
    <filename>a00111.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const EventType::EN_EventType &amp;</type>
      <name>getEventType</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a7b1259fec2ec99a7c57c91f1e0fd6cb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LongDuration_T &amp;</type>
      <name>getEventTimeStamp</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a5ca3cbb471524a4d7cdd3f140d7d2090</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T &amp;</type>
      <name>getEventTime</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>aa6978d53a734bc96616741769c3640f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BookingRequestStruct &amp;</type>
      <name>getBookingRequest</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a4a9f2f1239099f7a3302f81f09aec8e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CancellationStruct &amp;</type>
      <name>getCancellation</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>aa6518fdcd2e5251027e7eaff8177f595</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OptimisationNotificationStruct &amp;</type>
      <name>getOptimisationNotificationStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ad47975b0db899313429178214d2f6a6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SnapshotStruct &amp;</type>
      <name>getSnapshotStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a009b2083f18d720d06ec5ed6d16f0748</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RMEventStruct &amp;</type>
      <name>getRMEvent</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a5da7fa21706828ad8d0fa23452248070</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BreakPointStruct &amp;</type>
      <name>getBreakPoint</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>aa9bbc7ac73108c7f19bc19890b0247ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a167159ca10304d03fa314a22de1e3707</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a2c20677d5164c3275797876dd2304a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a96f17459577ecb9b1d7e5ad809616d87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a1401c7649b16add3b368878e2435cc33</anchor>
      <arglist>(const EventType::EN_EventType &amp;, BookingRequestPtr_T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ac71e855799ae9c45fe667c92358070a8</anchor>
      <arglist>(const EventType::EN_EventType &amp;, CancellationPtr_T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a5942170f6d9bd8bc633d5dcd7889013d</anchor>
      <arglist>(const EventType::EN_EventType &amp;, const DateTime_T &amp;iDCPDate, OptimisationNotificationPtr_T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a4f15cc29ed3fcab0716d44d5620cbf4a</anchor>
      <arglist>(const EventType::EN_EventType &amp;, SnapshotPtr_T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a607b6273e90b4ef063a11be0c3372aa9</anchor>
      <arglist>(const EventType::EN_EventType &amp;, RMEventPtr_T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a281d87be7a87a44f3e68a3f26ca8faf9</anchor>
      <arglist>(const EventType::EN_EventType &amp;, BreakPointPtr_T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ab2f4cea968bdf90acc8bcd0086fb3d4a</anchor>
      <arglist>(const EventStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EventStruct</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>accac448f6ec9f55f9e4067d51bd3a2ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementEventTimeStamp</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a12bb676f4df56bb31b6eaf19f10d879d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::EventType</name>
    <filename>a00112.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_EventType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6dbff9dc08db1d1663c1b411cfed1630</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BKG_REQ</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6dbff9dc08db1d1663c1b411cfed1630a61e103f3efcb536015bdf31650acb1f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CX</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6dbff9dc08db1d1663c1b411cfed1630a7c73badf454d7dac9efb90a1b90a0d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPT_NOT_4_FD</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6dbff9dc08db1d1663c1b411cfed1630ab1cd7b0c02a99fa7f8b863ad5a6714ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPT_NOT_4_NET</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6dbff9dc08db1d1663c1b411cfed1630a6d7c9df054e10c825c2f63846cce7e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SKD_CHG</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6dbff9dc08db1d1663c1b411cfed1630a0c73d4d86aa894319c05df8a5e4bc3d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SNAPSHOT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6dbff9dc08db1d1663c1b411cfed1630a696bb789013f36fc80608f55e383bddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RM</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6dbff9dc08db1d1663c1b411cfed1630ab48e05eeab84532573406a3da71bea4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BRK_PT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6dbff9dc08db1d1663c1b411cfed1630a9b4ec9a272dde849591fa48a8b21077b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6dbff9dc08db1d1663c1b411cfed1630a31278396bb586b211565907770496e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_EventType</type>
      <name>getType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa7b062bd5663250c48e3cb004736068d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeAsString</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9ff73549b76102f696f140a13da1cfa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2454a2afbf823ee318bc80430027dadf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aad6d2dc4f73e774c21f5f89e380720cf</anchor>
      <arglist>(const EN_EventType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad421ca3e5e1f829f83c9821913c2455b</anchor>
      <arglist>(const EN_EventType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2d15713d5d00676fa3b5d1c1fc068078</anchor>
      <arglist>(const char iType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa03441e2de2a9d1ee43d9f17439899e7</anchor>
      <arglist>(const std::string &amp;iTypeStr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac0abac54f501bce551191c29c931fac2</anchor>
      <arglist>(const EventType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af84a5c38e859f3c77b085271b35dcbbc</anchor>
      <arglist>(const EN_EventType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getTypeLabel</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0c280dc7eae37bbef223ab323ded3b7c</anchor>
      <arglist>(const EN_EventType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getTypeLabelAsString</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3d6f33289b0e6fd378881d3917686d2d</anchor>
      <arglist>(const EN_EventType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a752e8ef5aa95b25f0c5a9b21482add51</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FacAbstract</name>
    <filename>a00113.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FacAbstract</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a8e61a537044f7c705d7a65eb6b9930ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FacAbstract</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a774cd58d01430af0ff7d2723f0dce74a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FacBom</name>
    <filename>a00114.html</filename>
    <templarg></templarg>
    <base>stdair::FacAbstract</base>
    <member kind="function">
      <type>BOM &amp;</type>
      <name>create</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>af06dd266824e0ec2ea9a15994f56fd75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BOM &amp;</type>
      <name>create</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a0a564c58dc4b3bb2507e426e97108315</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BOM &amp;</type>
      <name>create</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a0b48cf4af81290ecf87df7fe18c9da3c</anchor>
      <arglist>(const BOM &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FacBom</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a8ad2941a6f1b8287ab521d12775d6667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a0c5c64c4412d6551c84bdc5251d0a838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FacBom &amp;</type>
      <name>instance</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>af10a87fcdeb32af553c6994ba724016a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FacBom</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>ab7b8a5713b982a56c07f3ec3fbe361fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FacBomManager</name>
    <filename>a00115.html</filename>
    <base>stdair::FacAbstract</base>
    <member kind="function">
      <type></type>
      <name>~FacBomManager</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a24762cdca9c0fe85ee40cdfb1857267e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToList</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a0820269f3f49589e3c3fa4554df53d27</anchor>
      <arglist>(SegmentDate &amp;ioSegmentDate, SegmentDate &amp;ioMarketingSegmentDate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BomHolder&lt; OBJECT2 &gt; *</type>
      <name>getBomHolderPtr</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a964d7838b283ce8a2beeb9cc81a2dae5</anchor>
      <arglist>(OBJECT1 &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BomHolder&lt; OBJECT2 &gt; &amp;</type>
      <name>addBomHolder</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a2347bd8cfd8c22af551c04d8b30fea05</anchor>
      <arglist>(OBJECT1 &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addToList</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ac7a49e8d030636c5732a654d5565dfb5</anchor>
      <arglist>(OBJECT1 &amp;, OBJECT2 &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addToMap</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a40e4c9b9217ab54425b32e9f90b34c36</anchor>
      <arglist>(OBJECT1 &amp;, OBJECT2 &amp;, const MapKey_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addToMap</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ab438abe7e8c9aeceb21f0742731961b3</anchor>
      <arglist>(OBJECT1 &amp;, OBJECT2 &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addToListAndMap</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a94b8ba4b903492ccd61f48f27e5f3827</anchor>
      <arglist>(OBJECT1 &amp;, OBJECT2 &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addToListAndMap</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a4ce7cb3729a02e657ab2b64f906d6803</anchor>
      <arglist>(OBJECT1 &amp;, OBJECT2 &amp;, const MapKey_T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>linkWithParent</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a8ded10b9a6c462f820b30dca6db13696</anchor>
      <arglist>(PARENT &amp;, CHILD &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cloneHolder</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a1a5653b6d52a9178b9599cfce23e67bb</anchor>
      <arglist>(OBJECT1 &amp;, const OBJECT1 &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetYieldBasedNestingStructure</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ac5daa84f4865b749ac3ea8c300393fb8</anchor>
      <arglist>(const SegmentCabin &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setAirlineFeature</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a4f2721b970ecfe34126d34afb2b54a35</anchor>
      <arglist>(Inventory &amp;iInventory, AirlineFeature &amp;iAirlineFeature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>linkWithOperating</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ab236dc3fb7a0125d042cf23b0beaea8c</anchor>
      <arglist>(SegmentDate &amp;iSegmentDate, SegmentDate &amp;iOperatingSegmentDate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FacBomManager</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a398b56057067cfeff6c30244c0d54002</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FacCloneBom</name>
    <filename>a00116.html</filename>
    <templarg></templarg>
    <base>stdair::FacAbstract</base>
    <member kind="function">
      <type>BOM &amp;</type>
      <name>clone</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ab652e78123f0866cac493804a07e9e7b</anchor>
      <arglist>(const BOM &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FacCloneBom</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a2d893aacefe014bf3832b68ad65176ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a1f5a13380299b9642710192c6509c0b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FacCloneBom &amp;</type>
      <name>instance</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a5bd6cee864fd6be4482c3d107db69b2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FacCloneBom</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a6309b31955be2a9eaa1cc08847c4ec64</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FacServiceAbstract</name>
    <filename>a00117.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; ServiceAbstract * &gt;</type>
      <name>ServicePool_T</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a745746d58159763f0b4bff9bbd6d8eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FacServiceAbstract</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a54d294601ba12fdefca9fbefb85e83d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>abbf1a87216a930ff3e46eb0dc193bca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FacServiceAbstract</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a55dff4624f3dff5881f69e4b8a550a0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ServicePool_T</type>
      <name>_pool</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a55c5f500425b922980a920f49ce38bff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FacSTDAIRServiceContext</name>
    <filename>a00118.html</filename>
    <base>stdair::FacServiceAbstract</base>
    <member kind="typedef">
      <type>std::vector&lt; ServiceAbstract * &gt;</type>
      <name>ServicePool_T</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a745746d58159763f0b4bff9bbd6d8eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FacSTDAIRServiceContext</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>af2104dabafde6d416011ff5cc04be264</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>STDAIR_ServiceContext &amp;</type>
      <name>create</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>abd8c0c78c6086ed02ef77919f9117171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>abbf1a87216a930ff3e46eb0dc193bca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FacSTDAIRServiceContext &amp;</type>
      <name>instance</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>acac304c23099c46f6228b3a8b5245a68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FacSTDAIRServiceContext</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a915b8eab96f9e45a4f2fb5a09a542a8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ServicePool_T</type>
      <name>_pool</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a55c5f500425b922980a920f49ce38bff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FacSupervisor</name>
    <filename>a00119.html</filename>
    <member kind="typedef">
      <type>std::list&lt; FacAbstract * &gt;</type>
      <name>PersistentBomFactoryPool_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a7cb86827bfb1adc41b882d0d2e78b646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; FacAbstract * &gt;</type>
      <name>CloneBomFactoryPool_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac64f4e7a782799a56339111d4da45c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; FacServiceAbstract * &gt;</type>
      <name>ServiceFactoryPool_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a5a20856a1a96f935152f99b1da36b207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPersistentBomFactory</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3d4fecc5f18f808ac908874174c975ee</anchor>
      <arglist>(FacAbstract *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCloneBomFactory</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a0d4cc2e8a3443c915d820ec31d32cf00</anchor>
      <arglist>(FacAbstract *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerServiceFactory</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a44134bd1a9c2653f90ba6993754cc462</anchor>
      <arglist>(FacServiceAbstract *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanPersistentBomLayer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3cd0250f5c4cd31b597d71a872e8489f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanCloneBomLayer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ae200647f0c7808ae366625301114a3db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanServiceLayer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1f582650df105473ad4520914c52c141</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FacSupervisor</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1589370fa76b3631100f13d72e633408</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FacSupervisor &amp;</type>
      <name>instance</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aa613f6ad40a82185573a99435a538d26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cleanLoggerService</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a5654c658a127d29def9f472703b01116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cleanDBSessionManager</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a7f24fc44fb04e637c617b7aa268afc88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cleanAll</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ab7566d25da6ed87a10554ade61b00597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FacSupervisor</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a820534fbdb69f0e068a5852ec369c2ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FacSupervisor</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a6938d3b684da4870c1d0965a98a2f128</anchor>
      <arglist>(const FacSupervisor &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FareFamily</name>
    <filename>a00120.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>FareFamilyKey</type>
      <name>Key_T</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>aff51f445e94a356119054a5d9b5a3958</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a4cdad5093fa6cdda456313265d8f7ad8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a7061176e365885e44977c1833ade2990</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FamilyCode_T &amp;</type>
      <name>getFamilyCode</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>aae2cef067af303b25fa0f41af4e2cf45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a778906be59454a0fd4e3d83a157968df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FRAT5Curve_T &amp;</type>
      <name>getFrat5Curve</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>aeb8e6a9816fc597a370636f90d56834a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FFDisutilityCurve_T &amp;</type>
      <name>getDisutilityCurve</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a5c6b1b43b336b56f16ecb9d16421e804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MeanValue_T &amp;</type>
      <name>getMean</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a55d243d05a0efa6e32ef727c21124b45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StdDevValue_T &amp;</type>
      <name>getStdDev</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a1bb59c14c29971b69418e9f46aaa2005</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MeanStdDevPairVector_T &amp;</type>
      <name>getMeanStdDev</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a424aa07212bbd00c0e4bd8e9c2c95db4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrat5Curve</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a9e99889a5c198b06c135deaa8dd0d967</anchor>
      <arglist>(const FRAT5Curve_T &amp;iFRAT5Curve)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisutilityCurve</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a0b5bc5e152b26310b442f032dfbd83bc</anchor>
      <arglist>(const FFDisutilityCurve_T &amp;iDisutilityCurve)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMean</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a2aed202dbfc82988cc1cfe70e41296f1</anchor>
      <arglist>(const MeanValue_T &amp;iMean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdDev</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>ae6123a2176bad00614ec1efc3076b09c</anchor>
      <arglist>(const StdDevValue_T &amp;iStdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMeanStdDev</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a77bbd1699955780007e29a96b96800d9</anchor>
      <arglist>(const MeanStdDevPairVector_T &amp;iMeanStdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a3ac529603a0fcd09d5942deb4b792051</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a668f7e916daf97d81277176e5eecbc5b</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>ac8950a0da47477ab7d1fc25cac429631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a0c4680fbc274843a1da15f5dd8fe7781</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>affc7a3e40d23f0402dc2db5a94a4068f</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="variable">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>aa8ebdfc5eec9537de7763e2ada65023c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a763361f289dad6ffed770d1ac4a92c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>af0e1810d13ba357b03400440d82c8f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FRAT5Curve_T</type>
      <name>_frat5Curve</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a0461ec9416ebd69e987cf87ccfb97837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FFDisutilityCurve_T</type>
      <name>_disutilityCurve</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>ad4dc28cf4b9df756e63cfd14bc547901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MeanValue_T</type>
      <name>_mean</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>ab8463259ca9efcbf033e654486aba9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StdDevValue_T</type>
      <name>_stdDev</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>ac733a568e488eff000823ef206923840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MeanStdDevPairVector_T</type>
      <name>_meanStdDev</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>aba0d7d9f744c7386236f6900265327f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FareFamily</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a0880e635cb3a3ba96af61767bdb8f796</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~FareFamily</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a2ea396adb6a5d36cf63a634c4dc392b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::FareFamilyKey</name>
    <filename>a00121.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>FareFamilyKey</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a8ba9899eb6cb2475b31537b7e7a2400d</anchor>
      <arglist>(const FamilyCode_T &amp;iFamilyCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FareFamilyKey</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a65954870301616c8fdb927a4ad28b817</anchor>
      <arglist>(const FareFamilyKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FareFamilyKey</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a6bf29661a775d245f2505b6ac9e945d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FamilyCode_T &amp;</type>
      <name>getFamilyCode</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ab6779e0ceda56a86aecebebd9d1045c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a34debc0c3823c04ae314badc189f54ab</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a7197ba056545c43fee3e352130ddba9d</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a17b496746c165ff97551cf9591287f80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a82b1aa1ffe5b4cda842e9b26230b938f</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FareFeatures</name>
    <filename>a00122.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>FareFeaturesKey</type>
      <name>Key_T</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a830874e61e00f1beb424b171c4b673ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a3297b39467fcddc5bfe7e9a355754c0f</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ab3f1e920084ca9a83c8d70b251c905b6</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a67bb7cbd4dd7be4e8b169c96030da5ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>aaf1d56bd7032291d01930427954f7ca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ad5b0508b089cd26c503666dd0ee9566b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a3540e47befb0275c9dbec8333d1c78c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a3f1bd377524cbdc18caf05e0cc43ac40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TripType_T &amp;</type>
      <name>getTripType</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a0553905a5952d47d4435203a4c08d561</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T &amp;</type>
      <name>getAdvancePurchase</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a3c16e38dfff3e9f2a937fa8877ce5e90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SaturdayStay_T &amp;</type>
      <name>getSaturdayStay</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ad3b97247a55332b32b89eb502337d98f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChangeFees_T &amp;</type>
      <name>getChangeFees</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a2d70b733627a9c30e7d1dc2c76b8de0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NonRefundable_T &amp;</type>
      <name>getRefundableOption</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a1445d8ecf0544ec46955353757266b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T &amp;</type>
      <name>getMinimumStay</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a6052a754afd7971010b956345ad90128</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTripTypeValid</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a4c958211ca2bb211270760af6584051f</anchor>
      <arglist>(const TripType_T &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStayDurationValid</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a6d38679b47deaf25eb8eccf99c233dfd</anchor>
      <arglist>(const DayDuration_T &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAdvancePurchaseValid</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>acaaca05a1beba3ea0e9764f220cd8495</anchor>
      <arglist>(const DateTime_T &amp;iBookingRequestDateTime, const DateTime_T &amp;iFlightDateTime) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FareFeatures</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ae866f0ca8c7a087ee268b0cae1a74671</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~FareFeatures</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a505f0f4f5519116100b546e43ca60a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a71e457a7adb7671259813657839a316b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ae71d71fd66f7e16a8856a52f2beb5fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a8ed20495ae3cc9a785791401b34f1ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::FareFeaturesKey</name>
    <filename>a00123.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>FareFeaturesKey</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a0136f9b4670749a8f5943c92d4f46e12</anchor>
      <arglist>(const TripType_T &amp;, const DayDuration_T &amp;, const SaturdayStay_T &amp;, const ChangeFees_T &amp;, const NonRefundable_T &amp;, const DayDuration_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FareFeaturesKey</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a4d13db0dee8e085363692c8133fa6d0a</anchor>
      <arglist>(const FareFeaturesKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FareFeaturesKey</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a06f7a8e60e2ce8086d591b8cc9402ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TripType_T &amp;</type>
      <name>getTripType</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a3d667e741f57eaed4b2fdada3a08a089</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T &amp;</type>
      <name>getAdvancePurchase</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a22270b6f908529db6d836773a64aa7c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SaturdayStay_T &amp;</type>
      <name>getSaturdayStay</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ac358fb089969b6a88bcdccf82eba4328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChangeFees_T &amp;</type>
      <name>getChangeFees</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>aca7d3e1ebc9fc6c67b628e315f1a5cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NonRefundable_T &amp;</type>
      <name>getRefundableOption</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a064c4eca8572e80242c90ca059a86140</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T &amp;</type>
      <name>getMinimumStay</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a2c7c08b3efe57d972476ad9c9b21f688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a1cc92a4e27d9ad91565d2d7ff5bfe164</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a2d798566a9564bd4fafffa05d111e9f8</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a18a0953adca36d8831757e640b39fafd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::FareOptionStruct</name>
    <filename>a00124.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const ClassList_StringList_T &amp;</type>
      <name>getClassPath</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a3930480a62b0d5f2c6f526f41e1de0a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Fare_T &amp;</type>
      <name>getFare</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a31a74aeb7594cd2895542b530d2fd050</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Availability_T &amp;</type>
      <name>getAvailability</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ac91042a944e1687a13f8d937fd2afa83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChangeFees_T</type>
      <name>getChangeFees</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a8ac78c01e0154653197ca1db4d229077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NonRefundable_T</type>
      <name>getNonRefundable</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aac03f583b6c9c5af06c1a48e927c04fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SaturdayStay_T</type>
      <name>getSaturdayStay</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a281c64ce562d830d8dedda26b805267e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClassList</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad52bc7b3a095266d3063643477955c26</anchor>
      <arglist>(const std::string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emptyClassList</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a6047c03be006dd7976a3d867b5fbe124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFare</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a31eaede77cb2141234b79491bbaf4f29</anchor>
      <arglist>(const Fare_T &amp;iFare)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvailability</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a6b5696cdbb43e7db951016d50edb4203</anchor>
      <arglist>(const Availability_T &amp;iAvl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChangeFees</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad6197e30bceea67aa374fe4c78b177c1</anchor>
      <arglist>(const ChangeFees_T iRes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonRefundable</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>af056d13d788222a6f4f9b74d3903f02d</anchor>
      <arglist>(const NonRefundable_T iRes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSaturdayStay</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a9cb14b2c689dcaddfb1217615ab92c31</anchor>
      <arglist>(const SaturdayStay_T iRes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ac13eb0dbbb1e601a1ffe89bad5387d9c</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a5fb7b503378c420e9b81bf5c3ea33497</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a168f871d50ba2fa4e4b88c28d6ec698c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>display</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a9acc08af76b378eb590b3a3bc050c043</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FareOptionStruct</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad7c9ed7a8bb29235d992ba0b71c0be11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FareOptionStruct</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a065fbf26d44aa31640f1790adda31404</anchor>
      <arglist>(const std::string &amp;iClassPath, const Fare_T &amp;, const ChangeFees_T &amp;, const NonRefundable_T &amp;, const SaturdayStay_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FareOptionStruct</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>af313abdc8257316e434866f8084f5550</anchor>
      <arglist>(const FareOptionStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FareOptionStruct</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>adf5cf7f1e5dc1102299adc19393098f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::FFDisutilityCurveHolderStruct</name>
    <filename>a00125.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const FFDisutilityCurve_T &amp;</type>
      <name>getFFDisutilityCurve</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>af93df6c8b1fa9abed4a2adb3c4193308</anchor>
      <arglist>(const std::string &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCurve</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a435320b1802c501884951ff600492cb9</anchor>
      <arglist>(const std::string &amp;, const FFDisutilityCurve_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae2c9dfd8f26b9cfc761b6eadfcb0fb22</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a0c5b01260ee38de671f1fcb0d4c664a9</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>abd47ac14d8065ec8fcbf70adb8e6b3a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFDisutilityCurveHolderStruct</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a4063b64e3221fcac042e272cd491ad4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFDisutilityCurveHolderStruct</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aa0f13930e5849335e140734abc66196a</anchor>
      <arglist>(const FFDisutilityCurveHolderStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FFDisutilityCurveHolderStruct</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a4d2a1a239c6000fa34baa305cb5be87f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FFDisutilityFilePath</name>
    <filename>a00126.html</filename>
    <base>stdair::InputFilePath</base>
    <member kind="function">
      <type></type>
      <name>FFDisutilityFilePath</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a4df26444b4203cf373fe7a2b14b35c31</anchor>
      <arglist>(const Filename_T &amp;iFilename)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>af9e08933f4c33a13af30e187be9e8502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Filename_T</type>
      <name>_filename</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>add99acc274a1806b541841b27cce35a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FileNotFoundException</name>
    <filename>a00127.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>FileNotFoundException</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a3ad9862e5740c2ea59f9cfbe303e506f</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FlightDate</name>
    <filename>a00128.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>FlightDateKey</type>
      <name>Key_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac6121f38aa4f84a635fe2e1994d9ec93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a3532ba468837c84ba7550092eeb77f40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9d7ad7be913b1b398ffbc78360ed6582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FlightNumber_T &amp;</type>
      <name>getFlightNumber</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>af5b23cbf37f9b3aad21c6592de0c0773</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Date_T &amp;</type>
      <name>getDepartureDate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a70073c588b90c9ec84c8dbc31f5b62f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aedcbc20494af6c8c3ff9354c787f60f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a7ccdb125c696b8b74c351f24cb829774</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LegDate *</type>
      <name>getLegDate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>afc1db32d69e29471e6f1f0b53c634e67</anchor>
      <arglist>(const std::string &amp;iLegDateKeyStr) const </arglist>
    </member>
    <member kind="function">
      <type>LegDate *</type>
      <name>getLegDate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a2a3a5130f83dfbde6a28d1ed657e0f7a</anchor>
      <arglist>(const LegDateKey &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SegmentDate *</type>
      <name>getSegmentDate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a779d269ad7a3e35539284bd1f82c6202</anchor>
      <arglist>(const std::string &amp;iSegmentDateKeyStr) const </arglist>
    </member>
    <member kind="function">
      <type>SegmentDate *</type>
      <name>getSegmentDate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>abe13693a937198b6229c6a2a81cddee2</anchor>
      <arglist>(const SegmentDateKey &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a3b6f637b624ed10cbaa92cec6838ad38</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa1c39c29436b8d5d23de719f6278b93d</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aed22bc065017a49bfd3647c823ac619e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ad0b46f990baa9fe668d1b390e936f6e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a50eb23150c5f98b1422d05faa50082fa</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FlightDate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>af9ebd3911d1ea2a013301dba6ec27f86</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~FlightDate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a33cd0847c499c0749c5460d0eee01e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a0751a8f037a6be54c1ded1153414925c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aab94b00ea01c90081198a12c48fa1ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a0e56df6f57936b83a23467e9fe836474</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::FlightDateKey</name>
    <filename>a00129.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>FlightDateKey</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab35c8492326aab9016b5d5585dad33e2</anchor>
      <arglist>(const FlightNumber_T &amp;, const Date_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlightDateKey</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4da762881f05a59fd017435d36881a8b</anchor>
      <arglist>(const FlightDateKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlightDateKey</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>af62501b3c06bced7c6f464baf04b6bc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FlightNumber_T &amp;</type>
      <name>getFlightNumber</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a3a615b1bec4c5f297cc7da634e6eb11a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Date_T &amp;</type>
      <name>getDepartureDate</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a217bf7be9fda5e3e3230beeeb69a1180</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a38158909b7e69e72205a593d30a19234</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a3d351a7f5a792eea549e4bbe991f7163</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4ec869b4ce750e4c10124154fa3bd8cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8570ead88cee3d45b145a788f428fdb0</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FlightPeriod</name>
    <filename>a00130.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>FlightPeriodKey</type>
      <name>Key_T</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a4445d236138e3417d274e93422c03744</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ab9c6b212f5d3e9d3b262db2088cb5553</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a6d26f32cb17c75c5fda68a6e0e8f20d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FlightNumber_T &amp;</type>
      <name>getFlightNumber</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>af042f80790bc7c085339c0380d111844</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PeriodStruct &amp;</type>
      <name>getPeriod</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a8001db820a0c2ad84b10bc1beeb93e2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a3360a34e77430f22b959efbe7fa6b445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a441faaf54f150b33ec8e10c3b641fc2d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aaf03e28b8e7e399f4c03f13dd473290e</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a78ea9bf55b6317c2c43b008dad7569d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a8e71b4ebdce44dc40d7462075e406e4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FlightPeriod</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a1b73e06e54ab8bf613507454ee4057ec</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~FlightPeriod</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a55ca20306321258c66d79d3957bbb9b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a76d972cf421df54fb438ba8d91d2a9d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a5e3804d2c6225308d95bf37d1c93d06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ac7cfae988ecc2022381ca4615eb5417a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::FlightPeriodKey</name>
    <filename>a00131.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>FlightPeriodKey</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a9a9e5418a478fcd336996c1347320c13</anchor>
      <arglist>(const FlightNumber_T &amp;, const PeriodStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlightPeriodKey</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ad2573ad6e1a7886ac61c5e3fd8659d73</anchor>
      <arglist>(const FlightPeriodKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlightPeriodKey</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aab90e32d646bbeafb1cb90762529d71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FlightNumber_T &amp;</type>
      <name>getFlightNumber</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a98ae35968875fbcfea29d3066781f539</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PeriodStruct &amp;</type>
      <name>getPeriod</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a7dd05b12bf2fb4d2fac1279efb7a0b80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>af07160ba6ca39b9072ae4f1d6ecc5116</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>adbb2c8a4b3b687fd31e0760fc9967ab2</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a2d59fc48e08ab09cb34dd00af54217bb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FloatingPoint</name>
    <filename>a00132.html</filename>
    <templarg>RawType</templarg>
    <member kind="typedef">
      <type>TypeWithSize&lt; sizeof(RawType)&gt;::UInt</type>
      <name>Bits</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>aa0912a8f805308568ebd2609557680b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatingPoint</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a223158362fd04a1c21fd514699bc480d</anchor>
      <arglist>(const RawType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Bits &amp;</type>
      <name>bits</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a6b240b584668f5590c1e47108afdec33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Bits</type>
      <name>exponent_bits</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ae44ba56b6c843e9384d58d24b283308f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Bits</type>
      <name>fraction_bits</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>af2f11a2b43c1647b8b6bdd4a4389bc66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Bits</type>
      <name>sign_bit</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a1007ce80d456d1e8262749bdd83ee7e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a44265079d31ee49d60d05b5f662a7a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AlmostEquals</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>af6aab835c96f51ac4549e0e8a38f6767</anchor>
      <arglist>(const FloatingPoint &amp;rhs) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RawType</type>
      <name>ReinterpretBits</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a80c340111da59015517dde85bcc8966b</anchor>
      <arglist>(const Bits bits)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RawType</type>
      <name>Infinity</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>aa0cdd12e8007eea844d83757b531241a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>kBitCount</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>af2429a12aef6052e91b2d50df5800df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>kFractionBitCount</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>af29024bbbb5abcbaf8aabfc465f3bd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>kExponentBitCount</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a00f3d689988b1c00f3d8a98d3bc9c685</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Bits</type>
      <name>kSignBitMask</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a026944d92c195ce2c755dde816cd6b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Bits</type>
      <name>kFractionBitMask</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a4909a899f6cc1a1bdb7835cec3629a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Bits</type>
      <name>kExponentBitMask</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a590938e82e2f449c0557744a6c5619ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>kMaxUlps</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ad52b8184e122a8fe484f0d9633e960e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::ForecastingMethod</name>
    <filename>a00133.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_ForecastingMethod</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a32bde92a1f5bccf950917caa22371375</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Q_FORECASTING</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a32bde92a1f5bccf950917caa22371375abf8cc8788102e3f43f4eb9263c90fbc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HYBRID_FORECASTING</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a32bde92a1f5bccf950917caa22371375a98e6fd7ec3c3e78273f24976b4708827</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OLD_QFF</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a32bde92a1f5bccf950917caa22371375ad318dd0cece856559f16489e3dbc117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEW_QFF</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a32bde92a1f5bccf950917caa22371375af23c8382f0aaf8e26b0ea37c3073b2c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASED_FORECASTING</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a32bde92a1f5bccf950917caa22371375ad72e9e4410f634e052ac3a18d57c0746</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a32bde92a1f5bccf950917caa22371375a178d56878d8aaa7375fddaf94e146c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_ForecastingMethod</type>
      <name>getMethod</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>afa6c7aad113d4f2969d1488a0b4e02ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMethodAsString</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>aff2c9019c6420bfebde1bd72930410c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>ad37753af450d1ca7861bd95c6a192554</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a8a2148afde577fc0183ffcf75a50f24d</anchor>
      <arglist>(const EN_ForecastingMethod &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForecastingMethod</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a5b7593bbb32bc8089bcea4b8bfd4f6f9</anchor>
      <arglist>(const EN_ForecastingMethod &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForecastingMethod</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a015e288db2970dc006a1ead70910240a</anchor>
      <arglist>(const char iMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForecastingMethod</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>aa2cf08864987882b015f160e4ae160d1</anchor>
      <arglist>(const ForecastingMethod &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>ae0a650b6d4ec8347bbd2299546df1048</anchor>
      <arglist>(const EN_ForecastingMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getMethodLabel</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a1eccbe57a27cf423146cb39ca9f40c33</anchor>
      <arglist>(const EN_ForecastingMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getMethodLabelAsString</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>aa96c8f569c5d009289e905a60b9f9601</anchor>
      <arglist>(const EN_ForecastingMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a619209bb5d2773aacc97eb4b89892b6d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::FRAT5CurveHolderStruct</name>
    <filename>a00134.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const FRAT5Curve_T &amp;</type>
      <name>getFRAT5Curve</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a17b9f3a3dd4de366a531ed533fcaf62b</anchor>
      <arglist>(const std::string &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCurve</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a329340eb2442f29066a9ba19b11e72c2</anchor>
      <arglist>(const std::string &amp;, const FRAT5Curve_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>ab57bd13d12a3dd99422e0b67b50942f9</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a6a9e2619902513f0f126b07db05e4b92</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>ad42d832818ce099c2e0df3b14921000b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FRAT5CurveHolderStruct</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a1ddea9367f0f04e019718ed56b2d1883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FRAT5CurveHolderStruct</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a6d8cc5393a2ee5a5c8dc550b4846b488</anchor>
      <arglist>(const FRAT5CurveHolderStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FRAT5CurveHolderStruct</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a64df3fd6f66a09418bce6b1d164fe6b4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::FRAT5FilePath</name>
    <filename>a00135.html</filename>
    <base>stdair::InputFilePath</base>
    <member kind="function">
      <type></type>
      <name>FRAT5FilePath</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a7e1b9f408a3e9bacc24844215784630c</anchor>
      <arglist>(const Filename_T &amp;iFilename)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>af9e08933f4c33a13af30e187be9e8502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Filename_T</type>
      <name>_filename</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>add99acc274a1806b541841b27cce35a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::InputFilePath</name>
    <filename>a00136.html</filename>
    <base>stdair::RootFilePath</base>
    <member kind="function">
      <type></type>
      <name>InputFilePath</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a4566af279cf13fa2d19f2a5f8966e8da</anchor>
      <arglist>(const Filename_T &amp;iFilename)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>af9e08933f4c33a13af30e187be9e8502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Filename_T</type>
      <name>_filename</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>add99acc274a1806b541841b27cce35a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::Inventory</name>
    <filename>a00137.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>InventoryKey</type>
      <name>Key_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>adea3afc1a7dde6992f82c42dbc142831</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a7c06ef8ba2d736e5df342b35dd0d9598</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a9825594d93769024c0d98699008eee18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ForecastingMethod::EN_ForecastingMethod</type>
      <name>getForecastingMethod</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a05952aad6bed2a7c71ae4120eeb1d3d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnconstrainingMethod::EN_UnconstrainingMethod</type>
      <name>getUnconstrainingMethod</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ab604d68ef7509f65861ffcdbd3946692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PreOptimisationMethod::EN_PreOptimisationMethod</type>
      <name>getPreOptimisationMethod</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a1c787fc80ec6c9ffb7b818d2056fc2af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OptimisationMethod::EN_OptimisationMethod</type>
      <name>getOptimisationMethod</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a9ae481460089051c8b1fd86ac4ee00df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PartnershipTechnique::EN_PartnershipTechnique</type>
      <name>getPartnershipTechnique</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a517ca71e9d42703c35978bae5235aa63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>af8cf5ec86e00a8cc8129a702f3dc1ca3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a6a75af65245e564463fa682605d6f007</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FlightDate *</type>
      <name>getFlightDate</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aa25809f18a15cc40af441315fd26471e</anchor>
      <arglist>(const std::string &amp;iFlightDateKeyStr) const </arglist>
    </member>
    <member kind="function">
      <type>FlightDate *</type>
      <name>getFlightDate</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a658b81ec513819a7a030f2fc328b2bab</anchor>
      <arglist>(const FlightDateKey &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>AirlineFeature *</type>
      <name>getAirlineFeature</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ab935d93fa6fbaa574d185bb35fb742e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a7b752a0c1f3019890ba434b47a476232</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a570ab7c261b925615ad0329fabfaecb7</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>acd44391ae4ba3c9fb0625b35022d4f53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a20d82f3992863ef21dbd9d8efcd3c032</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aa80da49f2c8a7810706773db7668dbee</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Inventory</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a7ec40a605351c62f869b369f5b100718</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~Inventory</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a9f64c344b70bea262ab66e3b9cedac82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a1dd53ba646cabc0f2902294ff968f46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ade497f6c09318a175d155c57eadc0c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirlineFeature *</type>
      <name>_airlineFeature</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a032f42963f349573408ba83deb8541e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a3ec0fb3bad5f7ed395407000e0645873</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::InventoryKey</name>
    <filename>a00138.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>InventoryKey</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a2995e558dfe09ac3d18cc291565a633f</anchor>
      <arglist>(const AirlineCode_T &amp;iAirlineCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InventoryKey</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a57cf3c62c906eaf103e0e4238c2cfc24</anchor>
      <arglist>(const InventoryKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InventoryKey</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a2c4e723df6939db84c46f5b1eeea9d09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a0339229343b84f1c78ce7c1745c85070</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a9112f483f2be93509c601d8c52cd0e3a</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a790ada6a11b267437b8d5afe9aced350</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ab603d100bca2f2d1b31bd8b2c56f6fa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ae6cde769e8ceef7daffb7f941e789505</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::JSonCommand</name>
    <filename>a00139.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_JSonCommand</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0e47b3c9087e33405846c312773fe35d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIST</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0e47b3c9087e33405846c312773fe35daa5e5a444ecd3f9e726c7e6cb13958407</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLIGHT_DATE</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0e47b3c9087e33405846c312773fe35da65815299846bdad387d71db92b3d7264</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVENT_LIST</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0e47b3c9087e33405846c312773fe35da1bc83eff8ce711d32436ad16bacd6795</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BREAK_POINT</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0e47b3c9087e33405846c312773fe35dafb8a459561f97ff3544f7117cc53ce85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RUN</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0e47b3c9087e33405846c312773fe35da5c48e9f72ddb689a1360a53527613d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESET</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0e47b3c9087e33405846c312773fe35da901603faeee529c86fb72ef3b7a9e11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0e47b3c9087e33405846c312773fe35da8445d3bf1394fb3cfc61d78af2d7f2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONFIG</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0e47b3c9087e33405846c312773fe35dafbd173a72d7ef900fa268d9cee939e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0e47b3c9087e33405846c312773fe35dafce2561c7736a60ee96da6301bcfcfe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_JSonCommand</type>
      <name>getCommand</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ad0f374fed0cd568ff74d51b678727699</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ae2ba22844f449493eef4a2f61f8c4d71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ac412de74418abab240238b3b3b1da24c</anchor>
      <arglist>(const EN_JSonCommand &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JSonCommand</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ad492f2ac7dc505d1d95f943020dcfa8d</anchor>
      <arglist>(const EN_JSonCommand &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JSonCommand</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a5e5574171fef96e9fa8839835a14e0e1</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JSonCommand</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a7c068e9d81169285571cac01d848cda1</anchor>
      <arglist>(const JSonCommand &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EN_JSonCommand</type>
      <name>getCommand</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a7627f40debdbc4405b696a62b4698f63</anchor>
      <arglist>(const std::string &amp;iCommandStr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getLabel</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a741401d11b6e5cc64a4732f24383cc7d</anchor>
      <arglist>(const EN_JSonCommand &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a4f5aa0d94d111e4351a31886ee2ea00a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::JSONString</name>
    <filename>a00140.html</filename>
    <member kind="function">
      <type></type>
      <name>JSONString</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a63b9dd18086995e7511ce6cfa25dfe03</anchor>
      <arglist>(const std::string &amp;iJsonString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JSONString</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a34189a7609498adbe014ea49354153c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JSONString</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a20d7cc41442debddbb52da641d8954ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getString</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a3c49052696e09c04aa5f9c3b2452a924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_jsonString</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a8d4c82e7a2ea4a673d027ab0547cedfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::KeyAbstract</name>
    <filename>a00141.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>toStream</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ad9318a9f273cb8ef22d0921ec4d9b515</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a4e9cc6f20637446d2967edf912bceea3</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a34218466c0685a92e37264f0adb3448c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyAbstract</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a7a7cbe251a3b4dfb19d01efcaeddc7c8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::KeyDuplicationException</name>
    <filename>a00142.html</filename>
    <base>stdair::ParserException</base>
    <member kind="function">
      <type></type>
      <name>KeyDuplicationException</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a3864cbd97e785af0c8c218ce30054d8d</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::KeyNotFoundException</name>
    <filename>a00143.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>KeyNotFoundException</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abb8053fa1cf0c76e51197c90420c0190</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::LegCabin</name>
    <filename>a00144.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>LegCabinKey</type>
      <name>Key_T</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aad27f27ccba3245dd252f9a494d10971</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab4a09570f1153b4bbae8109edabb948b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5c135d4ae996963b68367476a6238d46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T &amp;</type>
      <name>getCabinCode</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab504472e28960733beb70e4cba8291fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MapKey_T</type>
      <name>getFullerKey</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6e2472daa228b93b3829f7127522152f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a95b25a4845c3d39f52b952fed0c92d99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCapacity_T &amp;</type>
      <name>getOfferedCapacity</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac0524e171b882a72570b18700810c024</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCapacity_T &amp;</type>
      <name>getPhysicalCapacity</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a86bdd26d14ed9aa49c0443aed80fa848</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T &amp;</type>
      <name>getSoldSeat</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac5b1bd435c5f64dc926ef95c4c3f7b88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CommittedSpace_T &amp;</type>
      <name>getCommittedSpace</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8486d0e12c4ad2aa6faf7653f63c792b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Availability_T &amp;</type>
      <name>getAvailabilityPool</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0830b680dba0d3580f4db4b68874b349</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Availability_T &amp;</type>
      <name>getAvailability</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7988b324ad0a3e015b05735250f5f845</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BidPrice_T &amp;</type>
      <name>getCurrentBidPrice</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0a415e1ffec5cfb104890915a504d2f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BidPrice_T &amp;</type>
      <name>getPreviousBidPrice</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4226596f33f0ab26f68aaf017f8e6c5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BidPriceVector_T &amp;</type>
      <name>getBidPriceVector</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab857118968c0aa8ff5980adae0a7a8d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CapacityAdjustment_T &amp;</type>
      <name>getRegradeAdjustment</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae2d59d7db28f02822613ec44822892db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AuthorizationLevel_T &amp;</type>
      <name>getAuthorizationLevel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae251820f5cfe7f2f41c115b6342481d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UPR_T &amp;</type>
      <name>getUPR</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5c746e883f27d5fcda4034ccd3ea41d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Availability_T &amp;</type>
      <name>getNetAvailability</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5b83ce1e4dd548c02bce1caffaad5964</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Availability_T &amp;</type>
      <name>getGrossAvailability</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa2bdb70650961288c872009d26adcb82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OverbookingRate_T &amp;</type>
      <name>getAvgCancellationPercentage</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8978d6deef9c818691019b6191b3f487</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T &amp;</type>
      <name>getETB</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a56035b76092e41734485f74e8c5f04a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T &amp;</type>
      <name>getStaffNbOfSeats</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a28012b019628b9119dea38da9cd202cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T &amp;</type>
      <name>getWLNbOfSeats</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac7dbb4adde317ac9a8bcf80c27310078</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T &amp;</type>
      <name>getGroupNbOfSeats</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aad864c720247ee70eec74c78895f13de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VirtualClassList_T &amp;</type>
      <name>getVirtualClassList</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2cc8afc3bb34998678aaa727d4a2e7c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BidPriceVector_T &amp;</type>
      <name>getBidPriceVector</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a022143a19f33db470b13bb780dd3b095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const YieldLevelDemandMap_T &amp;</type>
      <name>getYieldLevelDemandMap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac09a38539daf51d8f09e20cbe1124e30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCapacities</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aaeec1d5538acd68865d96640ae9bbed5</anchor>
      <arglist>(const CabinCapacity_T &amp;iCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoldSeat</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a359d08191c654481da12eca34cd9f728</anchor>
      <arglist>(const NbOfSeats_T &amp;iSoldSeat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommittedSpace</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6d1be5b7dffa3e5004a2522ed1981998</anchor>
      <arglist>(const CommittedSpace_T &amp;iCommittedSpace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvailabilityPool</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a123894ef6b8caf8dc086dd3b875e0c9e</anchor>
      <arglist>(const Availability_T &amp;iAvailabilityPool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvailability</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab49040b39f7500f3060cd75cb25032c1</anchor>
      <arglist>(const Availability_T &amp;iAvailability)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentBidPrice</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa8cc37d8fc425f00cd6006147d7d6308</anchor>
      <arglist>(const BidPrice_T &amp;iBidPrice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreviousBidPrice</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a681a8ae51ed97c8b21e2057b47194866</anchor>
      <arglist>(const BidPrice_T &amp;iBidPrice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePreviousBidPrice</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2c69cd7d3c0a3e431a05d5213df4747b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegradeAdjustment</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a52700ac853b10674abf79c6fe8a4f7df</anchor>
      <arglist>(const CapacityAdjustment_T &amp;iRegradeAdjustment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAuthorizationLevel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a36f1c5b79d1bc06859ff8c1ccd5d1579</anchor>
      <arglist>(const AuthorizationLevel_T &amp;iAU)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUPR</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9d6ff04eae7407560878fd9bb955e3b8</anchor>
      <arglist>(const UPR_T &amp;iUPR)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNetAvailability</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab74e11e22ea7f537e687f0c590f8ad4b</anchor>
      <arglist>(const Availability_T &amp;iNAV)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrossAvailability</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0549fe15e29326675226cc651b3833b3</anchor>
      <arglist>(const Availability_T &amp;iGAV)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvgCancellationPercentage</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad4f1dc91c1932305dca19d72de065385</anchor>
      <arglist>(const OverbookingRate_T &amp;iACP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setETB</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a3d1c76ece6a7295319b02b38beb02804</anchor>
      <arglist>(const NbOfSeats_T &amp;iETB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStaffNbOfSeats</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a88371b9460504a4e01ef10b899f3431a</anchor>
      <arglist>(const NbOfSeats_T &amp;iStaffSeats)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWLNbOfSeats</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0bfba47c2497f080a10aa5a4941f0292</anchor>
      <arglist>(const NbOfSeats_T &amp;iWLSeats)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupNbOfSeats</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a28fe5938b8c50286f5f6ef4a283494c5</anchor>
      <arglist>(const NbOfSeats_T &amp;iGroupSeats)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCurrentBidPrice</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7e1e49a668d3ab62ff33768fb3f1c706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af2ba0f9b03686f7a6bdfbf817dbbf5c6</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6c1c7d3a81778076c957f6efb3fa26c5</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4925315c44157e16c6e28791ba4065fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0a868eb47c8466f74ffc4a39a3ee29da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>displayVirtualClassList</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0cac5a4eca9e38f43fb1a4f425296c30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFromReservation</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac5ceef2a8753e7e1fa118d2539632faf</anchor>
      <arglist>(const NbOfBookings_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVirtualClass</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>abf40e2e3cd37d5f6e01b197af9dd599a</anchor>
      <arglist>(const VirtualClassStruct &amp;iVC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emptyVirtualClassList</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7c6ef74dfe54a53803dfbbc82d2a286d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emptyBidPriceVector</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af933f6c01be70ab5f6bba08f095d615e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDemandInformation</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab14eaf2f2cec01b26e2e540985238788</anchor>
      <arglist>(const YieldValue_T &amp;, const MeanValue_T &amp;, const StdDevValue_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emptyYieldLevelDemandMap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a26609da4641c4ec2479f930ac6c40174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>CapacityAdjustment_T</type>
      <name>_dcsRegrade</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af8652c3c924e909a5730c58da2d8b2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AuthorizationLevel_T</type>
      <name>_au</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab34fdf0719a4caed787d058b834e5777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UPR_T</type>
      <name>_upr</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a148c9320f8fdf24c1ac0355239bb39e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Availability_T</type>
      <name>_nav</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a51610e13b96a5a34098d2050699a58a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Availability_T</type>
      <name>_gav</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6f66c3b098ca01cab5fc8bb0fc98ae4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OverbookingRate_T</type>
      <name>_acp</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a67cb40caed7f2cab47525123fa9808f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NbOfSeats_T</type>
      <name>_etb</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae5dc5b6f4cbb07e98acc2946c78e02f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NbOfSeats_T</type>
      <name>_staffNbOfBookings</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a13a17b0352140ed642fbae20d539b41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NbOfSeats_T</type>
      <name>_wlNbOfBookings</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a95a24c7028b268fd9f38ac7a0db0c4e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NbOfSeats_T</type>
      <name>_groupNbOfBookings</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4ff7fcebf66c7196cbbbdbbe9bd6da43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LegCabin</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2aa10d6d2ced4d57159f56b01f495706</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~LegCabin</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a15255a4e32c6b8799def734bbd20ed82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aea76ea5d8924487c831f37b4f90fef4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae28c9f7352f16b8d967c7f0335cde1bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>acb0848b63ce970eb46f1936adc81f4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CabinCapacity_T</type>
      <name>_offeredCapacity</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ada9e8a1d43e4c7972753e637d754aa15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CabinCapacity_T</type>
      <name>_physicalCapacity</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a30ce5fff287887c2621597363fbbc7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfSeats_T</type>
      <name>_soldSeat</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6d37fc253df716d215dd1837a1fb8b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CommittedSpace_T</type>
      <name>_committedSpace</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>abd793d988c13fe84d3b7dd1d780d6f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Availability_T</type>
      <name>_availabilityPool</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a94f216ffdb82d1aada8aeed03ea85d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Availability_T</type>
      <name>_availability</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aecd687af4cd189b75a4ebe85cddbcd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BidPrice_T</type>
      <name>_currentBidPrice</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a86147cce77caa658f7a4ae1e269a6396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BidPrice_T</type>
      <name>_previousBidPrice</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a20f0a24e77efbcc835398e1c62ca0950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BidPriceVector_T</type>
      <name>_bidPriceVector</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2177d85bce5ee0bbb9ffca2bc279b82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VirtualClassList_T</type>
      <name>_virtualClassList</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a699e58b5861e87da6dfee88c049fd94c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>YieldLevelDemandMap_T</type>
      <name>_yieldLevelDemandMap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a3a14b0e17132bf199bc1d7604f637d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::LegCabinKey</name>
    <filename>a00145.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>LegCabinKey</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>af71222476efba5cc9cfc2b65569da814</anchor>
      <arglist>(const CabinCode_T &amp;iCabinCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LegCabinKey</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>af1eb727a324c0a1cc72c0f64e401130c</anchor>
      <arglist>(const LegCabinKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LegCabinKey</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ac25f3a75a45d9eb13faec70485589baa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T &amp;</type>
      <name>getCabinCode</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ab750c8347a96e8fa76a7a1d898f13bd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a2e95a1f6e875d75b1a1cb87a0611c3db</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a7a0f56a865822a2c6237bbd17d593039</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a3f7ba348b88f5d500d4b3f3f12b197bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ac6727ae33b597d3f5c093ef0eb3cfbb1</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::LegDate</name>
    <filename>a00146.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>LegDateKey</type>
      <name>Key_T</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>afa9ae2d7a0906e17e4c7ef8dd1271469</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a84bb91d10f7879ffc4509e02d3c7753a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ab1f43f459bed67cf310f2525fdc0760c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getBoardingPoint</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a31a8eb6e175a7b8ca3ab236375535afb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa548875a51298ceeb3b527127b9f37b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a834925b854c6a6f51c69d1418486603c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LegCabin *</type>
      <name>getLegCabin</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a85fa09af366e5cd24795bf018edcf0a9</anchor>
      <arglist>(const std::string &amp;iLegCabinKeyStr) const </arglist>
    </member>
    <member kind="function">
      <type>LegCabin *</type>
      <name>getLegCabin</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a6deff90d2ce006f141452c4f1aeb0bac</anchor>
      <arglist>(const LegCabinKey &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getOffPoint</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ace8a77cf4dc8ade362c6f98acd112168</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Date_T &amp;</type>
      <name>getBoardingDate</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a2b9825d9f464fb06765e08d7e973e089</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getBoardingTime</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a81167647cc1294d65c88d55218a4fec3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Date_T &amp;</type>
      <name>getOffDate</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a846684f7c331765ba2c676a3b348ed19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getOffTime</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aeb2cb5b33c6f5ae3be622bc2177f3ae0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getElapsedTime</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a7948eca249ce9381540d5d42f78a0ce9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Distance_T &amp;</type>
      <name>getDistance</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a95804c7fdece397790af7f2d7de2d0a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCapacity_T &amp;</type>
      <name>getCapacity</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a9bb15adc28ce58a20f6e065e8973f90b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DateOffset_T</type>
      <name>getDateOffset</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aea4061dcf3dbe2eb41b1dd81bbc38e00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>getTimeOffset</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a7fd370ce3dfb596ddb7f8752bbfdc7f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffPoint</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a689f348038de9149aee23a59cdf7f7ce</anchor>
      <arglist>(const AirportCode_T &amp;iOffPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoardingDate</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a5b07211b6fddc12283267b674a8509a3</anchor>
      <arglist>(const Date_T &amp;iBoardingDate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoardingTime</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a79bd8ee7888b220ec5b4d760be1735c6</anchor>
      <arglist>(const Duration_T &amp;iBoardingTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffDate</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a45fb932c54667c40a147b1f42cfdd66b</anchor>
      <arglist>(const Date_T &amp;iOffDate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffTime</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a52a20c1cb3ac5e8456817c7b0b1baf1d</anchor>
      <arglist>(const Duration_T &amp;iOffTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElapsedTime</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a37dab9dd3102f00a5cb148b0c9d0b2ab</anchor>
      <arglist>(const Duration_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOperatingAirlineCode</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ac665d94a56b8dcb007355eb6736cfb0e</anchor>
      <arglist>(const AirlineCode_T &amp;iAirlineCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOperatingFlightNumber</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a11242f83003ae60fc6d6cc4b08dafbf3</anchor>
      <arglist>(const FlightNumber_T &amp;iFlightNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ab87736cdf2ee29325eaf611fd545c6c2</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aaa7376236496ba78ca5b787097c72230</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a38d47c3586b92100e4fa6f3f0d6dc894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>abeb8e3568ea9e755cd8b31a1d50868ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeRoutingKey</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a72a98e7e5ed31818f27fe9a319f1aa8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LegDate</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a05ab43f912efa064bc30bfed2c389911</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LegDate</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a12113d23e144460d83b57088398ef0ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa18c134c473cb7be8e1ef0e888405486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a96aef2346ff2bb8fb7cf90ba577b532d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a751c821685595f83f6d3dfd6f04e9c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirportCode_T</type>
      <name>_offPoint</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad8f622624065181e2ac27b5562ab0bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Date_T</type>
      <name>_boardingDate</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a50b3671709360ffea8265965f2f601ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Duration_T</type>
      <name>_boardingTime</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a51e1e1ee0fe9cc76f6db3829d7f50c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Date_T</type>
      <name>_offDate</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a802350b8529a03fb5659fa697593b3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Duration_T</type>
      <name>_offTime</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad45e5c7ed3301a90dbbc98780eefccff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Duration_T</type>
      <name>_elapsedTime</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ae84aae40e608af5c8d3806b3cf300825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Distance_T</type>
      <name>_distance</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ab4ad4e1cba8c7737ed40f49434fd0635</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CabinCapacity_T</type>
      <name>_capacity</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a1efb106a613b1368815b31fff2007403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirlineCode_T</type>
      <name>_operatingAirlineCode</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a6605e2b0150283a345c9f89a51856896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FlightNumber_T</type>
      <name>_operatingFlightNumber</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ab48b87c8436b3268b895ba6da15e02ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::LegDateKey</name>
    <filename>a00147.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>LegDateKey</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a5d7df6fd2118909761acec5ab96023a7</anchor>
      <arglist>(const AirportCode_T &amp;iBoardingPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LegDateKey</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a4c0c6ee7b9e3f3fea7c4caa4992af61f</anchor>
      <arglist>(const LegDateKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LegDateKey</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af570a0151969fb5b304ab33ff341ee6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getBoardingPoint</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aca80a066ea5fe207b3f3d460d3b3bf86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a4d999a6a02d75fc59a717a61ec03c536</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ab33109d021cbe31c8745fd58dd003300</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>acc1702172120a48112bf45451497c19c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::Logger</name>
    <filename>a00148.html</filename>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>af0a2e21eaf192bc1e0a46e7807c6e43e</anchor>
      <arglist>(const LOG::EN_LogLevel iLevel, const int iLineNumber, const std::string &amp;iFileName, const T &amp;iToBeLogged)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Logger &amp;</type>
      <name>instance</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a7c9bf2625c3b510b8c4439a066c0ffde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacSupervisor</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a8407e264b8851af447183bb0a78f5688</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>STDAIR_Service</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a1ed04ed1a9fc939ddb7831ca0dd401e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::MemoryAllocationException</name>
    <filename>a00149.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>MemoryAllocationException</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a60c62425f8c6d486c4125ea19c233687</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::NestingNode</name>
    <filename>a00150.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>NestingNodeKey</type>
      <name>Key_T</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a78d98ecb03a92025f53c28ddbaffdbbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a1d16770c6b0c9c96bd56c407025e0ebb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a5a8342511d0a1a568a27f6cb6b724238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>af573c7e4c84c4fcf553df8552d5064fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Yield_T &amp;</type>
      <name>getYield</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>abd958ed868aada08b7965a13882d4eeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYield</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>acb90f40acc59d055e9f360d2e483d6ed</anchor>
      <arglist>(const Yield_T &amp;iYield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a47fb36d1b18e6a36e31977e389b926b3</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a2ec305224b609e754ceb0c93dee4fa2a</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>aef20bb5743a1cf70caa70422c43f6670</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a1243e53563debe0043de3c6d4ea8f00a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>af062f26e79e7d749c3454a82986733aa</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NestingNode</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a28f49cbaae563feb325e31f67e8f1686</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NestingNode</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a061226226d79885fadfe0c9237a7b4de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::NestingNodeKey</name>
    <filename>a00151.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>NestingNodeKey</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a67120cc764b07c0c38317e10fe98a144</anchor>
      <arglist>(const NestingNodeCode_T &amp;iNestingNodeCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NestingNodeKey</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>af5f574ff07ccaaea8429662335eeb994</anchor>
      <arglist>(const NestingNodeKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NestingNodeKey</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a47cd51903be6996b90bb6b57e871ec5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NestingNodeCode_T &amp;</type>
      <name>getNestingNodeCode</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a9db36ac965dec74e071c694676615616</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a299d247001f3e2224f56fb4592994f14</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>afd557918903ed9643e5056a0e877f4cf</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a7ad7c7fd7cc937ac29f5847d459539bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a413b13faa29a00f813a04978339feef4</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::NestingStructureKey</name>
    <filename>a00152.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>NestingStructureKey</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>acc905814ba7e56b8757b52d64f20d68c</anchor>
      <arglist>(const NestingStructureCode_T &amp;iNestingStructureCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NestingStructureKey</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>ab359fc908ada2fac6e0eed3e99f1985f</anchor>
      <arglist>(const NestingStructureKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NestingStructureKey</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a6cbe91094e2b954aa0c118bdef855eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NestingStructureCode_T &amp;</type>
      <name>getNestingStructureCode</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>aed854ca9a3d0751b5097c6ff29db810a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>afec722e51563d3652a7de59bfa042d22</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a94ab905e862392968f856fe477dd3e7d</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a9b749a57130e5b3baf08ddb15fb8ae57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a821d51923cb3f5682f718071f2bafa55</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::NonInitialisedContainerException</name>
    <filename>a00153.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>NonInitialisedContainerException</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a71d27a807c6b565c1a8e44a175fbb6a4</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::NonInitialisedDBSessionManagerException</name>
    <filename>a00154.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>NonInitialisedDBSessionManagerException</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a261fa8dfe591c422a855ec5175d2c9a4</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::NonInitialisedLogServiceException</name>
    <filename>a00155.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>NonInitialisedLogServiceException</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aea33b794615b133d50dc54fa1023239a</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::NonInitialisedRelationShipException</name>
    <filename>a00156.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>NonInitialisedRelationShipException</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a1f89a8adbb6d21f7ba36bcd92f3857e0</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::NonInitialisedServiceException</name>
    <filename>a00157.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>NonInitialisedServiceException</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a281234274b6465c5d0559bfe9597b744</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::ObjectCreationgDuplicationException</name>
    <filename>a00158.html</filename>
    <base>stdair::ParserException</base>
    <member kind="function">
      <type></type>
      <name>ObjectCreationgDuplicationException</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>aa0a7cf5a729e7c291261618d9f0ad399</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::ObjectLinkingException</name>
    <filename>a00159.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>ObjectLinkingException</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a5ae28629320b16f70c1220e6301aa9f5</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::ObjectNotFoundException</name>
    <filename>a00160.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>ObjectNotFoundException</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a8d2fcb5070b1629ea40a5407164c8b74</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::ODFilePath</name>
    <filename>a00161.html</filename>
    <base>stdair::InputFilePath</base>
    <member kind="function">
      <type></type>
      <name>ODFilePath</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>ac97c198a74db0bcbf925bf1b05bc4c9b</anchor>
      <arglist>(const Filename_T &amp;iFilename)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>af9e08933f4c33a13af30e187be9e8502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Filename_T</type>
      <name>_filename</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>add99acc274a1806b541841b27cce35a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::OnDDate</name>
    <filename>a00162.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>OnDDateKey</type>
      <name>Key_T</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a6f5795ab498b37e1ae834e5371fc03b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>acc591ad286d280566bb0135e2fed5e11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a381342bb1b0c927fead2f548b8fc5712</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a86534a46c2bec264c3d4346bf9a0b3cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const stdair::Date_T</type>
      <name>getDate</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a8e9044b16901a30a44c4060dc834064b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const stdair::AirportCode_T</type>
      <name>getOrigin</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a92dc06814015160e48a6fe3541755d5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const stdair::AirportCode_T</type>
      <name>getDestination</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a155fc4d802684890058173ca5d6480f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a36b806c321c8a7ff8380b813093eacd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringDemandStructMap_T &amp;</type>
      <name>getDemandInfoMap</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a82ef879fabb39f440fdf5428a7c1cf2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinForecastMap_T &amp;</type>
      <name>getTotalForecastMap</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a6bb43db2791cda96b489232b777d2f11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const WTPDemandPair_T &amp;</type>
      <name>getTotalForecast</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>acda51b64e4ab47ba5dee8ca6d532028d</anchor>
      <arglist>(const CabinCode_T &amp;iCC) const </arglist>
    </member>
    <member kind="function">
      <type>const CabinClassPairList_T &amp;</type>
      <name>getCabinClassPairList</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>acfaef213ae34acd57b2972379959fc95</anchor>
      <arglist>(const std::string &amp;iStr) const </arglist>
    </member>
    <member kind="function">
      <type>const short</type>
      <name>getNbOfSegments</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a8360dd519399a7b53a39019e6fe2d512</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDemandInformation</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ab7d9f470a871c7583ea7f0517c69598a</anchor>
      <arglist>(const CabinClassPairList_T &amp;, const YieldDemandPair_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalForecast</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ade30cf0a9be2b779fac3e05824012851</anchor>
      <arglist>(const CabinCode_T &amp;, const WTPDemandPair_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a27b62bbef1b816a98a4ac0fa9420ec83</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>af8798c90d26b8a6ef789caeca2a25b5e</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>aab3ec2aa3c57b5656f810ef952986fd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a1bdcd6a6c421eb0108bce123e5cc4125</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a6c8c0e92c2d9a667289f84b2cf29dadc</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OnDDate</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a21b55da0a71321670ac8f5cb900292fa</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~OnDDate</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a8860cda92d04ccc41e323172cb23892e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ac00fdca9bc1cd7ce490e9665349c4c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ae57619b3e731498a01a28e56792cc4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a15cc4678babc3e565746cf340ea3d60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringDemandStructMap_T</type>
      <name>_classPathDemandMap</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a46e6bfdfb63cbf211ac19c6f3971daf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringCabinClassPairListMap_T</type>
      <name>_stringCabinClassPairListMap</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a1f415c44a4b6a0031812e5a28a212b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CabinForecastMap_T</type>
      <name>_cabinForecastMap</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>aea7e06c28a0b40b12afe54ef69761fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::OnDDateKey</name>
    <filename>a00163.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>OnDDateKey</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a892c7134fda94f4f7d201b32d2327209</anchor>
      <arglist>(const OnDStringList_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OnDDateKey</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ac7e4323da534251c8369932cf6d321a5</anchor>
      <arglist>(const OnDDateKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OnDDateKey</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a87c2b7ff61e92647b5143ce3b510a45e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>getDate</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a280c397d2045ef554e2249a0cdf60d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>getOrigin</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a26be0a28aee293c1fcd71d26eed017b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>getDestination</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ac8d3ec00b3eed9e849d34aaecba7d4af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const short</type>
      <name>getNbOfSegments</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>af0fd4a725e55b04f1c24fda3ea9b0f38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a6a3b5342c3e81b58e24e9cd8ffe1cf8a</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a4312ca8fe99881cff8bd646e518d022d</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a801a7de0127b1ff165803aa6625acb57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a419b622a947ec9b2b54c40e135b3d5d2</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::OptimisationMethod</name>
    <filename>a00164.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_OptimisationMethod</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a42f366a5882ff38779ab27886f72efe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEG_BASED_MC</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a42f366a5882ff38779ab27886f72efe7a8f76c14154c2e4c45623be652cd2d0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEG_BASED_EMSR_B</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a42f366a5882ff38779ab27886f72efe7a7055998b170f4f7c7a88c65cbbd2803a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a42f366a5882ff38779ab27886f72efe7a5545b5d0b85e65b2411e683ccdfb845c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_OptimisationMethod</type>
      <name>getMethod</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a7b05e4076b04113fb5f8a81f735e81fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMethodAsString</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a9948e19bbca3d7238a8daa2ebfead5b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a974b5db1e22d460e9b4efa608e3c21c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a514ea69f713f9e26c3173a4c8009a5cb</anchor>
      <arglist>(const EN_OptimisationMethod &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimisationMethod</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>afe046fde4a42b1e36861ae2cc74bb42f</anchor>
      <arglist>(const EN_OptimisationMethod &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimisationMethod</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a05434c02a218da5a2cb66a7f691730f1</anchor>
      <arglist>(const char iMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimisationMethod</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a4d47a19c16592098fd593ad2ab87270a</anchor>
      <arglist>(const OptimisationMethod &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>aec1840d85665c7e35a3002d23d0e86f2</anchor>
      <arglist>(const EN_OptimisationMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getMethodLabel</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>acefb0a5ca5988042a1112e1b7e9d9c6e</anchor>
      <arglist>(const EN_OptimisationMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getMethodLabelAsString</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ae34e8b916dc994386e887b6462d85589</anchor>
      <arglist>(const EN_OptimisationMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>afd65970ffc0962c65ab6854c4159417e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::OptimisationNotificationStruct</name>
    <filename>a00165.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getOrigin</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a0640e7636fbe27317eafc5d68f6765f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getDestination</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a9529637460b389e6449994d46e96c23c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CityCode_T &amp;</type>
      <name>getPOS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ad53ff63e082345d7b9c586fc1dd8919d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Date_T &amp;</type>
      <name>getPreferedDepartureDate</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ad0bf78556d48e5078d8cc357a7fc8adf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T &amp;</type>
      <name>getNotificationDateTime</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a6588b5efd3741833eb920c9b32a85bbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T &amp;</type>
      <name>getPreferredCabin</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ab2c9c123751a2a0972c78b18da48f5c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T &amp;</type>
      <name>getPartySize</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a74ea9facc0df6fdda386919eff02b46f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChannelLabel_T &amp;</type>
      <name>getOptimisationChannel</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a55222d7e2e9043384c2199a6e1b92e6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TripType_T &amp;</type>
      <name>getTripType</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a00afde7a08633028f64ea0c57e698943</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T &amp;</type>
      <name>getStayDuration</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a5bcb17a1029c3268f273a8d2d3e1c21b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FrequentFlyer_T &amp;</type>
      <name>getFrequentFlyerType</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>afd03e3557a35461df82d1fbf8df21d38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getPreferredDepartureTime</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a47e92020d26eefd5257cf0ef7c82bf8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const WTP_T &amp;</type>
      <name>getWTP</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>acb251978834a2c1af0e3470c6686c8dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PriceValue_T &amp;</type>
      <name>getValueOfTime</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>aa67b1f02cf1020bc58f1f68a79b625fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a562c8dc995d72b83cd13efc843b1af74</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>abc82c280629778ef947e3d154f1b83f2</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ab93f6e3e14afa6766eb1cb816b4b8cd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimisationNotificationStruct</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a808e70fb3262df0eabb9d4ce3739bc7f</anchor>
      <arglist>(const AirportCode_T &amp;iOrigin, const AirportCode_T &amp;iDestination, const CityCode_T &amp;iPOS, const Date_T &amp;iDepartureDate, const DateTime_T &amp;iNotificationDateTime, const CabinCode_T &amp;iPreferredCabin, const NbOfSeats_T &amp;iPartySize, const ChannelLabel_T &amp;iChannel, const TripType_T &amp;iTripType, const DayDuration_T &amp;iStayDuration, const FrequentFlyer_T &amp;iFrequentFlyerType, const Duration_T &amp;iPreferredDepartureTime, const WTP_T &amp;iWTP, const PriceValue_T &amp;iValueOfTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimisationNotificationStruct</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a574abf7aa9753cffa875cf9261d1719d</anchor>
      <arglist>(const OptimisationNotificationStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptimisationNotificationStruct</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a952189bac858798feda788f7d695a417</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::ParsedKey</name>
    <filename>a00166.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type>InventoryKey</type>
      <name>getInventoryKey</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a69f7c6260acfbd4f28b0bc9b0825c9ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FlightDateKey</type>
      <name>getFlightDateKey</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>afaf805869885cae8bdd6963ba0ee9818</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentDateKey</type>
      <name>getSegmentKey</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aa85a733afadfd459bf0617c92f6fbab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LegDateKey</type>
      <name>getLegKey</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab23c6c9351671f4dbedc741598bd3fec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>getBoardingTime</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a69222ebf17ab5c23c58da205e7b1cb9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac45f974ec3e290d2130a033c4216ea1f</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aee29e70e29080bbbb0129a8e4f409469</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a3cb5ddcc8d631942de8605552c5fd284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParsedKey</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>afbfd9842e0767ad26029e0a8ea0b3f1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParsedKey</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a68018c038db3838956d9d6100fb79bf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_fullKey</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a985c242302537075fd35accb0359ee26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_airlineCode</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aa7a5d6369054815cc3d44d09eb65fd61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_flightNumber</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4329606e5556072524b0635ff38aa381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_departureDate</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a91091ca6e1fd25d316dd5b4cd1f728ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_boardingPoint</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1ca521356ece4dd9b3b0267b9bdff813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_offPoint</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab6182843d6b2e1de9335838664616b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_boardingTime</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>af5e46ed6603f798ebdf4e499336565c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::ParserException</name>
    <filename>a00167.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>ParserException</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aa9826eab42d62d535faebc22ecdcde68</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::ParsingFileFailedException</name>
    <filename>a00168.html</filename>
    <base>stdair::ParserException</base>
    <member kind="function">
      <type></type>
      <name>ParsingFileFailedException</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a4a09b5a4707f401bd2f879703ff97f67</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::PartnershipTechnique</name>
    <filename>a00169.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_PartnershipTechnique</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a233b1b6772329c3ce4f55c584f3285ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a233b1b6772329c3ce4f55c584f3285ada5ef39f15a54fc2aef2bba6a822eedbaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAE_DA</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a233b1b6772329c3ce4f55c584f3285ada9e69d6080ed0eb8d165b7f5848977882</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAE_YP</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a233b1b6772329c3ce4f55c584f3285ada4efa27fd2a3f9a32b57f36d3cc66e00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IBP_DA</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a233b1b6772329c3ce4f55c584f3285ada1840b1b1cbfaf2722a3e80a5a73c3bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IBP_YP</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a233b1b6772329c3ce4f55c584f3285ada19181d6ac3c22b9b01ae9e7fa1aaa7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IBP_YP_U</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a233b1b6772329c3ce4f55c584f3285ada28bc70d61701120ae0c0e8c69c684074</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RMC</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a233b1b6772329c3ce4f55c584f3285ada52ac339b17fa07c6e613b5e4ea5bd9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A_RMC</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a233b1b6772329c3ce4f55c584f3285ada238450184f9021225b8583317fa150a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a233b1b6772329c3ce4f55c584f3285ada66e7cc3177ca5ccc56cc41a49dafa0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_PartnershipTechnique</type>
      <name>getTechnique</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a2649b6c87e6786d57bcf8af5b5145438</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getTechniqueAsChar</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a80bac3faeda88354ac6ec140c8bed410</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTechniqueAsString</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ad3ce2fe851dc2c8f460c32fe5debd828</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a876e317141d84b599d0c196c7e73ecad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ada8bbcf6309dc6d822655d390f719955</anchor>
      <arglist>(const EN_PartnershipTechnique &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartnershipTechnique</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a91d7273777901418196415fb9c3a4cb6</anchor>
      <arglist>(const EN_PartnershipTechnique &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartnershipTechnique</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a5bdbae936ac0379c60d4e16a38da9ddd</anchor>
      <arglist>(const char iTechnique)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartnershipTechnique</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a06cfe99c5718881ec328f803538846e7</anchor>
      <arglist>(const std::string &amp;iTechnique)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartnershipTechnique</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a13ce06a92722039d4f7fc313201bf297</anchor>
      <arglist>(const PartnershipTechnique &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ad4ca7da54fb221f02df2573ab6642172</anchor>
      <arglist>(const EN_PartnershipTechnique &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EN_PartnershipTechnique</type>
      <name>getTechnique</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a901c49396a86de4748943efff39d2995</anchor>
      <arglist>(const char)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getTechniqueLabel</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a872e34dc28feb1e48ba9f8d8854be598</anchor>
      <arglist>(const EN_PartnershipTechnique &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getTechniqueLabelAsString</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a710f3088d1c0e12cd384315cb12a4fd5</anchor>
      <arglist>(const EN_PartnershipTechnique &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ae4a1423d625bfb22147b2a349287e0eb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::PassengerChoiceModel</name>
    <filename>a00170.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_PassengerChoiceModel</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a5087b62cedc71444a0df1f9eff7e5ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HARD_RESTRICTION</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a5087b62cedc71444a0df1f9eff7e5ea4aca49a85decee5c6e50379ebbe40976d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRICE_ORIENTED</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a5087b62cedc71444a0df1f9eff7e5ea4a3d25ba3b95c091b155e943ba8d1c68f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HYBRID</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a5087b62cedc71444a0df1f9eff7e5ea4a44d64339a7571bdaa0aab08293bda20c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a5087b62cedc71444a0df1f9eff7e5ea4aae6107d048d4117e25aa5e5287d7b7e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_PassengerChoiceModel</type>
      <name>getModel</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a6afb8989cef60be2b21e1e6b731c53bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getModelAsString</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a6569ccf9b2ebd06b481122f7d1470401</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a21ff63792104fbe6b272dc4469abea02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a0d95a40d0487d841b76deec4d302b50f</anchor>
      <arglist>(const EN_PassengerChoiceModel &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PassengerChoiceModel</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a147d50b12867db4509e286d3be8ad308</anchor>
      <arglist>(const EN_PassengerChoiceModel &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PassengerChoiceModel</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a90f388c44994f50d3ceb1d48aeeba99b</anchor>
      <arglist>(const char iModel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PassengerChoiceModel</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>addcbd2cbeb42feb9020aae79d9d61f90</anchor>
      <arglist>(const PassengerChoiceModel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a4bd825fcdb64da60dca14651424fd6ae</anchor>
      <arglist>(const EN_PassengerChoiceModel &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getModelLabel</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ab3e1769faf5ff08ac72e3864e7bf74eb</anchor>
      <arglist>(const EN_PassengerChoiceModel &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getModelLabelAsString</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ae1c2f762c16bda504b991b2483e55c42</anchor>
      <arglist>(const EN_PassengerChoiceModel &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ad85bcbaec013c326136c276d79260f68</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::PassengerType</name>
    <filename>a00171.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_PassengerType</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a0b617a7fd5bd27a0a798e8edc3d0c1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEISURE</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a0b617a7fd5bd27a0a798e8edc3d0c1c3a1168f8c3e1d234a86bce2aa1326a1bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUSINESS</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a0b617a7fd5bd27a0a798e8edc3d0c1c3a172517f495a86d55d8216bbb6aaf63d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a0b617a7fd5bd27a0a798e8edc3d0c1c3a342e08eb7db471c31328fa1c467a48cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a0b617a7fd5bd27a0a798e8edc3d0c1c3ae11ea43c3a0f8cb74f6c47dff7901c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_PassengerType</type>
      <name>getType</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a417887c6020c60d9b895dfc49f5c86f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeAsString</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a2f45eeed4dec42a2e0e952b4a695273f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>abedb7cb12d48f035688af9c4f691321d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>aa1e94456a59c7a3232f78a60bc6354a8</anchor>
      <arglist>(const EN_PassengerType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PassengerType</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a7b5915d0053ad02accd42f4c1de375d9</anchor>
      <arglist>(const EN_PassengerType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PassengerType</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a1af782efecb36411534023059c169997</anchor>
      <arglist>(const char iType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a4530efe59062983b81e9f8f359eb0f69</anchor>
      <arglist>(const EN_PassengerType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getTypeLabel</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ab20e442578611472d87588b6945c65fb</anchor>
      <arglist>(const EN_PassengerType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getTypeLabelAsString</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a7ea823747a106f4bb3edc614e9f61e7d</anchor>
      <arglist>(const EN_PassengerType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a5354080f205781dd07e291acbd267f84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::PeriodStruct</name>
    <filename>a00172.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const DatePeriod_T &amp;</type>
      <name>getDateRange</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ac82c7b763d6adfad0981f5655ef54037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DoWStruct &amp;</type>
      <name>getDoW</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ad9240c955fe6d1a4e54d182138ad84f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDateRange</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a9d244e566b9a2b56317c899b0789dcb9</anchor>
      <arglist>(const DatePeriod_T &amp;iDateRange)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoW</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a36d96dc82dc164e8aa961955df55b982</anchor>
      <arglist>(const DoWStruct &amp;iDoW)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ac8106d4842b86c9d852e1d5fd29f887b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeShort</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aec32d93424bedbf2f75e281e3d03b0be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PeriodStruct</type>
      <name>addDateOffset</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a94b3ee79e219b44238dd3e6ee5251bc6</anchor>
      <arglist>(const DateOffset_T &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>PeriodStruct</type>
      <name>intersection</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ae9d94719412f4c09939976d624d6b67a</anchor>
      <arglist>(const PeriodStruct &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const bool</type>
      <name>isValid</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a35ce296294451f63fb823179877daab4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodStruct</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a5c3643604eec4474f12cf3a162e3a7cd</anchor>
      <arglist>(const DatePeriod_T &amp;, const DoWStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodStruct</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ae4bdd8a48dc4e2e55a814d384236e212</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodStruct</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a33b43d643e7d4ced560db0dee080a9cf</anchor>
      <arglist>(const PeriodStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PeriodStruct</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a5414495019d7d4cd027a54f4cefce58e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::Policy</name>
    <filename>a00173.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>PolicyKey</type>
      <name>Key_T</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aa79059a2362768fb35ba05388bf2ec48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a8b6b2f91a79ab6dc5b21f45d917b9e0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a8df9ae238994dbb0f53ba32ed50db365</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a1731974e9b54409b694cf9e164ee818c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BookingClassList_T &amp;</type>
      <name>getBookingClassList</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a9053c2927f69003ae522b3dec611f8e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T &amp;</type>
      <name>getDemand</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a1fe54e7731a91b5a3f577fb47b38e3a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StdDevValue_T &amp;</type>
      <name>getStdDev</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>af133dd808e12605781bc0755ad75cb49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Yield_T &amp;</type>
      <name>getYield</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a1f83c96bdadbf5ac025133d0e4c52253</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Revenue_T</type>
      <name>getTotalRevenue</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a5a45f1a091aefbffa8cd0c219ecd7138</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDemand</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>afe2c452f0e5d5590649cbecfefff9804</anchor>
      <arglist>(const NbOfBookings_T &amp;iDemand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdDev</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a8369c3d7828e3be1144f3b3086e290ab</anchor>
      <arglist>(const StdDevValue_T &amp;iStdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYield</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a580848d67f6083f65f84c12bcfe8fa70</anchor>
      <arglist>(const Yield_T &amp;iYield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDemandForecast</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a591bcc315c963bef65ce288244149756</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addYieldDemand</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a11ed69c8c759b98a7d69477ecc1d2dd6</anchor>
      <arglist>(const Yield_T &amp;, const NbOfBookings_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ac372c46755a3ea9af089c9285e545247</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ac4a7db0042c54d1069c7202892768a00</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ae8a02cce73d6ea26c19993a56b87c686</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a5322da2c9560a267b6bc2b739e9dcac2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aa9c1b5875fe9e2938216cb0df6744a22</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Policy</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a672b78d8274d6b62c78e54f391bf6065</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Policy</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a977cbe8d62c86a41ae1ff0399bb4c5d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::PolicyKey</name>
    <filename>a00174.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>PolicyKey</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a2789b5624335e580c2c70ccdc8b61886</anchor>
      <arglist>(const PolicyCode_T &amp;iPolicyCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyKey</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a266a74840ea30aad3ebaf9a2de64c14c</anchor>
      <arglist>(const PolicyKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolicyKey</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a377023b27b9ccd4f8e84779cae9e4294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PolicyCode_T &amp;</type>
      <name>getPolicyCode</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a4a71d36cc72ff9f89d003143b4af37f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>af40c41f96d11ea16fea6c2fe31faca5c</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ad1958b7b25e23f97081fbc0f459ea216</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a5f165df1571c0343347f0e7a43ae7df4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>acb532d2e087ca35bbd2bbff2903ea58c</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::PosChannel</name>
    <filename>a00175.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>PosChannelKey</type>
      <name>Key_T</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a1009fe60b9f54110ac5f35086da00208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a83fdfc9f14806cc1bb1fb64f80d6dbdb</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a858759f2828980add99cb4e55240a4f6</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a2dac21fc44810ab67e85c17c632929a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a5d0d9aa2ba58138e19d88e8e0a002ca6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ae21a5c65f92ef3c23b3eae83c79a9631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ac7521c351fa503d96ee45b967b26ec73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const stdair::HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a09510e2f67ee745ee19684646b2e9a79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CityCode_T &amp;</type>
      <name>getPos</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>aa19c5adb5a279eb3d6b7bfb8efcdf812</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChannelLabel_T &amp;</type>
      <name>getChannel</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>af3fdff331f07496b6fb0ed0f12b69d4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PosChannel</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a37921fdada2fe563b262d130097b828e</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PosChannel</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a80c9c8fe1b6714a08112f0563acb4c02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a458f8cba19b3eacd9aa51a6a3669b977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>aab22673345312b067e774fcbcbd0c0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a0ba6edf3510a4170f340ef8ce3ae4707</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::PosChannelKey</name>
    <filename>a00176.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>PosChannelKey</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>add63509a9920a1748373ea9583094ced</anchor>
      <arglist>(const stdair::CityCode_T &amp;, const stdair::ChannelLabel_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosChannelKey</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a49e06fce7c503d67ef576d3d35172ebd</anchor>
      <arglist>(const PosChannelKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PosChannelKey</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>aac3c91aae4bd1a8ae2635d34b39a1036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const stdair::CityCode_T &amp;</type>
      <name>getPos</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a2bbed525a7b191c539301c30a29b751f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const stdair::ChannelLabel_T &amp;</type>
      <name>getChannel</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a341ead0c207a851b973c0e1bdc504a2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a7e1454d21babe2407d8b516a4acf657f</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a946775a0e8e633aeec71d843b9210f9c</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>af7e4b05a853d9a76676c135c1de6ecfe</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::PreOptimisationMethod</name>
    <filename>a00177.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_PreOptimisationMethod</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aa91a49def4020de7833fd3ac5be54a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aa91a49def4020de7833fd3ac5be54a78af1bbd75525befdeb76c83dda9a7d7c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FA</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aa91a49def4020de7833fd3ac5be54a78ad2e3e6b124b744e88b938683e3681c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MRT</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aa91a49def4020de7833fd3ac5be54a78ab6ed59bbb2101769e93880ffbeb2f19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aa91a49def4020de7833fd3ac5be54a78aa80bb9e2c5a8e1e0a5fd3d835396381f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_PreOptimisationMethod</type>
      <name>getMethod</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>adcf9bfdd2af1dd6b9d92005fb3270b13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMethodAsString</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ab912f4d941f68e8e5cc9220be6eaae31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ade597ce46902bd75874e5cffc99bda96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a5a52fe4cf6ca015e50e91e1e3975e510</anchor>
      <arglist>(const EN_PreOptimisationMethod &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreOptimisationMethod</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a125c44bb1e986c43623cb55da241d1d1</anchor>
      <arglist>(const EN_PreOptimisationMethod &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreOptimisationMethod</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a5574f6893fe8eb4fb9b4e96a534d4325</anchor>
      <arglist>(const char iMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreOptimisationMethod</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ad42feb1377ef9ad9ffa440ad2e537a54</anchor>
      <arglist>(const PreOptimisationMethod &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a07da53e74e4445419a016b6bfb34852f</anchor>
      <arglist>(const EN_PreOptimisationMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getMethodLabel</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ab1651d86e742fbc39252b11921dc7845</anchor>
      <arglist>(const EN_PreOptimisationMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getMethodLabelAsString</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a7247855d3a7437b961b951dbbb5106f4</anchor>
      <arglist>(const EN_PreOptimisationMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a48e7e0947a92d3395bf6162ea505c40c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::ProgressStatus</name>
    <filename>a00178.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const Count_T &amp;</type>
      <name>count</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a76e20e15b3009053203b6a8b8b649f11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Count_T &amp;</type>
      <name>getCurrentNb</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ad1bd68a3f8d0c6d4064c40100659679c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Count_T &amp;</type>
      <name>getExpectedNb</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a1afa1d9908519dc51d7297dbb455f2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Count_T &amp;</type>
      <name>getActualNb</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a0b5ee2757d09e7e9d4723d798437acd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ProgressPercentage_T</type>
      <name>progress</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ad583a74509ac193645872202fa1f7753</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentNb</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a84352745d91caaf4a4842982d3f5d9bb</anchor>
      <arglist>(const Count_T &amp;iCurrentNb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpectedNb</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>aa4336d8abfbe34093a04046b45b685f8</anchor>
      <arglist>(const Count_T &amp;iExpectedNb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActualNb</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a59e4c9e2b6ea4b653bde4ccf43224f35</anchor>
      <arglist>(const Count_T &amp;iActualNb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a8b41e5594396edcde96c60e601c957ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Count_T</type>
      <name>operator+=</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a0791de499db1048d3cbf540cd422790e</anchor>
      <arglist>(Count_T iIncrement)</arglist>
    </member>
    <member kind="function">
      <type>Count_T</type>
      <name>operator++</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a915598b87e874c5cf7ef2e58b32dcc3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a5fabd8027c4aebdfcd55191e3725a048</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ac1c409be66a9a8ab01d24c356b289f79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressStatus</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a993891ea40760008f466e59d23892fda</anchor>
      <arglist>(const Count_T &amp;iCurrentNb, const Count_T &amp;iExpectedNb, const Count_T &amp;iActualNb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressStatus</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ae37b7c88b718621e16d250e63f90c18b</anchor>
      <arglist>(const Count_T &amp;iExpectedNb, const Count_T &amp;iActualNb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressStatus</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ae610d255e94e657686f2411198ff3550</anchor>
      <arglist>(const Count_T &amp;iActualNb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressStatus</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a50cd79d39e73b7899d0c27b4097d649e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressStatus</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a3878cfa93e4b369f7b47a6cd7237a52b</anchor>
      <arglist>(const ProgressStatus &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::ProgressStatusSet</name>
    <filename>a00179.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const ProgressStatus &amp;</type>
      <name>getTypeSpecificStatus</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a435532fc6fbb82e45912a1b0a3e16142</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ProgressStatus &amp;</type>
      <name>getSpecificGeneratorStatus</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a95f652f13ba98322d5039d67c5da7000</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ProgressStatus &amp;</type>
      <name>getOverallStatus</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>af333a3dd2f34399fe8a5f75743e24fff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeSpecificStatus</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>aba8a45373dd5224b5a77ed2b6833c65d</anchor>
      <arglist>(const ProgressStatus &amp;iProgressStatus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpecificGeneratorStatus</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>accdc8e8b37c576e290b4c3309280156d</anchor>
      <arglist>(const ProgressStatus &amp;iProgressStatus, const EventGeneratorKey_T &amp;iKey)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverallStatus</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a978cb0de14a321c195ef9b53ffb6483c</anchor>
      <arglist>(const ProgressStatus &amp;iProgressStatus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a0a8addf49507515d01a495e00944262c</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>aa8d2efe7f1c6f0b4a674d4f41afd47c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressStatusSet</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a5bf53bac0dbd275bdf12af4f2e153db5</anchor>
      <arglist>(const EventType::EN_EventType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressStatusSet</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a3e2ae377ab25753e013a89dfbd1ec112</anchor>
      <arglist>(const ProgressStatusSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProgressStatusSet</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a12a60685f9bfda2376b2dcd168702e72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::RandomGeneration</name>
    <filename>a00180.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>RealNumber_T</type>
      <name>generateUniform01</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>abe6f33c8d9403702d3446779eaf146e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealNumber_T</type>
      <name>operator()</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>af8d889dad83580c5c824623eff3b2136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealNumber_T</type>
      <name>generateUniform</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a942afe04a6239cb97066804f8e0259e6</anchor>
      <arglist>(const RealNumber_T &amp;, const RealNumber_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>RealNumber_T</type>
      <name>generateNormal</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a9fe0f8e8f326a780b62832d03a757d5a</anchor>
      <arglist>(const RealNumber_T &amp;, const RealNumber_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>RealNumber_T</type>
      <name>generateExponential</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a0a7b6c473014a5d983e090bfbf78dbe0</anchor>
      <arglist>(const RealNumber_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BaseGenerator_T &amp;</type>
      <name>getBaseGenerator</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aa8f47ef1356fdb8830d30df87120c8f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aa36adfd187b01286d4ce49141e3d7269</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomGeneration</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a95569cddbc1e270714ac1fae4928248c</anchor>
      <arglist>(const RandomSeed_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomGeneration</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>af0e72e93d500196195065ed4a6c4e4c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomGeneration</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a270e5b0874e1f31d3305b391a65f84ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a21c5da2f65541d5e837c60feb1dfdb51</anchor>
      <arglist>(const RandomSeed_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="variable">
      <type>BaseGenerator_T</type>
      <name>_generator</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a31a8afcceffef61dfe003efa5e7adb28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::RMEventStruct</name>
    <filename>a00181.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a7b3e8edd95dd7a16cdd1943c15246983</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const KeyDescription_T &amp;</type>
      <name>getFlightDateDescription</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a5233ac22a969d50ee945a20c131b0dc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T &amp;</type>
      <name>getRMEventTime</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a46ec5ec213ce22d38696cdda0609be57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a846e29a5d3b427061afe078e9bb7ad66</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aad31d1e6c2a401796049d4cfb7010561</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a8a120517b09beb81a2f01b865d7b2e68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RMEventStruct</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a0d5a849e0e11d6cf4a658d8f176f73ac</anchor>
      <arglist>(const AirlineCode_T &amp;, const KeyDescription_T &amp;, const DateTime_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RMEventStruct</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aa1eeeb6a08fca4841333772318938eab</anchor>
      <arglist>(const RMEventStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RMEventStruct</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a785d89f58090601608d19f574e6a35a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RMEventStruct</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>adedf71eb0919f11b338d4806d9af2295</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::RootException</name>
    <filename>a00182.html</filename>
    <member kind="function">
      <type></type>
      <name>RootException</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ab2693699452fe6cc7904b136f18ecc77</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RootException</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>aa70d772ff2f455081527986a60daacc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RootException</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a138e14ccd4554c3a57d2d2beb11c11d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::RootFilePath</name>
    <filename>a00183.html</filename>
    <member kind="function">
      <type></type>
      <name>RootFilePath</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a9e3f867ee970081513e4f2b0859d37e8</anchor>
      <arglist>(const Filename_T &amp;iFilename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RootFilePath</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a4670488f27a0dca6948b21110f2bb004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RootFilePath</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a534192c15fb1140103fc3bc0c6481e6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>af9e08933f4c33a13af30e187be9e8502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Filename_T</type>
      <name>_filename</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>add99acc274a1806b541841b27cce35a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::SampleType</name>
    <filename>a00184.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_SampleType</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5caff9c0b42a7e2bae8e7f752465bd94b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A4P</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5ca49cfe0302938f0092943d7e41210d5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RMS</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5ca619a6f48d5e4e9ef483032e0502a494b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INV</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5cab016d358b435e4cd402fcb02ebbadebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCH</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5ca1422082508be0eb4ff968f4315d4812c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAC</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5cab0efc4026898d6b581c6c41ea47303d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FQT</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5ca4909eb69c641a1a71555a7d700009d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CRS</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5cae4572c38c0450ca99b63c862ec146dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEM</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5ca4bcf1d8ff5c5fdbc549db7a76c04345c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVT</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5ca80eaedd7918e6976be834f8eaa15989a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCM</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5ca5ec33f8a12c70aed6ef27204c054f012</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adfa279c6a5e66545a68142399698ff5cabb9e1293375cad7a445a480004f8a3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_SampleType</type>
      <name>getType</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a96c472197da3a718c80fc48a0ef2d30d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeAsString</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a3dff46aa2065c2ea9cbfc93db956e71c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>aa8217afbf82eaf07261d7aab610152bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a0462fba465dedd779631a74150ba88cd</anchor>
      <arglist>(const EN_SampleType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleType</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a11284843b3d4f135de4a48be606d3e38</anchor>
      <arglist>(const EN_SampleType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleType</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a210747b05e007438a41488a7d6310caf</anchor>
      <arglist>(const char iType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleType</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a73adc6f4f9cf5eee7f33d805aa7d2018</anchor>
      <arglist>(const SampleType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>ab8472d4eb438a3c3434cab2f2ecee4c5</anchor>
      <arglist>(const EN_SampleType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getTypeLabel</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a9085346e8778d9f2abe3ada6fa001f3d</anchor>
      <arglist>(const EN_SampleType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getTypeLabelAsString</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>ae3f0734bc18ccc3e7d15c08d8ba2ab3a</anchor>
      <arglist>(const EN_SampleType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a3131607e35095b082fbab7a596cd1738</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::ScheduleFilePath</name>
    <filename>a00185.html</filename>
    <base>stdair::InputFilePath</base>
    <member kind="function">
      <type></type>
      <name>ScheduleFilePath</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a83f308642ef14f489780ea06140ce212</anchor>
      <arglist>(const Filename_T &amp;iFilename)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>af9e08933f4c33a13af30e187be9e8502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Filename_T</type>
      <name>_filename</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>add99acc274a1806b541841b27cce35a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::SegmentCabin</name>
    <filename>a00186.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>SegmentCabinKey</type>
      <name>Key_T</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a618260ad0a06d1e72b942421f46709f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>acff46070010c4720c688733af142bcfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aa75647fc668713fae588f93bd1d27fc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a595f4bb4a9a7ef7536e2efab120a23e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T &amp;</type>
      <name>getCabinCode</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a7abb48ab8b862af112cb64a4a952e6db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MapKey_T</type>
      <name>getFullerKey</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ac18b2040d3cf789e6a4870bdf869259f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SegmentSnapshotTable &amp;</type>
      <name>getSegmentSnapshotTable</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a4b8b6d548087943b23a7c20ed6c5f975</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCapacity_T &amp;</type>
      <name>getCapacity</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a1200a9894b4fb444a94fd3b9c459e218</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BlockSpace_T &amp;</type>
      <name>getBlockSpace</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a14655325e96445a1207edbf1983d0190</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BlockSpace_T &amp;</type>
      <name>getMIN</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ad7022c4e93ec549a6e095ef30c38a530</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UPR_T &amp;</type>
      <name>getUPR</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a948309ae679599d3d194b71046790cf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T &amp;</type>
      <name>getBookingCounter</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a5e3c10287fd08ec9a62731945549ed6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CommittedSpace_T &amp;</type>
      <name>getCommittedSpace</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a8433ba3a457a98c633dd930f1b5b2dd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Availability_T &amp;</type>
      <name>getAvailabilityPool</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a535267f577dc23c6317974422a1ec5f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BidPrice_T &amp;</type>
      <name>getCurrentBidPrice</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a4bc30b3e1bf410f33fa46ae8095bea6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BidPriceVector_T &amp;</type>
      <name>getBidPriceVector</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a370d2ee5be85018b816b011ed826a4dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const bool</type>
      <name>getFareFamilyStatus</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a53ccb0bfe1ecb63e83829d3a0d55ca84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PolicyList_T &amp;</type>
      <name>getConvexHull</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>af8384bb6053678f335c441ebd34cce0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSegmentSnapshotTable</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>af9b87194ff651f1046242469110640aa</anchor>
      <arglist>(SegmentSnapshotTable &amp;ioTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCapacity</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ae1df13505877a193bf09fbba61ab8cfd</anchor>
      <arglist>(const CabinCapacity_T &amp;iCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlockSpace</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>accff8301d39a85348db74d40103492e0</anchor>
      <arglist>(const BlockSpace_T &amp;iBlockSpace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMIN</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a9a7473252bf82b04604d9657813033ba</anchor>
      <arglist>(const BlockSpace_T &amp;iMIN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUPR</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a45a194a69a6e9a343a8f5c2a2b2f20ed</anchor>
      <arglist>(const UPR_T &amp;iUPR)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBookingCounter</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a977c92d33a75c2c21226a52d08c667b3</anchor>
      <arglist>(const NbOfBookings_T &amp;iBookingCounter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommittedSpace</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a6c8d46e5f40a4fba184ecae71ad7a920</anchor>
      <arglist>(const CommittedSpace_T &amp;iCommittedSpace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvailabilityPool</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a8c3fc03c8862c6fe5f1f90f307bec03c</anchor>
      <arglist>(const Availability_T &amp;iAvailabilityPool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBidPriceVector</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a88a0e57f0188c7ad79f128d63487faa2</anchor>
      <arglist>(const BidPriceVector_T &amp;iBPV)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activateFareFamily</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a330b5ec145094518f4c101b1f78449cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFromReservation</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a90272a329bdc4551d0bc7fd3654050b2</anchor>
      <arglist>(const NbOfBookings_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetConvexHull</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a00ab477c6a243ef9636e47a6ba0b5924</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPolicy</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ab10ecb413797a79a0bfa4a6e1067df99</anchor>
      <arglist>(Policy &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a47d7a0de74c23b38419b0d4ea32c3ee9</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a5e75e17c0815bbec2840147c14aff179</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a44b96958bcd5bf51637abdcc68026b51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aabb744bc46fb9caa7b0c0993461cbb79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeConvexHull</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a7eeec35166599026adb127743a16c6d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ad06e3d96c99bab66c9ced41e848db7ec</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SegmentCabin</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a851aaaa8d3021c502677a236204c2542</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SegmentCabin</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a8b3aaacca54f5d065b0b052e7c661a01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a6fbc5421fc51f84bb195c9a14a419383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>abff9f63d9990d019fe3468961fbfc720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ab8470ce87ba4b1b142436dd2b8a86d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SegmentSnapshotTable *</type>
      <name>_segmentSnapshotTable</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a561fe75fedd73f38ae63e03ec02a143d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CabinCapacity_T</type>
      <name>_capacity</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>af142ae350562cc352d70495cac56443e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BlockSpace_T</type>
      <name>_blockSpace</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>af28f320a7c1eca37301901faaf1fb991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BlockSpace_T</type>
      <name>_min</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ac75b4e502866f58538705a636a90d310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UPR_T</type>
      <name>_upr</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a2fbf7c84ee9f51c5bf540a3b72e15929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NbOfBookings_T</type>
      <name>_bookingCounter</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a253b4f708af00935469e41a38d0d4f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CommittedSpace_T</type>
      <name>_committedSpace</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a8e9009be2dcd1af772c8660d088ef4d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Availability_T</type>
      <name>_availabilityPool</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a5792255eeb0eeac3c66f88e858c43d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BidPriceVector_T</type>
      <name>_bidPriceVector</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a35f30eac886610f14b7d0b7f4aa8195a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BidPrice_T</type>
      <name>_currentBidPrice</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a7d2a51f0503c213a7f71ecebc288c7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_fareFamilyActivation</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a39c94757829b1932fadcabe075270992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolicyList_T</type>
      <name>_convexHull</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a0fdf6119fed719e6d828a680aee93647</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::SegmentCabinKey</name>
    <filename>a00187.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>SegmentCabinKey</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a02fef42d39cbf59f45f75e8fb0dda6f4</anchor>
      <arglist>(const CabinCode_T &amp;iCabinCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SegmentCabinKey</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a158192f19a08971ba91c78260dd5f9c8</anchor>
      <arglist>(const SegmentCabinKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SegmentCabinKey</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a871cea28ba02792c0d94059d2744450a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T &amp;</type>
      <name>getCabinCode</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ac812109901e08dead44ca98cbfeb31f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a0af1e284808a9ee1ba62739926d3a98f</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ad03f3d484116f5ceb0be2da6989ac43a</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a0fa1709bfcd60c8b67d4cd0b297e9b38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a929b9e2ebae8ce6ddfadcf9e4441cb8e</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::SegmentDate</name>
    <filename>a00188.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>SegmentDateKey</type>
      <name>Key_T</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>aedf7fefc517483d5be7699ed780bc9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a85c4d7a2aca3e43fb5e7ea9c6f0d76cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a1422a502f4e513cdf5c578b97ae8a4bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getBoardingPoint</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a10e9e34eb25f12fde6aa01bebdf261a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getOffPoint</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a826f037b4456b88d2c0998ed9d0592c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ab4322179c4308cb140404fc045515fac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Date_T &amp;</type>
      <name>getBoardingDate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a33ec74a4e0934eb07f2b9052b25df625</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getBoardingTime</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a3d0629ba0111326b3d9e1487d6bc47d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Date_T &amp;</type>
      <name>getOffDate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>af1c1499206d85e96d375835d99c67630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getOffTime</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ab6701e65751fdfd26c52c78a25099aa2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getElapsedTime</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a6dbcc63a672a450e48eb8fe38dbef287</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Distance_T &amp;</type>
      <name>getDistance</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a5d22d3d152b9ef46fb4fd8f059ee9e4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DateOffset_T</type>
      <name>getDateOffset</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ad3014cdbb6f566f6a75a66d1756f2860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>getTimeOffset</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>af6c72a91d8085a5359e453e0f2a04976</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentDate *</type>
      <name>getOperatingSegmentDate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a7837c0e1eb6c529145a04b9916b31726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SegmentDateList_T &amp;</type>
      <name>getMarketingSegmentDateList</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ad84685764877f135815bb0530a18a267</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RoutingLegKeyList_T &amp;</type>
      <name>getLegKeyList</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a6ad0c2f79ad02885bc85d55a15efd25f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoardingDate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a3747c24a00ea79585f07f3374c9fb5d9</anchor>
      <arglist>(const Date_T &amp;iBoardingDate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoardingTime</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a1a815cfb39ca158245e2dc96c6e7473e</anchor>
      <arglist>(const Duration_T &amp;iBoardingTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffDate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a10bbff218fece6b21ea10a1e8e0fe4c2</anchor>
      <arglist>(const Date_T &amp;iOffDate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffTime</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a5d09d51cdd2b62f7f2315628a6aa4166</anchor>
      <arglist>(const Duration_T &amp;iOffTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElapsedTime</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a9db2b8b2a93d029386b5be17eb90676a</anchor>
      <arglist>(const Duration_T &amp;iElapsedTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistance</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ac7f52e4a0e8e87ff6290907bd61016a7</anchor>
      <arglist>(const Distance_T &amp;iDistance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLegKey</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a273a1497b6c03c9cc5a62ec252859464</anchor>
      <arglist>(const std::string &amp;iLegKey)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>aafc4b0595caef24be14b9727eb266cf6</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>afa5f18b3a979064268644fb3054fd4b3</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a1c3462048d8a31049270e7dc89224e88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ac43213fe23aedc70f8d5f2a82529eb1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a1e6541af3e071d971bbaa5861a206a48</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SegmentDate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a9bb68579f2060fcd1f673b4bf09e5062</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SegmentDate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a244bf1c6ed089481647250a3fddcb407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>afe4030382fbdf760bb516ea029e8bcb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a282b29af562f396066ebde3cd17681f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a378e54d2938b76738fd93bc5531064b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SegmentDate *</type>
      <name>_operatingSegmentDate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a10796ceb113f03c377993873d6ef7b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SegmentDateList_T</type>
      <name>_marketingSegmentDateList</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>aa10a70743cca17cfa29c1e02dfe8c222</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Date_T</type>
      <name>_boardingDate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ad1cd46f5d9e24f9458b0473b580c1f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Duration_T</type>
      <name>_boardingTime</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a458ac32a7a522d72855c11826e6478a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Date_T</type>
      <name>_offDate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a0ab1493edb78e419febb6b9244a40634</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Duration_T</type>
      <name>_offTime</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>aa9494936dd15590e52ac1781c9c865a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Duration_T</type>
      <name>_elapsedTime</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a7101d8cbc559917957099cf8e3f5e841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Distance_T</type>
      <name>_distance</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ac30279d6cb46f3ea4a3f5808cf478c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingLegKeyList_T</type>
      <name>_routingLegKeyList</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>acf93903323543630e67d5c10fd23938d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::SegmentDateKey</name>
    <filename>a00189.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>SegmentDateKey</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a1f022934f5f688b0936cc0657fd1251e</anchor>
      <arglist>(const AirportCode_T &amp;, const AirportCode_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SegmentDateKey</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a14fa53241e92a0ad86d43e933cdde957</anchor>
      <arglist>(const SegmentDateKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SegmentDateKey</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ae1a74f2d09cd655e7a80c8a8ca181530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getBoardingPoint</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ae24974886ceedb779c10eab04d8e13e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getOffPoint</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a67531596d0c0d7899c7c38904cd2c23d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a00ae79251f6bf60aa9fa133a6f6cef70</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a5cec0604aa7164fe8711accf07fe6ebd</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>af9bf2c78f6cfb05ec3a43d774f4daf5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>af54a015c26389574566344a5f8875a4c</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::SegmentPeriod</name>
    <filename>a00190.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>SegmentPeriodKey</type>
      <name>Key_T</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ab049cebabfe9d6c91fab2b69ad8430f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a3b6d53b6c5e1484e777720dd7b2b12c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a6b9f83ba348641704700aac36baab429</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getBoardingPoint</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a2f16b8512c517e9fa91c3524227c877d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getOffPoint</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a9b848d747d89b0600e91267e100a4dd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getBoardingTime</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a4f42be9bc819f7811769c0a016bdf6ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getOffTime</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>af6ffc37f5547a3a3c7af149ce76abe00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DateOffset_T &amp;</type>
      <name>getBoardingDateOffset</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a3d038c5db562e650ae6655ea86d80101</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DateOffset_T &amp;</type>
      <name>getOffDateOffset</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>af07f887385e7f425cc29fa5b8d59822a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Duration_T &amp;</type>
      <name>getElapsedTime</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a858f5035cceb8f061db9a162d55bca0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinBookingClassMap_T &amp;</type>
      <name>getCabinBookingClassMap</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a57773f8d6ec636305da8466cbde6a84d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ac9c13cf9c8ace6dc9bc66e33efaa8f06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoardingTime</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a7246c38a14f1d1150e32c1f9bf03f2cb</anchor>
      <arglist>(const Duration_T &amp;iBoardingTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffTime</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a55216d38ef322d1b5b03e704ef1f75ce</anchor>
      <arglist>(const Duration_T &amp;iOffTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoardingDateOffset</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a6126292a15637ebc08f4fd7098d33eae</anchor>
      <arglist>(const DateOffset_T &amp;iDateOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffDateOffset</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>aa0f9dc25f0a6d90acc0c3dfab495836a</anchor>
      <arglist>(const DateOffset_T &amp;iDateOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElapsedTime</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a5d20426a1a46c8ee73beb7ab4cf9d691</anchor>
      <arglist>(const Duration_T &amp;iElapsedTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCabinBookingClassList</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>afbd42ff485281537f4224a46b30e60d6</anchor>
      <arglist>(const CabinCode_T &amp;, const ClassList_String_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>afe82f996236c88b863e596c826cf74fb</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ae52ac134a9780cfaf2994f599a3f5d84</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>aa2821c72dd91a0105179340fd9a3153e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a298a25ecbf5ae5689f8cd9580e8202ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SegmentPeriod</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>aaa5c8d5106abddaa392eb2f812598e7c</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SegmentPeriod</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a1b05a474a6a762b8fafad3ef2921b345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a29fbd2d27b89f65b8e36eb36d212ed02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a1d529ea357f5125e8b0bd1d74026b478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Duration_T</type>
      <name>_boardingTime</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a3b3e2920b5d391ce6cc2e2898b343a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Duration_T</type>
      <name>_offTime</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a68e4b730733f93eb20fae5e793bae77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DateOffset_T</type>
      <name>_boardingDateOffset</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a3d0e7ec830c8917921c6f6a5c616fcca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DateOffset_T</type>
      <name>_offDateOffset</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a0b6e1c6fb879db0c907d65b137606b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Duration_T</type>
      <name>_elapsedTime</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a883b4db20ee87a68eba83a91982ae67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CabinBookingClassMap_T</type>
      <name>_cabinBookingClassMap</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>af92aa895a3972185178b2a479ce20a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a917f1e3670025385bbe36b761a6b6ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::SegmentPeriodKey</name>
    <filename>a00191.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>SegmentPeriodKey</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a08ba10e6c4803f292ff9a48eb2a344f2</anchor>
      <arglist>(const AirportCode_T &amp;, const AirportCode_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SegmentPeriodKey</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aaa5e5963a384060f3266b7dfd6645d89</anchor>
      <arglist>(const SegmentPeriodKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SegmentPeriodKey</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aae8591a8529be8d52d45de3564e4e538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getBoardingPoint</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ac7915cfa152fdc9f662377c34b6ce1b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T &amp;</type>
      <name>getOffPoint</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a74ef5d3ffe40aec777fd47e2ab88b04c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ac006a0e7fc534eb4239a6b07cc367a45</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ac6f930a90f05707b3720acd669558cbd</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a86439bf3fa13fb4823024a475cfe789c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::SegmentSnapshotTable</name>
    <filename>a00192.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>SegmentSnapshotTableKey</type>
      <name>Key_T</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a495d4114c5318ef14ad769a5e8b80da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ac105ae213d7e31e2647cf6704cff6c5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a515eccec6a547d25f4ff0920f34132de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TableID_T &amp;</type>
      <name>getTableID</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a011aed59fb2b65595693d99d38ba0c08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a94adae392bc34d4c8762568e9144ff41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SegmentCabinIndexMap_T &amp;</type>
      <name>getSegmentCabinIndexMap</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a61270524eec03aed89e74b2969428866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClassIndexMap_T &amp;</type>
      <name>getClassIndexMap</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a7cdec57d8704b874d340a1fe5273e4ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClassIndex_T &amp;</type>
      <name>getClassIndex</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a68ee7f2592ee7e55b73562cbc7cf00f6</anchor>
      <arglist>(const MapKey_T &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const SegmentDataID_T &amp;</type>
      <name>getSegmentDataID</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a110fbd769ae5e1beb4dc820408ec0da6</anchor>
      <arglist>(const SegmentCabin &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDSnapshotView_T</type>
      <name>getConstSegmentCabinDTDBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>af635c56879767012690d001d63ea90f3</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDRangeSnapshotView_T</type>
      <name>getConstSegmentCabinDTDRangeBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a0389a948a5507cd5f64ee6f772865823</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDSnapshotView_T</type>
      <name>getSegmentCabinDTDBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a742d4cbc12f9a531fc090c73ec6a5d5b</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDRangeSnapshotView_T</type>
      <name>getSegmentCabinDTDRangeBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a8896ca0d054c8bd381b96fe0571bd70b</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDSnapshotView_T</type>
      <name>getConstSegmentCabinDTDCancellationSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ab9767ca8ddd3034c1d3a4b2e3cebed1d</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDRangeSnapshotView_T</type>
      <name>getConstSegmentCabinDTDRangeCancellationSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ae9eceddbe5b385eb83c25da158a08fac</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDSnapshotView_T</type>
      <name>getSegmentCabinDTDCancellationSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a3bb215938704c7613050f99396f6ad61</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDRangeSnapshotView_T</type>
      <name>getSegmentCabinDTDRangeCancellationSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a3d2228ae94bf6f75eec9e0ac4d6ad829</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDSnapshotView_T</type>
      <name>getConstSegmentCabinDTDProductOrientedNetBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>acebe1dc2edeea42d50b42faac6cc2e01</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDRangeSnapshotView_T</type>
      <name>getConstSegmentCabinDTDRangeProductOrientedNetBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a431150c534ec5511ada49e7b6440e9ee</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDSnapshotView_T</type>
      <name>getSegmentCabinDTDProductOrientedNetBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ac648f10c48c6e59c49ba71dc5d02642e</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDRangeSnapshotView_T</type>
      <name>getSegmentCabinDTDRangeProductOrientedNetBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a50d6b487b273225c2a853267ba88813a</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDSnapshotView_T</type>
      <name>getConstSegmentCabinDTDPriceOrientedNetBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a5a808d6cbcf41b16d7893f3bb8cb8bdc</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDRangeSnapshotView_T</type>
      <name>getConstSegmentCabinDTDRangePriceOrientedNetBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a3c11d09cf5b42e8a055ac6d8788784a7</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDSnapshotView_T</type>
      <name>getSegmentCabinDTDPriceOrientedNetBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ace066133d19f3a9e10cb082bfde31b3f</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDRangeSnapshotView_T</type>
      <name>getSegmentCabinDTDRangePriceOrientedNetBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a9d8f3a8d0a1ad69c3bfffbe84db6c38b</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDSnapshotView_T</type>
      <name>getConstSegmentCabinDTDProductOrientedGrossBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aa1264d82c906547362299d737e31cbb9</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDRangeSnapshotView_T</type>
      <name>getConstSegmentCabinDTDRangeProductOrientedGrossBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aed344e7b7c046498d5ca1a0f66a5c552</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDSnapshotView_T</type>
      <name>getSegmentCabinDTDProductOrientedGrossBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a9a3569e24803dbacb96dc3c94ebae6be</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDRangeSnapshotView_T</type>
      <name>getSegmentCabinDTDRangeProductOrientedGrossBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a97f92ea8565fbe6a93bb773177a65015</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDSnapshotView_T</type>
      <name>getConstSegmentCabinDTDPriceOrientedGrossBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>af049b4939ce50bdbbd0163cec25e1e14</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDRangeSnapshotView_T</type>
      <name>getConstSegmentCabinDTDRangePriceOrientedGrossBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a2b555be626540bf01126b0b87f149f26</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDSnapshotView_T</type>
      <name>getSegmentCabinDTDPriceOrientedGrossBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a3b15ed01ea4d46e4d19f5956f7b029f1</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDRangeSnapshotView_T</type>
      <name>getSegmentCabinDTDRangePriceOrientedGrossBookingSnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ae27101d641298b94c3cab19f1aa4aec5</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDSnapshotView_T</type>
      <name>getConstSegmentCabinDTDAvailabilitySnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a1c088e5a4aed4027a07c5e451f44da07</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentCabinDTDRangeSnapshotView_T</type>
      <name>getConstSegmentCabinDTDRangeAvailabilitySnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>abcd0db4dc40d776144b752b48c486545</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T) const </arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDSnapshotView_T</type>
      <name>getSegmentCabinDTDAvailabilitySnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ab6b3d9dc7690c4e06187f9c8ea03e691</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>SegmentCabinDTDRangeSnapshotView_T</type>
      <name>getSegmentCabinDTDRangeAvailabilitySnapshotView</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ab8e0bb0feeb0f1b5cb9c2b125f8a4ac6</anchor>
      <arglist>(const SegmentDataID_T, const SegmentDataID_T, const DTD_T, const DTD_T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initSnapshotBlocks</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a682cbd37dd1a2bd445b4e5a4ca77acbb</anchor>
      <arglist>(const SegmentCabinIndexMap_T &amp;, const ClassIndexMap_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a96ecf82eccac54596a45ec78a7205345</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a62a1745f813868c9139b514837b4ea6f</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ab0631fab92c0a5a0ddae6be87d32521b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a66d0361c0a265d35e58f174dabcb3122</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a8bd362516467c3b43d16a87ddfaa99df</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SegmentSnapshotTable</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a90399fd9045e8d5a3389e4bf50924df2</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SegmentSnapshotTable</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ae3ff0ba376af35bf4b10a9d0d86509f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a8be1f1c92bc6b12d90e925740e281b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aee357d0e8d17ef54936a8340dbb0b80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a3a2c6e0a6b65b2624fe3f02cfa198205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SegmentCabinIndexMap_T</type>
      <name>_segmentCabinIndexMap</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a8f8d84a2a7d1086e3899147c0a465b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClassIndexMap_T</type>
      <name>_classIndexMap</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ae13b4080a1e581a2625951f4daa76394</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnapshotBlock_T</type>
      <name>_bookingSnapshotBlock</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a5899bf0ea077e6ae993a5a19113f6383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnapshotBlock_T</type>
      <name>_cancellationSnapshotBlock</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a520d8b510b4d4f8be1244a177d4b986c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnapshotBlock_T</type>
      <name>_productOrientedNetBookingSnapshotBlock</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>adb88586ffa942f82fa14f999173afd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnapshotBlock_T</type>
      <name>_priceOrientedNetBookingSnapshotBlock</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aab2948994c368aed6ac125e1bf742926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnapshotBlock_T</type>
      <name>_productOrientedGrossBookingSnapshotBlock</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ae8d856ca8d1831221ce89684c59eb5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnapshotBlock_T</type>
      <name>_priceOrientedGrossBookingSnapshotBlock</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aaf05cf7bf1725e511fab75cd43491c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnapshotBlock_T</type>
      <name>_availabilitySnapshotBlock</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a316c24dbe68b39c4fad4591a0bbbd40a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::SegmentSnapshotTableKey</name>
    <filename>a00193.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>SegmentSnapshotTableKey</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ae4539c08a5a5d980790a223c703ae2b7</anchor>
      <arglist>(const TableID_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SegmentSnapshotTableKey</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>aadebb89cef3af6ad3793e4b9a6ceecde</anchor>
      <arglist>(const SegmentSnapshotTableKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SegmentSnapshotTableKey</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ae86238a764fa74342b1843a5bfc7f61d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TableID_T &amp;</type>
      <name>getTableID</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>acf6e4267096120e324c5194667c31f5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>aee7e02e815aba02c9230c6b72aac469b</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a80b8e0f3ca22ef6a23b1ffe67ed57ef5</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a6a2b5f6c97e75e4bf44a5ddcaa0994f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a58f2fbc02a8d0fe0b7ee402e5502dc2d</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::SerialisationException</name>
    <filename>a00194.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>SerialisationException</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>afd08d747e69320a55efd66ad4594ecce</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::ServiceAbstract</name>
    <filename>a00195.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ServiceAbstract</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a9f8222199d4a7da94460cd2f09906c09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>toStream</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a0160e5b0c91dcc303a8fcf089b5b818f</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a6acd0718dac57cfa049d379778f34408</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ServiceAbstract</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>ad4430ec0f38fee15cdeeed0818a17774</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::ServiceInitialisationType</name>
    <filename>a00196.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_ServiceInitialisationType</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a830018ee1081f04746cf4bd3678d7e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_YET_INITIALISED</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a830018ee1081f04746cf4bd3678d7e61a7ecc16c2e7a52cde634aee6fea95fb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_PARSING</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a830018ee1081f04746cf4bd3678d7e61af363da2c549ed302f288c75100a4b8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUILTIN_SAMPLE</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a830018ee1081f04746cf4bd3678d7e61a0fe2237ce0d4ae283ae031997cb6dfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a830018ee1081f04746cf4bd3678d7e61a3ea97f855f3a5447d4486987d6c12e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_ServiceInitialisationType</type>
      <name>getType</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a704c909fbd2ea4051c9f9963c11abaab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getTypeAsChar</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ae30ee531833c0567bc32ec152541b1d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeAsString</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>afb763b0dd35907bf00e975c4f0eb8854</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a69aad4dca0ec2304fa35d6820deba4f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a1c8e89c6da0ced9a1cb589f51733d621</anchor>
      <arglist>(const EN_ServiceInitialisationType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceInitialisationType</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>af6a172a7a9a92a3993c011f4fe88896e</anchor>
      <arglist>(const EN_ServiceInitialisationType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceInitialisationType</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a53735ef8384042f98554a51223191e9a</anchor>
      <arglist>(const char iType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceInitialisationType</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a22c5ce94d7983d843e6a536d5d08c9bf</anchor>
      <arglist>(const std::string &amp;iType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceInitialisationType</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a114dad224e8bd21f2c96e7107f91b95e</anchor>
      <arglist>(const ServiceInitialisationType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ad06bdf5b165ba899c87bae0b3a0ddcbd</anchor>
      <arglist>(const EN_ServiceInitialisationType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EN_ServiceInitialisationType</type>
      <name>getType</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a017937790c33d33aaec76a569cce36c1</anchor>
      <arglist>(const char)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getTypeLabel</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a3decafce4affdefe1c4f2d5902bd11ab</anchor>
      <arglist>(const EN_ServiceInitialisationType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getTypeLabelAsString</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a368b3e938fa1aed49b7fef7d5ca77f26</anchor>
      <arglist>(const EN_ServiceInitialisationType &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a2745fcecf3e91b686749abff6f9b17b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::SimpleNestingStructException</name>
    <filename>a00197.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>SimpleNestingStructException</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a7f3ef57d9980d93f75a92e9e7a1b07b2</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::SimpleNestingStructure</name>
    <filename>a00198.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>NestingStructureKey</type>
      <name>Key_T</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>ac887a795eb2f1e1d6d0ed9abec76e9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>abcc10a6ae0eb922bfcc0bc1ed61f9f4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>ab266b7432290d612f69371569d42af60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a4ce664f5770df867437f2575d5bc53b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NestingNodeList_T &amp;</type>
      <name>getNestingNodeList</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a059b7a6f389fe26026a4d096a1ecc067</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a8fcd383b9592ececaad7726d9756cc8f</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a1bfd31531cf1658ca21fc826109f0361</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a7d9224da31ebee1a0bf8d6367f4107b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>ad0bf19d64e5c375d506babb05cd24e86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a039e4ad955fe3218e1442bfea4858c13</anchor>
      <arglist>(Archive &amp;ar, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleNestingStructure</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a7c2e8b95f2e7937f3396ee4f1bf5354f</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleNestingStructure</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>aa6d6c3239d2f02c958191875dc9fd5a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>swift::SKeymap</name>
    <filename>a00199.html</filename>
    <member kind="function">
      <type></type>
      <name>SKeymap</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a0e89f8d4b43ea82651cab1e868bf4c23</anchor>
      <arglist>(bool PrintableBound=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SKeymap</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a89011a4300cabf9a358e1ccbed70237f</anchor>
      <arglist>(Keymap Pattern)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SKeymap</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a07d05dbe168af4677d6c533598effca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a08053921f956bc20307f1e4ed6a5d1a9</anchor>
      <arglist>(int Key, KeyCallback Callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Unbind</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aced21d00e68e1b0b58f7a108299e881d</anchor>
      <arglist>(int Key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SKeymap</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad8f3f86e21685f01f7cc290dfd594237</anchor>
      <arglist>(const SKeymap &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SKeymap &amp;</type>
      <name>operator=</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a1d997b97625ef6dd7c46e56b3fa1f28c</anchor>
      <arglist>(const SKeymap &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SReadline</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6f7cd5caa0ddba1eacbfa81f0c5a67d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::SnapshotStruct</name>
    <filename>a00200.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a911e829db052d50b75a6d1c996115ca7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T &amp;</type>
      <name>getSnapshotTime</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a68fdc948e414d4b65c5fd520525c2bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>acdbfceca5829152d6c029fd39042b2ae</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a282de1cb0fd179d9716ee141d3ba3250</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>ab7bbd56ec9e700ca6f8f5a4a68cd69b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SnapshotStruct</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a416bbfd87446d3e80aca3fad184becf6</anchor>
      <arglist>(const AirlineCode_T &amp;, const DateTime_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SnapshotStruct</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a097ed10e1643b3a75686486bd88f1b6e</anchor>
      <arglist>(const SnapshotStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SnapshotStruct</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>acc9259c40291ec5b44e44c6cfb4ca3a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::SQLDatabaseConnectionImpossibleException</name>
    <filename>a00201.html</filename>
    <base>stdair::SQLDatabaseException</base>
    <member kind="function">
      <type></type>
      <name>SQLDatabaseConnectionImpossibleException</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a0462fc9f48cca6ad657b999672883e4f</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::SQLDatabaseException</name>
    <filename>a00202.html</filename>
    <base>stdair::RootException</base>
    <member kind="function">
      <type></type>
      <name>SQLDatabaseException</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a3da3ddf9b2785b23f57799182af51575</anchor>
      <arglist>(const std::string &amp;iWhat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ac30aff721b6d55314ca40286a80b1e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_what</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a2ea1479930a041b204bc461dcc5efda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>swift::SReadline</name>
    <filename>a00203.html</filename>
    <member kind="function">
      <type></type>
      <name>SReadline</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ae047459c29f025dff1a6234e131950af</anchor>
      <arglist>(const size_t Limit=DefaultHistoryLimit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SReadline</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a81afae70f35d55199929283c2fd5982b</anchor>
      <arglist>(const std::string &amp;historyFileName, const size_t Limit=DefaultHistoryLimit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SReadline</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>af633b1fe25ae6772887009fd439bff1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetLine</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ad926b06b623644879e8586aa33996d80</anchor>
      <arglist>(const std::string &amp;Prompt)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetLine</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a360eb649447e110156dcce18f772d890</anchor>
      <arglist>(const std::string &amp;Prompt, Container &amp;ReadTokens)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetLine</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>afd94496bedd8c62a38e141c262f60e2f</anchor>
      <arglist>(const std::string &amp;Prompt, Container &amp;ReadTokens, bool &amp;BreakOut)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetLine</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a96e147cfed94e44d8e9b9450a0232e9b</anchor>
      <arglist>(const std::string &amp;Prompt, bool &amp;BreakOut)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetHistory</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ac15721b26fc85a887451b6c574a0415e</anchor>
      <arglist>(ContainerType &amp;Container)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SaveHistory</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a5ca797f8804448e1bf4546f55ae5e365</anchor>
      <arglist>(std::ostream &amp;OS)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SaveHistory</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a33558cdb94004f85c0962028ff260c1d</anchor>
      <arglist>(const std::string &amp;FileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearHistory</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aab1c29093bf3d1c4dec37b9be857c10e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LoadHistory</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a6abb1cc87f61f4c660260fdfcfa3f101</anchor>
      <arglist>(std::istream &amp;IS)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LoadHistory</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a5559f539875c140eda17eeaab9181eaf</anchor>
      <arglist>(const std::string &amp;FileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RegisterCompletions</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>af0750b68c2cf17efdb4e8cca3d2f7ced</anchor>
      <arglist>(const ContainerType &amp;Container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetKeymap</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a8a3b8f1347c6a90e20b1014db7c04cec</anchor>
      <arglist>(SKeymap &amp;NewKeymap)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::STDAIR_Service</name>
    <filename>a00204.html</filename>
    <member kind="function">
      <type></type>
      <name>STDAIR_Service</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a637170e7bae49452a3f671f3b424175c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STDAIR_Service</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a80358c1509f25f20728038863f34f7eb</anchor>
      <arglist>(const BasLogParams &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STDAIR_Service</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>afe5e39092c115973fefc24db16431d2a</anchor>
      <arglist>(const BasLogParams &amp;, const BasDBParams &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~STDAIR_Service</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a825e6430b01a735166e2b6327b2a138f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildSampleBom</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>acdd70b8e3f855bd447d876327be12e2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildDummyInventory</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a18539725203ad42b0946b6a47ec89a02</anchor>
      <arglist>(const CabinCapacity_T &amp;iCabinCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildDummyLegSegmentAccesses</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>aae87462db42e314334601356bca6f7e0</anchor>
      <arglist>(BomRoot &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildSampleTravelSolutionForPricing</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a05fa48929cad1c9ff21c1e49eccc9975</anchor>
      <arglist>(TravelSolutionList_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildSampleTravelSolutions</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ad633142f9b2d06d68969a0380017d7c3</anchor>
      <arglist>(TravelSolutionList_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BookingRequestStruct</type>
      <name>buildSampleBookingRequest</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a863a64187ddfa21e8798e2092b0d0210</anchor>
      <arglist>(const bool isForCRS=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clonePersistentBom</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ad69a7a149e5128a945d0cd3bc3d0b598</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>jsonExportFlightDateList</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a464646d64f21ddea8fbc3adc08fa37dc</anchor>
      <arglist>(const AirlineCode_T &amp;iAirlineCode=&quot;all&quot;, const FlightNumber_T &amp;iFlightNumber=0) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>jsonExportFlightDateObjects</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a8ea8ef207b84cc2eb707d3ce7b758843</anchor>
      <arglist>(const AirlineCode_T &amp;, const FlightNumber_T &amp;, const Date_T &amp;iDepartureDate) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>jsonExportEventObject</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a929a3aee51550b805ca187f50a88aecc</anchor>
      <arglist>(const EventStruct &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>jsonExportConfiguration</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>aadbf2e01b2fc54ac76cc248d963feddd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jsonImportConfiguration</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a0dd55adec7c9f1f8a4bc72b23c56f73e</anchor>
      <arglist>(const JSONString &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>list</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a5a6c3dc9f36b1851542c252cead33745</anchor>
      <arglist>(const AirlineCode_T &amp;iAirlineCode=&quot;all&quot;, const FlightNumber_T &amp;iFlightNumber=0) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>listAirportPairDateRange</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a54835bce4ff238b17e7ec691f969caa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a398ada0bbbd8c24e30ea0889c7bfa9f3</anchor>
      <arglist>(const AirlineCode_T &amp;, const FlightNumber_T &amp;, const Date_T &amp;iDepartureDate) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>affd4bebae3e65f399cbe609ac458edcd</anchor>
      <arglist>(const AirportCode_T &amp;, const AirportCode_T &amp;, const Date_T &amp;iDepartureDate) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>configDisplay</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>af9b7797d7fe96623b463d8cc762fbccb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>csvDisplay</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a62476a3bb177d87cad13fd92b5d8a3d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>csvDisplay</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a189e8bc9ca90a2300ecc00d2d4355197</anchor>
      <arglist>(const BomRoot &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>csvDisplay</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>abf7220ab6ef377af187233cc6729c2c6</anchor>
      <arglist>(const AirlineCode_T &amp;, const FlightNumber_T &amp;, const Date_T &amp;iDepartureDate) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>csvDisplay</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>af9b7f7475ebb19a83d938960a59a94e0</anchor>
      <arglist>(const TravelSolutionList_T &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>csvDisplay</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>aae652dd8a9638e2d18d0676e1925befb</anchor>
      <arglist>(const AirportCode_T &amp;, const AirportCode_T &amp;, const Date_T &amp;iDepartureDate) const </arglist>
    </member>
    <member kind="function">
      <type>BomRoot &amp;</type>
      <name>getBomRoot</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>af1ff867afd46468e6966211f188fc7f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomRoot &amp;</type>
      <name>getPersistentBomRoot</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>aabeac221a2fd3a2733e68883e434c86c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BasLogParams</type>
      <name>getLogParams</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a63e6d8a75d733cea0c77e09db1c6b71d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BasDBParams &amp;</type>
      <name>getDBParams</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a0ccf2466abaca0c2e73aeab685e30b4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ServiceInitialisationType &amp;</type>
      <name>getServiceInitialisationType</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a3d1b5ba6f9497957440de09c1162ce42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importINIConfig</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a056b7e1b497036f1ae6410afe0d82f7d</anchor>
      <arglist>(const ConfigINIFile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importConfigValue</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ab2448a89699e507229049a842f8f3082</anchor>
      <arglist>(const std::string &amp;iValue, const std::string &amp;iPath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportConfigValue</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ae4853234c7e34f07238ca5b93f74003b</anchor>
      <arglist>(ValueType &amp;ioValue, const std::string &amp;iPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAirlineFeatures</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ae7b5f939a79b636d834171176e3fd0df</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::STDAIR_ServiceContext</name>
    <filename>a00205.html</filename>
    <base>stdair::ServiceAbstract</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>toStream</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a0160e5b0c91dcc303a8fcf089b5b818f</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a6acd0718dac57cfa049d379778f34408</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>STDAIR_Service</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a1ed04ed1a9fc939ddb7831ca0dd401e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacSTDAIRServiceContext</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>accaf08f464c9982c022e554f77d2c526</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::StructAbstract</name>
    <filename>a00206.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StructAbstract</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>affb2d2b7e125a0de1dc5a843e05618df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string</type>
      <name>describe</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a7123f5ad4e57315617f89ca67111fa51</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StructAbstract</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a344a4042bd81e23e5c186fdfc5a70f60</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::TimePeriod</name>
    <filename>a00207.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>TimePeriodKey</type>
      <name>Key_T</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a2189647b592ac06f152f7252818ac250</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>af4574688cf6985aa2c4015e7bdf41224</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>addd0453a3718de3e5eee805a8974cbd3</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a813f3060d93b09f2c98949b1021e9ff4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>abeaeb623b9d35fae8005af554caaf061</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a1db0ea5ab49f118c30f04d43cc6b887e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a6e88331cfefb08dae089762ed3a9afd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>aabc555dd9bffa258167a0d57ef00e8fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Time_T &amp;</type>
      <name>getTimeRangeStart</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>af1852cfd1395dc0537e29522a4758478</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Time_T &amp;</type>
      <name>getTimeRangeEnd</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ad7780d31a984d516454db80abed631cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDepartureTimeValid</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>aabfa42cffbd0516a52cacbc9d831ab3f</anchor>
      <arglist>(const Time_T &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimePeriod</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>abecc7ce4f2d5236171fa17614ceb15e8</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TimePeriod</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a1f8b882177851aa7bf9aa0f6980c443b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>aad5cfe41ca292b6a499b53748cdaa209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a09ae5d3fbf19bf61a8090356c63f5b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ae543c108b411c19a3b0f8c6c40fe0aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::TimePeriodKey</name>
    <filename>a00208.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>TimePeriodKey</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a8af52a2eadd3063c2fc5031c6b022938</anchor>
      <arglist>(const Time_T &amp;, const Time_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimePeriodKey</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>afcdb70502b273db6c9fd4fc4a93a0174</anchor>
      <arglist>(const TimePeriodKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimePeriodKey</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a3ba5bbf4bbc884522ecb686a70a53207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Time_T &amp;</type>
      <name>getTimeRangeStart</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a5cd1ae7baf91b8ecf6652f3c8f928c9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Time_T &amp;</type>
      <name>getTimeRangeEnd</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>add395d1c195bfcbef727df37ca976edc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a3bb68a16f0aaeb02ae93f41142b7f15e</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a5dfdc9da3566a406437dad4a5a98709f</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a24caafc98da4c43d3207cbdd085640a1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::TravelSolutionStruct</name>
    <filename>a00209.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const SegmentPath_T &amp;</type>
      <name>getSegmentPath</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a2a0109076bc5e4bbceb909850f310d50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClassAvailabilityMapHolder_T &amp;</type>
      <name>getClassAvailabilityMapHolder</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a52a63c80644684007e27374859cb68f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClassObjectIDMapHolder_T &amp;</type>
      <name>getClassObjectIDMapHolder</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a01d02ef3b1c968acd6ea00b505a55ecf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClassYieldMapHolder_T &amp;</type>
      <name>getClassYieldMapHolder</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>affc394db1e80222cc35c452e4ef577fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BidPriceVectorHolder_T &amp;</type>
      <name>getBidPriceVectorHolder</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ac98b6218ed69df843c63b9bdb6e039e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClassBpvMapHolder_T &amp;</type>
      <name>getClassBpvMapHolder</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a5ada64a8918e0f2a490c6ddb7cc28b8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FareOptionList_T &amp;</type>
      <name>getFareOptionList</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aad235887e40ceb8611be081438178826</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FareOptionList_T &amp;</type>
      <name>getFareOptionListRef</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>af6db3f883f5058d8e1a403a085cfa6f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FareOptionStruct &amp;</type>
      <name>getChosenFareOption</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a4035f7abf6efb6633e01cc955f0f4547</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSegment</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a305950a9eb56c6c61eb79222a9e482a6</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClassAvailabilityMap</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ad014befefab597eeb7ae9953d6d6d0f4</anchor>
      <arglist>(const ClassAvailabilityMap_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClassObjectIDMap</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a695a23343ec9e97f4333973531a7a1b8</anchor>
      <arglist>(const ClassObjectIDMap_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClassYieldMap</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a616fe39da4640504a27c836f5994beb0</anchor>
      <arglist>(const ClassYieldMap_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBidPriceVector</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a664b1faa5f9be5f383642f58b4d7219d</anchor>
      <arglist>(const BidPriceVector_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClassBpvMap</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>abcadb1151fb08a9ac8d4de472d6418ad</anchor>
      <arglist>(const ClassBpvMap_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFareOption</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa799932ab0aa84f3c757c362c151f0cf</anchor>
      <arglist>(const FareOptionStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChosenFareOption</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ac13ba68d6ca8fade6eaffaf9b6b246b4</anchor>
      <arglist>(const FareOptionStruct &amp;iChosenFO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a60c7624da1035a1f07079a7307c744b5</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aea5f674aa64f45b57f51142844db7a9c</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a2342cae6b3f628ebe5b74777a614c2e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>display</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>acc6a7ea9ccb397d9c8dd50159a6a3050</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeSegmentPath</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ae02cad1d64ca3859f4361e4c605d0079</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TravelSolutionStruct</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a731a99735b1dc8d2b249a80eab954c93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TravelSolutionStruct</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aad9128eb2ce97ae264459c08770ad03d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soci::type_conversion&lt; stdair::AirlineStruct &gt;</name>
    <filename>a00210.html</filename>
    <member kind="typedef">
      <type>values</type>
      <name>base_type</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a4709a82e8d7c987795a50ddfbed50d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>from_base</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a0d4af61684b104fb354bf1ba234c3b4b</anchor>
      <arglist>(values const &amp;iAirlineValues, indicator, stdair::AirlineStruct &amp;ioAirline)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_base</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>aee738952c1c6737c14679a1ae7754a9e</anchor>
      <arglist>(const stdair::AirlineStruct &amp;iAirline, values &amp;ioAirlineValues, indicator &amp;ioIndicator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeWithSize</name>
    <filename>a00211.html</filename>
    <templarg>size</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>UInt</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a133efc1585facfe51a535c4a7b233684</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeWithSize&lt; 4 &gt;</name>
    <filename>a00212.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Int</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>af29a19528b5da0137818cc208ec05fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>UInt</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>aedd1425478450102b1c637d2db6a7d26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeWithSize&lt; 8 &gt;</name>
    <filename>a00213.html</filename>
    <member kind="typedef">
      <type>long long</type>
      <name>Int</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>af02c7e5d997bd247bdb252ce9537a295</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>UInt</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>aad4d80a31c855d3f6feb970627dce6e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeWithSize&lt; sizeof(RawType)&gt;</name>
    <filename>a00211.html</filename>
    <member kind="typedef">
      <type>void</type>
      <name>UInt</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a133efc1585facfe51a535c4a7b233684</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::UnconstrainingMethod</name>
    <filename>a00214.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="enumeration">
      <type></type>
      <name>EN_UnconstrainingMethod</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>afb0f69a9f4c59f3916279a23dad4fd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>afb0f69a9f4c59f3916279a23dad4fd11ad08ded9d9941d22c9955cf52242844ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_VALUE</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>afb0f69a9f4c59f3916279a23dad4fd11a3ffe42b43485f5d5e6a9c572ad3dad3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EN_UnconstrainingMethod</type>
      <name>getMethod</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a1d82bebf616f96799094ed29a9a0099c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMethodAsString</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a06fe01f9f9fcaf22bdc23c1dd6065450</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a1ec31a7f71343ab2a9a7e7962672c0cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>aecc48459c9ec5677202ad968dc5afbc9</anchor>
      <arglist>(const EN_UnconstrainingMethod &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnconstrainingMethod</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a4c866b74a9677bed53557faf56fd1c2d</anchor>
      <arglist>(const EN_UnconstrainingMethod &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnconstrainingMethod</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a7a49518ba609590d0b9ab9cabcbaf8be</anchor>
      <arglist>(const char iMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnconstrainingMethod</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>ab5ec40965a977675adb7943da8841a15</anchor>
      <arglist>(const UnconstrainingMethod &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2388a43bf434dfe71f88e97d4e8cfb1d</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromStream</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2bd2d9188515a193d21ec0d72f5b078</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getLabel</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>ae50c6958011b0380f74c24901cf03188</anchor>
      <arglist>(const EN_UnconstrainingMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getMethodLabel</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a6877bd36e51f6b315cc0bbb69f905bc4</anchor>
      <arglist>(const EN_UnconstrainingMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getMethodLabelAsString</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>ae5d29a69545d4e131cf560534a5e1894</anchor>
      <arglist>(const EN_UnconstrainingMethod &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>describeLabels</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a4d83b71ef9f27e2f9a203cd0e92a3cb5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::VirtualClassStruct</name>
    <filename>a00215.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type>const BookingClassList_T &amp;</type>
      <name>getBookingClassList</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>ab08773cae14ca82b67ce19bb5c7a1574</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Yield_T &amp;</type>
      <name>getYield</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a7a6eb8f02643e00167ecbc661a910ac8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MeanValue_T &amp;</type>
      <name>getMean</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>aebcfe76478d1476fdf8bc39ebe8de742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StdDevValue_T &amp;</type>
      <name>getStdDev</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>acfe3bbcb942d2b5e9d04aceb5c7a3742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BookingLimit_T &amp;</type>
      <name>getCumulatedBookingLimit</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a5fa498dd0afdecbf6c5e574f525aa0e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ProtectionLevel_T &amp;</type>
      <name>getCumulatedProtection</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a23654b58513cdb71fed4da9ec0df8266</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GeneratedDemandVector_T</type>
      <name>getGeneratedDemandVector</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>ac6a986b98e3595fe909035d5035193ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYield</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a395a31e8c6d48eabdc65c7d3a644f0e0</anchor>
      <arglist>(const Yield_T &amp;iYield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMean</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a39961bb905462eee845224d6360ca94b</anchor>
      <arglist>(const MeanValue_T &amp;iMean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdDev</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a9bb0ff82d0c8e158002931827d545d46</anchor>
      <arglist>(const StdDevValue_T &amp;iStdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumulatedBookingLimit</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>adc8350dd6ef752fc49a60e98b54f31f7</anchor>
      <arglist>(const BookingLimit_T &amp;iBL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCumulatedProtection</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>abf42d8edb75f80c0e8eb6a688dc77a02</anchor>
      <arglist>(const ProtectionLevel_T &amp;iP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBookingClass</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a78569d5666ab0999b0b75768456a0715</anchor>
      <arglist>(BookingClass &amp;iBookingClass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a5d6425d8420447992165a9b2c0adb458</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a2b933a3cc6c6c9e5c4ce57f1ec33ae69</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>afc7942d04ded7e513bccfeb29b918e3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VirtualClassStruct</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a60e6b0a72936150a253d70367b98b682</anchor>
      <arglist>(const VirtualClassStruct &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VirtualClassStruct</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a1f881326db9fa27f5f77a789773f0844</anchor>
      <arglist>(const BookingClassList_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VirtualClassStruct</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>ae920a39c6f7f16c9de51372d67839595</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::YieldFeatures</name>
    <filename>a00216.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>YieldFeaturesKey</type>
      <name>Key_T</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a3da8999a483f79f56717a53bf171328c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a860bd38a0c4f00a363e955a3e9c0666f</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a1c8d73e0666c0de03798373477526017</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a66394504c608de9c19a45a4dfb467bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a0035fdca6aa732b0f7ebb1e50b82f8ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>aae3518a7204dfb781d967e462865afc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>aa2c17e53cf1bd87f1e090e9aef7aa8de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HolderMap_T &amp;</type>
      <name>getHolderMap</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a79476ce72e3ca0189503bd4cbe991265</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T &amp;</type>
      <name>getCabinCode</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>acf72c64236fda4e2a902ef50cc9b2ade</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TripType_T &amp;</type>
      <name>getTripType</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a105a492f5ebf83a62c74acb82df2850e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTripTypeValid</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ab5e0354058438cf8d42534fa79f8f9b6</anchor>
      <arglist>(const TripType_T &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>YieldFeatures</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>aec0f23a423b2b7f335f2dcec98d2f37f</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~YieldFeatures</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a0d669b8d49a0e7f5ea224b23343b8363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>aae06029cb6336ebc2abd2905a10a1070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>acedae1e2f63bd6b818d652853479131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HolderMap_T</type>
      <name>_holderMap</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a1936c2ca282fd0e4b65e87260a807b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacCloneBom</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ac97f726861da60814eaea7d9563826d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::YieldFeaturesKey</name>
    <filename>a00217.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>YieldFeaturesKey</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a3a13c13c0be686aa21146dfa4e18a220</anchor>
      <arglist>(const TripType_T &amp;, const CabinCode_T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YieldFeaturesKey</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ad93e9f013564aecd6d3e5491ec425195</anchor>
      <arglist>(const YieldFeaturesKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~YieldFeaturesKey</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a1fadd02b8d185e0e037ee1a85ac8802f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TripType_T &amp;</type>
      <name>getTripType</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a0c0dba69f36e348e631cd5ff383b5a54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T &amp;</type>
      <name>getCabinCode</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a073d3257242b1934c905653dd2da485f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a66dd15dd9b894977dd91daddb0df72f5</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a9590661c1f463c3340fdf635801c98d2</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a1e456a9fb33d6129b025a2b85ded4398</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::YieldRange</name>
    <filename>a00218.html</filename>
    <base>stdair::StructAbstract</base>
    <member kind="function">
      <type></type>
      <name>YieldRange</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a85aabb92b59b1230cdb16994538bae70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YieldRange</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aaed74fcfba23c91bc07b70f593993862</anchor>
      <arglist>(const YieldRange &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YieldRange</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aeaa254de20fa6fe1ca7f3c1c7e1f7638</anchor>
      <arglist>(const Yield_T iUpperYield)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YieldRange</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aa1a7b57790406fc6e953ced5640b271f</anchor>
      <arglist>(const Yield_T iUpperYield, const Yield_T iAverageYield)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YieldRange</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aa1257d16beed20079f0d98d720dc8cbe</anchor>
      <arglist>(const Yield_T iUpperYield, const Yield_T iAverageYield, const Yield_T iLowerYield)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~YieldRange</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>af9e9b14a41d2bc66a94eb8644bfd6145</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Yield_T</type>
      <name>getUpperYield</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aa2f6305549d5d7101560989edc7b1a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Yield_T</type>
      <name>getAverageYield</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a70b7c9ef0d3ed25ac06bb66fb30673e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Yield_T</type>
      <name>getLowerYield</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a868bdd8f5ed919881f2e11a746a861d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpperYield</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ae10c4ff17a4c87b6559e4d497b4aa7e0</anchor>
      <arglist>(const Yield_T iUpperYield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAverageYield</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ad1f2951c0d841dc1ba109f0121c287f8</anchor>
      <arglist>(const Yield_T iAverageYield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowerYield</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a7719f8756d099860cf8de1f0b1e03b08</anchor>
      <arglist>(const Yield_T iLowerYield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ac46c01c379a5519579dcd423ed16c930</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a28bb586a627658eebe1c5a8bd787450b</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describe</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a95e050db776565d58c424422b523e412</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdair::YieldStore</name>
    <filename>a00219.html</filename>
    <base>stdair::BomAbstract</base>
    <member kind="typedef">
      <type>YieldStoreKey</type>
      <name>Key_T</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a141f912f2c4dfd7152dc97b96477a394</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>ab028d8418cf172bb8b7632c5ed276926</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>BomAbstract *const</type>
      <name>getParent</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a9abe2da9252753de9622062226e941c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a6eab9d343c88913da30da58e458d8d4e</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a09470b68521daa2b8a0bbbc7a19e2175</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>describeKey</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>adea871e38021eddbdbbb2eedd186972d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Key_T &amp;</type>
      <name>getKey</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>ab22a148f22566c88a6bfbc5a877ef589</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a130f7d7dfade380b88b5b06abcbd7c39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>YieldStore</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>aee0cab1b720e19ec84f2b26c2d16a06f</anchor>
      <arglist>(const Key_T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>YieldStore</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a666503108ad6000341ec13e66b8fc01d</anchor>
      <arglist>(const YieldStore &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~YieldStore</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>aeeae09584e22cb80302fc570196927c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key_T</type>
      <name>_key</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a40c27f032a179172c9594003d91932b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BomAbstract *</type>
      <name>_parent</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a9667756eea9a71ff96cfe851cd7d3586</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBom</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>ac2bbbadbccaf2e36d2033e73c8cc6dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FacBomManager</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>acd795084cfd6d138c620a46d5113fd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stdair::YieldStoreKey</name>
    <filename>a00220.html</filename>
    <base>stdair::KeyAbstract</base>
    <member kind="function">
      <type></type>
      <name>YieldStoreKey</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>ac863d18cc437a48f9135c0327f2c8c09</anchor>
      <arglist>(const AirlineCode_T &amp;iAirlineCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YieldStoreKey</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a209346bf10a70d61eeda04c43fdbbb9f</anchor>
      <arglist>(const YieldStoreKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~YieldStoreKey</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a4c445eec5245f26820e159429f232c35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T &amp;</type>
      <name>getAirlineCode</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a6c1db7e36218cb3118ec1a262a6810de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a7d53a6e38a9ae268a74971e933c62838</anchor>
      <arglist>(std::ostream &amp;ioOut) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a5fed2bf8d046f329d42aae2df3a1a7f0</anchor>
      <arglist>(std::istream &amp;ioIn)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>abfeda51b83341b3c0efc2e5332c54459</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>@310</name>
    <filename>a00553.html</filename>
  </compound>
  <compound kind="namespace">
    <name>boost</name>
    <filename>a00554.html</filename>
    <namespace>boost::serialization</namespace>
  </compound>
  <compound kind="namespace">
    <name>boost::serialization</name>
    <filename>a00555.html</filename>
  </compound>
  <compound kind="namespace">
    <name>bpt</name>
    <filename>a00556.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>ptree</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a51c586252f559bf084c3ba2a00d3a96e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>soci</name>
    <filename>a00557.html</filename>
    <class kind="struct">soci::type_conversion&lt; stdair::AirlineStruct &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>a00558.html</filename>
  </compound>
  <compound kind="namespace">
    <name>stdair</name>
    <filename>a00559.html</filename>
    <namespace>stdair::LOG</namespace>
    <class kind="class">stdair::AirlineClassList</class>
    <class kind="struct">stdair::AirlineClassListKey</class>
    <class kind="class">stdair::AirlineFeature</class>
    <class kind="struct">stdair::AirlineFeatureKey</class>
    <class kind="struct">stdair::AirlineStruct</class>
    <class kind="class">stdair::AirportPair</class>
    <class kind="struct">stdair::AirportPairKey</class>
    <class kind="struct">stdair::BasChronometer</class>
    <class kind="struct">stdair::BasDBParams</class>
    <class kind="struct">stdair::BasFileMgr</class>
    <class kind="struct">stdair::BasLogParams</class>
    <class kind="class">stdair::BomAbstract</class>
    <class kind="class">stdair::BomArchive</class>
    <class kind="class">stdair::BomDisplay</class>
    <class kind="class">stdair::BomHolder</class>
    <class kind="struct">stdair::BomHolderKey</class>
    <class kind="struct">stdair::BomID</class>
    <class kind="class">stdair::BomINIImport</class>
    <class kind="class">stdair::BomJSONExport</class>
    <class kind="class">stdair::BomJSONImport</class>
    <class kind="class">stdair::BomKeyManager</class>
    <class kind="class">stdair::BomManager</class>
    <class kind="class">stdair::BomRetriever</class>
    <class kind="class">stdair::BomRoot</class>
    <class kind="struct">stdair::BomRootKey</class>
    <class kind="class">stdair::BookingClass</class>
    <class kind="struct">stdair::BookingClassKey</class>
    <class kind="class">stdair::BookingClassListEmptyInNestingStructException</class>
    <class kind="struct">stdair::BookingRequestStruct</class>
    <class kind="struct">stdair::BreakPointStruct</class>
    <class kind="class">stdair::Bucket</class>
    <class kind="struct">stdair::BucketKey</class>
    <class kind="struct">stdair::CancellationStruct</class>
    <class kind="class">stdair::CmdAbstract</class>
    <class kind="class">stdair::CmdBomManager</class>
    <class kind="class">stdair::CmdBomSerialiser</class>
    <class kind="class">stdair::CmdCloneBomManager</class>
    <class kind="class">stdair::CodeConversionException</class>
    <class kind="class">stdair::CodeDuplicationException</class>
    <class kind="struct">stdair::ConfigHolderStruct</class>
    <class kind="class">stdair::ConfigINIFile</class>
    <class kind="struct">stdair::ContinuousAttributeLite</class>
    <class kind="struct">stdair::date_time_element</class>
    <class kind="class">stdair::DatePeriod</class>
    <class kind="struct">stdair::DatePeriodKey</class>
    <class kind="class">stdair::DbaAbstract</class>
    <class kind="class">stdair::DBManagerForAirlines</class>
    <class kind="class">stdair::DBSessionManager</class>
    <class kind="struct">stdair::DefaultDCPList</class>
    <class kind="struct">stdair::DefaultDtdFratMap</class>
    <class kind="struct">stdair::DefaultDtdProbMap</class>
    <class kind="struct">stdair::DefaultMap</class>
    <class kind="struct">stdair::DemandGenerationMethod</class>
    <class kind="class">stdair::DictionaryManager</class>
    <class kind="class">stdair::DocumentNotFoundException</class>
    <class kind="struct">stdair::DoWStruct</class>
    <class kind="class">stdair::EventException</class>
    <class kind="struct">stdair::EventStruct</class>
    <class kind="struct">stdair::EventType</class>
    <class kind="class">stdair::FacAbstract</class>
    <class kind="class">stdair::FacBom</class>
    <class kind="class">stdair::FacBomManager</class>
    <class kind="class">stdair::FacCloneBom</class>
    <class kind="class">stdair::FacServiceAbstract</class>
    <class kind="class">stdair::FacSTDAIRServiceContext</class>
    <class kind="class">stdair::FacSupervisor</class>
    <class kind="class">stdair::FareFamily</class>
    <class kind="struct">stdair::FareFamilyKey</class>
    <class kind="class">stdair::FareFeatures</class>
    <class kind="struct">stdair::FareFeaturesKey</class>
    <class kind="struct">stdair::FareOptionStruct</class>
    <class kind="struct">stdair::FFDisutilityCurveHolderStruct</class>
    <class kind="class">stdair::FFDisutilityFilePath</class>
    <class kind="class">stdair::FileNotFoundException</class>
    <class kind="class">stdair::FlightDate</class>
    <class kind="struct">stdair::FlightDateKey</class>
    <class kind="class">stdair::FlightPeriod</class>
    <class kind="struct">stdair::FlightPeriodKey</class>
    <class kind="struct">stdair::ForecastingMethod</class>
    <class kind="struct">stdair::FRAT5CurveHolderStruct</class>
    <class kind="class">stdair::FRAT5FilePath</class>
    <class kind="class">stdair::InputFilePath</class>
    <class kind="class">stdair::Inventory</class>
    <class kind="struct">stdair::InventoryKey</class>
    <class kind="struct">stdair::JSonCommand</class>
    <class kind="class">stdair::JSONString</class>
    <class kind="struct">stdair::KeyAbstract</class>
    <class kind="class">stdair::KeyDuplicationException</class>
    <class kind="class">stdair::KeyNotFoundException</class>
    <class kind="class">stdair::LegCabin</class>
    <class kind="struct">stdair::LegCabinKey</class>
    <class kind="class">stdair::LegDate</class>
    <class kind="struct">stdair::LegDateKey</class>
    <class kind="class">stdair::Logger</class>
    <class kind="class">stdair::MemoryAllocationException</class>
    <class kind="class">stdair::NestingNode</class>
    <class kind="struct">stdair::NestingNodeKey</class>
    <class kind="struct">stdair::NestingStructureKey</class>
    <class kind="class">stdair::NonInitialisedContainerException</class>
    <class kind="class">stdair::NonInitialisedDBSessionManagerException</class>
    <class kind="class">stdair::NonInitialisedLogServiceException</class>
    <class kind="class">stdair::NonInitialisedRelationShipException</class>
    <class kind="class">stdair::NonInitialisedServiceException</class>
    <class kind="class">stdair::ObjectCreationgDuplicationException</class>
    <class kind="class">stdair::ObjectLinkingException</class>
    <class kind="class">stdair::ObjectNotFoundException</class>
    <class kind="class">stdair::ODFilePath</class>
    <class kind="class">stdair::OnDDate</class>
    <class kind="struct">stdair::OnDDateKey</class>
    <class kind="struct">stdair::OptimisationMethod</class>
    <class kind="struct">stdair::OptimisationNotificationStruct</class>
    <class kind="struct">stdair::ParsedKey</class>
    <class kind="class">stdair::ParserException</class>
    <class kind="class">stdair::ParsingFileFailedException</class>
    <class kind="struct">stdair::PartnershipTechnique</class>
    <class kind="struct">stdair::PassengerChoiceModel</class>
    <class kind="struct">stdair::PassengerType</class>
    <class kind="struct">stdair::PeriodStruct</class>
    <class kind="class">stdair::Policy</class>
    <class kind="struct">stdair::PolicyKey</class>
    <class kind="class">stdair::PosChannel</class>
    <class kind="struct">stdair::PosChannelKey</class>
    <class kind="struct">stdair::PreOptimisationMethod</class>
    <class kind="struct">stdair::ProgressStatus</class>
    <class kind="struct">stdair::ProgressStatusSet</class>
    <class kind="struct">stdair::RandomGeneration</class>
    <class kind="struct">stdair::RMEventStruct</class>
    <class kind="class">stdair::RootException</class>
    <class kind="class">stdair::RootFilePath</class>
    <class kind="struct">stdair::SampleType</class>
    <class kind="class">stdair::ScheduleFilePath</class>
    <class kind="class">stdair::SegmentCabin</class>
    <class kind="struct">stdair::SegmentCabinKey</class>
    <class kind="class">stdair::SegmentDate</class>
    <class kind="struct">stdair::SegmentDateKey</class>
    <class kind="class">stdair::SegmentPeriod</class>
    <class kind="struct">stdair::SegmentPeriodKey</class>
    <class kind="class">stdair::SegmentSnapshotTable</class>
    <class kind="struct">stdair::SegmentSnapshotTableKey</class>
    <class kind="class">stdair::SerialisationException</class>
    <class kind="class">stdair::ServiceAbstract</class>
    <class kind="struct">stdair::ServiceInitialisationType</class>
    <class kind="class">stdair::SimpleNestingStructException</class>
    <class kind="class">stdair::SimpleNestingStructure</class>
    <class kind="struct">stdair::SnapshotStruct</class>
    <class kind="class">stdair::SQLDatabaseConnectionImpossibleException</class>
    <class kind="class">stdair::SQLDatabaseException</class>
    <class kind="class">stdair::STDAIR_Service</class>
    <class kind="class">stdair::STDAIR_ServiceContext</class>
    <class kind="struct">stdair::StructAbstract</class>
    <class kind="class">stdair::TimePeriod</class>
    <class kind="struct">stdair::TimePeriodKey</class>
    <class kind="struct">stdair::TravelSolutionStruct</class>
    <class kind="struct">stdair::UnconstrainingMethod</class>
    <class kind="struct">stdair::VirtualClassStruct</class>
    <class kind="class">stdair::YieldFeatures</class>
    <class kind="struct">stdair::YieldFeaturesKey</class>
    <class kind="class">stdair::YieldRange</class>
    <class kind="class">stdair::YieldStore</class>
    <class kind="struct">stdair::YieldStoreKey</class>
    <member kind="typedef">
      <type>date_time_element&lt; 0, 23 &gt;</type>
      <name>hour_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a958acca3ce7223943fcc98f347b357b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>date_time_element&lt; 0, 59 &gt;</type>
      <name>minute_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a18a04277c67e4a75cb38bc74ef1fc0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>date_time_element&lt; 0, 59 &gt;</type>
      <name>second_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3b164198ee324596f34bcb91488d8251</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>date_time_element&lt; 1900, 2100 &gt;</type>
      <name>year_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a22eeec083b9c07f6a1a8fd14789249a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>date_time_element&lt; 1, 12 &gt;</type>
      <name>month_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac33689df5c743d4571254a65ece04653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>date_time_element&lt; 1, 31 &gt;</type>
      <name>day_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6102f2b50f7281a011e83c4808a37d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::istreambuf_iterator&lt; char &gt;</type>
      <name>base_iterator_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af0a92e43ebe886e7b486fcf401e522eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::multi_pass&lt; base_iterator_t &gt;</type>
      <name>iterator_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2c975e39f25c8d906ed099d91e025d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::int_parser&lt; unsigned int, 10, 1, 1 &gt;</type>
      <name>int1_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adf937eb6aa51a5a23b9f60bf1786deb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; int, 10, 2, 2 &gt;</type>
      <name>uint2_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a26749dd7cd4a1a585e3fb7232537b5a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; int, 10, 4, 4 &gt;</type>
      <name>uint4_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acad8a330a1747fbc4167b5f420be00ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; int, 10, 1, 4 &gt;</type>
      <name>uint1_4_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acc8dbcf27ebf3c5902d7f90a8d3830f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; hour_t, 10, 2, 2 &gt;</type>
      <name>hour_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeb5f17f15130a9de904591f99f6c17d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; minute_t, 10, 2, 2 &gt;</type>
      <name>minute_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af47abc7f33cb79017164302136033564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; second_t, 10, 2, 2 &gt;</type>
      <name>second_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a769d51ec549192fa486db4d25d58e8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; year_t, 10, 4, 4 &gt;</type>
      <name>year_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab7081f7f567237b2a1e5b58373514e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; month_t, 10, 2, 2 &gt;</type>
      <name>month_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab81eb7d588d970feea82f1aa538d1ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::spirit::qi::uint_parser&lt; day_t, 10, 2, 2 &gt;</type>
      <name>day_p_t</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac225577100237d877aa3ddc405dde230</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>DictionaryKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2d5ece0f93b3e5aee35eb036ba3cce68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirlineClassList * &gt;</type>
      <name>AirlineClassListList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7ff85610013b5efb917da243eee41683</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, AirlineClassList * &gt;</type>
      <name>AirlineClassListMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a072b4cae0b4a2d8a92114482be31c8fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, AirlineClassList * &gt;</type>
      <name>AirlineClassListWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acbcb4a69f5d63bb8ac4eabf3a1509439</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirlineClassListWithKey_T &gt;</type>
      <name>AirlineClassListDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a560ceb59d5983c7b2edcc68c7269f0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirlineFeature * &gt;</type>
      <name>AirlineFeatureList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac86973ebce5e2bef6b447ff6088cabd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, AirlineFeature * &gt;</type>
      <name>AirlineFeatureMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5e9673966000eafa89680747adadaf16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirportPair * &gt;</type>
      <name>AirportPairList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3910e03bffd66a6d8bef3d20c98bd0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, AirportPair * &gt;</type>
      <name>AirportPairMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac7225bb49d72aec4885569639a9b0aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, AirportPair * &gt;</type>
      <name>AirportPairWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2a70fdf4590eabea7d1e3197f9fba794</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirportPairWithKey_T &gt;</type>
      <name>AirportPairDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9ef4fa4d86e6165020f69398c99e4545</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const std::type_info *, BomAbstract * &gt;</type>
      <name>HolderMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a683ba6e6a26ac1a7b5737296fbe9ee67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct BomID&lt; BookingClass &gt;</type>
      <name>BookingClassID_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a81077ccb89f3e27dc2a77940c0606d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BookingClassID_T &gt;</type>
      <name>BookingClassIDList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a18951c6db904dd9958aa2f5485d38fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::tokenizer&lt; boost::char_separator&lt; char &gt; &gt;</type>
      <name>Tokeniser_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac93602a80d5e44faf582301b19337f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BookingClass * &gt;</type>
      <name>BookingClassList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4f856d999ece4dac721ce2278072a0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, BookingClass * &gt;</type>
      <name>BookingClassMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9ac7b6849f4393e580811535c52a9baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BookingRequestStruct &gt;</type>
      <name>BookingRequestPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a376ecba1a0c40aea05229412e20f4d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DemandGeneratorKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0750ab4b88b3f56eab651f0b1f87c129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BreakPointStruct &gt;</type>
      <name>BreakPointPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab85873dc0976c0c69cfbc9798bf6e267</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BreakPointStruct &gt;</type>
      <name>BreakPointList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2d6c897f085bca1928b3dfc7ab0f14c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Bucket * &gt;</type>
      <name>BucketList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac1a5f291b14977f8533e75bc23c4b428</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, Bucket * &gt;</type>
      <name>BucketMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0f5458bb0ec4f6f48649e787b8e1d62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CancellationStruct &gt;</type>
      <name>CancellationPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af22f6fe034d76f3f2a8377bb2a436d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigHolderStruct &gt;</type>
      <name>ConfigHolderPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa9d724b05c95d086bf99e8056259b63e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; DatePeriod * &gt;</type>
      <name>DatePeriodList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0cb61b0f5151e050d83c5574f0f55cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, DatePeriod * &gt;</type>
      <name>DatePeriodMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad516cd0474d7ef11e6239e12a8e32ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, DatePeriod * &gt;</type>
      <name>DatePeriodWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7c1bb43497dd65593a540c8d4d2c7a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; DatePeriodWithKey_T &gt;</type>
      <name>DatePeriodDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7cd9ca12d2c0e00f974168707ac5cc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const LongDuration_T, EventStruct &gt;</type>
      <name>EventListElement_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a25473102145e079429a176e154bd093a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const LongDuration_T, EventStruct &gt;</type>
      <name>EventList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a263e8fbf0e3a3fe943f71206ae24bf2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; FareFamily * &gt;</type>
      <name>FareFamilyList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4bd88a2bde64467cbdec49a20eb51f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, FareFamily * &gt;</type>
      <name>FareFamilyMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3e8db1d930a083b220ec1652e2a2c262</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; FareFeatures * &gt;</type>
      <name>FareFeaturesList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0df270edcfb5329221a2ef19764786c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, FareFeatures * &gt;</type>
      <name>FareFeaturesMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a026294852c39b7085bee4997ec69ebad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, FareFeatures * &gt;</type>
      <name>FareFeaturesWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abfd19cd8d825e6bfeb574208e2cda09b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; FareFeaturesWithKey_T &gt;</type>
      <name>FareFeaturesDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab00918262ec54528cf3a02dbc4cea1b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; FareOptionStruct &gt;</type>
      <name>FareOptionList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a014029d86ff1c4a3c21445280ed44545</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const std::string, FFDisutilityCurve_T &gt;</type>
      <name>FFDisutilityCurveHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aba549b34ee34dd5cba3fd20ce5ea2c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; FlightDate * &gt;</type>
      <name>FlightDateList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac897d12d418f6bfe878303905a3b943b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, FlightDate * &gt;</type>
      <name>FlightDateMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a161cab8007596da006451289628a1137</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; FlightPeriod * &gt;</type>
      <name>FlightPeriodList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a712c73859b508c7e2ca9e39f9b82980c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, FlightPeriod * &gt;</type>
      <name>FlightPeriodMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad7427121107cac491cf38848e17bc5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const std::string, FRAT5Curve_T &gt;</type>
      <name>FRAT5CurveHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a36c8a04ff858ec431537e57d392c566d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Inventory * &gt;</type>
      <name>InventoryList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa2443c204cfcb7ce31e90308b9a63d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, Inventory * &gt;</type>
      <name>InventoryMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a60e533d85c1c82a42910d122389ef9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>MapKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4a8f15e43d18c1f3e34ba36afb3ad142</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; std::string &gt;</type>
      <name>KeyList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a800514140baf9c73b3bef47d80656623</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; LegCabin * &gt;</type>
      <name>LegCabinList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad5491ad2e9525a32f0bb858dd5fde224</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, LegCabin * &gt;</type>
      <name>LegCabinMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2cd72335b8d18e896ada6f74f792937a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; LegDate * &gt;</type>
      <name>LegDateList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af5036d369b7d3f5c1692d5a22a4b87b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, LegDate * &gt;</type>
      <name>LegDateMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a22138aca6ae648763cbfe6f9216a30d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; NestingNode * &gt;</type>
      <name>NestingNodeList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac50741795be118353665ef377e905159</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, NestingNode * &gt;</type>
      <name>NestingNodeMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8c66c1a5b6ca2115217d266055ba93ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; OnDDate * &gt;</type>
      <name>OnDDateList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa12f23be931367ac86ffcb48e01d614e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, OnDDate * &gt;</type>
      <name>OnDDateMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adc94912a5c87963c73589447f3fce03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::string, YieldDemandPair_T &gt;</type>
      <name>StringDemandStructPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a76b2b6ce1c9949e140e3509f3813cb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, YieldDemandPair_T &gt;</type>
      <name>StringDemandStructMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa3b2a3047ab4fb3c0047cbeb76fb0361</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, CabinClassPairList_T &gt;</type>
      <name>StringCabinClassPairListMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2e4e4f8618bb573c5e742088d912ab4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::string, CabinClassPairList_T &gt;</type>
      <name>StringCabinClassPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a19d765d08f5c1c2da8e9cdabc6367cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; CabinCode_T, WTPDemandPair_T &gt;</type>
      <name>CabinForecastMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a981e30933189b8cdca53f147bef97c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; CabinCode_T, WTPDemandPair_T &gt;</type>
      <name>CabinForecastPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3cf4e69eb0eae553f767958b2028ca74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; OptimisationNotificationStruct &gt;</type>
      <name>OptimisationNotificationPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a33133fb67e4726a04b73a38ace47cbe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Policy * &gt;</type>
      <name>PolicyList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1a8b86d75f9df58cee68782b96c78f09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, Policy * &gt;</type>
      <name>PolicyMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aceff09f8e3bab64ecbac731aa87fe652</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; PosChannel * &gt;</type>
      <name>PosChannelList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab378126c72fa818a3741ba1f3978a480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, PosChannel * &gt;</type>
      <name>PosChannelMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3ea3ffefc8914879075b7f0b3e52aa34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, PosChannel * &gt;</type>
      <name>PosChannelWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae62a09d51d4a77da11717a87c8f5ca8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; PosChannelWithKey_T &gt;</type>
      <name>PosChannelDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a74ef2097a23127c4579c9f73a3d13473</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RMEventStruct &gt;</type>
      <name>RMEventPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a17cc4d17f6f73773a3595cab8d44255e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; RMEventStruct &gt;</type>
      <name>RMEventList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a58402aa223de18bff5d7c612b55b7771</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; SegmentCabin * &gt;</type>
      <name>SegmentCabinList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a77747e9e9d97c04f98993229220b3aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, SegmentCabin * &gt;</type>
      <name>SegmentCabinMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7d7e29126a52bc41ab05c2478062347f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; std::string &gt;</type>
      <name>RoutingLegKeyList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a673bb4facb8845ce33503eff6e66a6db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; SegmentDate * &gt;</type>
      <name>SegmentDateList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2d85d5a19c517fc13241cc3bb8ac3043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, SegmentDate * &gt;</type>
      <name>SegmentDateMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a28f3285c7facbec2793d6d8ba339f0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; SegmentPeriod * &gt;</type>
      <name>SegmentPeriodList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3fdd48b295e0d4dec52c6fce1786b3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, SegmentPeriod * &gt;</type>
      <name>SegmentPeriodMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a85164f4b4b9f047b465ccf953deabd94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, SegmentPeriod * &gt;</type>
      <name>SegmentPeriodWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6794fcab030ca310dd87dad614cdd43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; SegmentPeriodWithKey_T &gt;</type>
      <name>SegmentPeriodDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab0485ab32847941f93ee4217d10e7a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; SegmentSnapshotTable * &gt;</type>
      <name>SegmentSnapshotTableList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a66d18ef800c893f6db854a94d2e4c3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, SegmentSnapshotTable * &gt;</type>
      <name>SegmentSnapshotTableMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3fbf7d7f45e61d97e0d6331cf19b3e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const SegmentCabin *, SegmentDataID_T &gt;</type>
      <name>SegmentCabinIndexMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac2d71db3a1b0390307b1231c99836972</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, ClassIndex_T &gt;</type>
      <name>ClassIndexMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5810786ff70162f3833af9f77e537169</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; SimpleNestingStructure * &gt;</type>
      <name>SimpleNestingStructureList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab8b62892c66ee8bcf26288f8b9da5bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, SimpleNestingStructure * &gt;</type>
      <name>SimpleNestingStructureMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aafab5cdfdbd54a336ce79226b6bfa1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SnapshotStruct &gt;</type>
      <name>SnapshotPtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8a5341cad8d23b83dbacb1b2a74d150e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; TimePeriod * &gt;</type>
      <name>TimePeriodList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a060ae38f706a8d404f558060855e0c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, TimePeriod * &gt;</type>
      <name>TimePeriodMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8fe66d2dbd5cd269196354f388ea4a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, TimePeriod * &gt;</type>
      <name>TimePeriodWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a37a2a59547f81760673c0be3b76c2858</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; TimePeriodWithKey_T &gt;</type>
      <name>TimePeriodDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1822868ce82272eaee807c03b5485b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; TravelSolutionStruct &gt;</type>
      <name>TravelSolutionList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7044bfd349753c09860d25bdba03144a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyList_T</type>
      <name>SegmentPath_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a55b9164cbb39950d96cb44165fd7277a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; SegmentPath_T &gt;</type>
      <name>SegmentPathList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7a311b7c0dda6cc904ab0d24768d0e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const ClassCode_T, Availability_T &gt;</type>
      <name>ClassAvailabilityMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6b90932da2c94e4db3283c13c606a14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ClassAvailabilityMap_T &gt;</type>
      <name>ClassAvailabilityMapHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adb9f2693563aa1fab9c0927563d2e8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const ClassCode_T, BookingClassID_T &gt;</type>
      <name>ClassObjectIDMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af2a6622f4c07a8dcae9f305e9c16ead4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ClassObjectIDMap_T &gt;</type>
      <name>ClassObjectIDMapHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af8327c90ce7ddc2c9a8a71aa491dafb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const ClassCode_T, YieldValue_T &gt;</type>
      <name>ClassYieldMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8c288f503d7744b81c959a7f145ebc82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ClassYieldMap_T &gt;</type>
      <name>ClassYieldMapHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aefc556baddbb14979f4b78273ca7ce6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BidPriceVector_T &gt;</type>
      <name>BidPriceVectorHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aef0dce68661165996af82c2c487aa164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const ClassCode_T, const BidPriceVector_T * &gt;</type>
      <name>ClassBpvMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac24a4a21a4c5d499e22b8193015a2aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ClassBpvMap_T &gt;</type>
      <name>ClassBpvMapHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab140bbaa77ddb2d4ee2d87a1d3341013</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; VirtualClassStruct &gt;</type>
      <name>VirtualClassList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1ba89e9a3280b974defe8dad89ce50c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const YieldLevel_T, VirtualClassStruct &gt;</type>
      <name>VirtualClassMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a73b81249c5454af80823447709427789</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; YieldFeatures * &gt;</type>
      <name>YieldFeaturesList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad1c7cd5db8cf3ed3e721595087ac98c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, YieldFeatures * &gt;</type>
      <name>YieldFeaturesMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a84ff89af680e5147f012222333703742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MapKey_T, YieldFeatures * &gt;</type>
      <name>YieldFeaturesWithKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a46a6d8f2b739784f51aa2edb559066ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; YieldFeaturesWithKey_T &gt;</type>
      <name>YieldFeaturesDetailedList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab8e954242a63ed84605f703766869dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; YieldStore * &gt;</type>
      <name>YieldStoreList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a14f930fef72811a2273ab3d72a49ffaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const MapKey_T, YieldStore * &gt;</type>
      <name>YieldStoreMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0499395b6d165da12f6ec05aa8ddbb75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>LocationCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a194808a1bf90a2ce7b76b21b4e82196e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>Distance_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a210e274e0cd4cb20eee6947655f52c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocationCode_T</type>
      <name>AirportCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af1b500f17ebcafbb4a83d03e5a0d7846</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocationCode_T</type>
      <name>CityCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae40f6b7ccf542e22817e0f4a4d5d9a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>KeyDescription_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a469c2588c43138c03ce1800f933e6bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>AirlineCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac0ab9f765621de3140cc27d6472f5581</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>FlightNumber_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abb24a0796f29fe921b6dbe3ba0fa638e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TableID_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afa892e4ae1702750a781d9f83cbec007</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CabinCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af6e007ccf2f470cad8779ea76dc958c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>FamilyCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa8f1eaf9bbab3ad018c9e96be9b1a45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>PolicyCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5953b9a9bafaa47f39b430c010a95ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>NestingStructureCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a72bd92927ccd6db1c90c81445e8762e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>NestingNodeCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af3bb7165c3205bd0fff31f5b920c29a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>ClassCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2333a1276804180fe52c77f099005054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>Identity_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5becadf974980975c25ee7a5dd57f4d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>TripType_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3fc070ff94549282179c4e0e10213667</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>MonetaryValue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3bd7e80eaccd69d2450b24e1508b4aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealNumber_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac8fc702736cc285308091cec22440ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Percentage_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4575a0d83bcce499ad574f795720e330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>PriceValue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2fa5b378f892db246eab1e14126a66a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>YieldValue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>add400a1cfac7bd4e3eda0624cab7d54a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>PriceCurrency_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4356fc7c27becfcb9b6df970611e3ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Revenue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae20e89311b33bf1e09eb44da18cfb3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Multiplier_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acc8da938b124d1a5ec9d0ecbaa547517</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfSeats_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad571e4c3f7a893d5caf605dd90c6315f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Count_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeb25b3ef91ed7080a5d43a20cd099d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>PartySize_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a474d6775eb6e99cd3877248807335cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfRequests_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab5c73bf4ab614fa17ddb15710ae1f982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NbOfRequests_T</type>
      <name>NbOfBookings_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4ccbb6018b0ae289333d15298e47ecb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NbOfRequests_T</type>
      <name>NbOfCancellations_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7d8717b4bd0c3447deb34a889e907ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>NbOfTravelSolutions_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a239e221bcfc2a1750ce5192e57e52c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>ClassList_String_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8955958d7655605902d49df1588c3dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>NbOfSegments_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aee716785c6fba1d4d1a0b6bd446e6e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>NbOfAirlines_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0b71b9439496e53b82a15ba7ed5e7663</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Availability_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a98f98ecbccf4e7bfea260b013e1c6c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Fare_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a04f34b37b2ec54fcda45cc9a77d080f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Flag_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a106c0f4d63d9311775849171233bcd36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>UnsignedIndex_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9f7ff5ce50fd08acd7aa589777c4425b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>NbOfClasses_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a346894440ebc0e73b3a348e672c07232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>NbOfFareFamilies_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4b1840f8f1744b40c199f0371a646d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>Filename_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a79a6f56285b817edc02d72eb1f437dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>FileAddress_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8cb8088370501a4e5f60695ae9952459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>ProgressPercentage_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a10ee9d7556c5dfaa863372db3989c60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::time_duration</type>
      <name>Duration_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac2284dabf9336e9472063158510f62c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::gregorian::date</type>
      <name>Date_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a049eb52315b4e9bb21a411f8b9d9012e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::time_duration</type>
      <name>Time_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a43f981bcd64afe6461278a030d27a926</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::ptime</type>
      <name>DateTime_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a158c02e7885bcab624391189d7563c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::gregorian::date_period</type>
      <name>DatePeriod_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a923842effcf1b0dc1001731efc276d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DOW_String_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9e160a1675542a2c0fbf32e4bca17770</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::gregorian::date_duration</type>
      <name>DateOffset_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1b93767b6aab60b88f5309ce0f8894ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>DayDuration_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad35d13dc390443e736db5bca9bfe1966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>SaturdayStay_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a713af56dbc04fcb11b3a2fc8ff71b407</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long int</type>
      <name>IntDuration_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a201867dc3e3703d41da8be03ff6e25b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long int</type>
      <name>LongDuration_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a334dd114dfe45bd0ef8b7bef0d215ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>FloatDuration_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6bbf062db5f41f65b9693e409b1cd2e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soci::session</type>
      <name>DBSession_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af9885c4dbd3b05a275c49b96aadd7165</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soci::statement</type>
      <name>DBRequestStatement_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a29d5eb8225d8560ae8ee69a8a2a01cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DBConnectionName_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a20a2ca798efe2ac5b059bb1934b5de4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>ChangeFees_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adb0bab11604ea43463915616cd74c1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>NonRefundable_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aae06fc88e5f52d47c178eb5825f0ab4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>SaturdayStayRatio_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8e0551227e8f078de0c5c0bbb176cc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ChangeFeesRatio_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a86c6bf8b72d40081c0acfae28e57f2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NonRefundableRatio_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8ff050baa49d6ebbc6ed667619bacbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Disutility_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aed5b100656577a93a8c6e96007f487dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>PassengerType_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5ba32c2de036f4a1c704d075bf5eb4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DistributionPatternId_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ace1cc6f4eff5a3513e170ec0fa250011</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CancellationRateCurveId_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af4ea03146fd7250355b8335b0e904168</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>AirlinePreferenceId_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a078952f8c879eb6288f1b6099454ca81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Percentage_T, Percentage_T &gt;</type>
      <name>CancellationNoShowRatePair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa96bc57c3c4e883e01d5be16b55986fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CharacteristicsPatternId_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a04f304cc675ec1f8b923276d909bcbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CharacteristicsIndex_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6842b8ce18e8522e0368cbd629c1dae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>WTP_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a17d2c82c69a07adacf6cb8af20868a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::tuples::tuple&lt; double, WTP_T &gt;</type>
      <name>CharacteristicsWTP_tuple_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a71768d148fa4770424103cb7d2555a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; WTP_T, MeanStdDevPair_T &gt;</type>
      <name>WTPDemandPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a37773dac4c9c93592d2d1029be1d8071</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NbOfRequests_T</type>
      <name>NbOfNoShows_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abb06b40a7644317314f00283e5bb24af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>MatchingIndicator_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad7b4cda9e924a0269784a9cb95c85bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DemandStreamKeyStr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a90cee6070c2d9b17bc1c4cf1f211af14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>ChannelLabel_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3a2502a9ba99e5bfd61fd5a2aa9e6de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>FrequentFlyer_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a77e7582d7cd3bdb95c08e1011dd25359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>RequestStatus_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3ec503be2fc504e4e16f27635382f395</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Identity_T, Identity_T &gt;</type>
      <name>BookingTSIDMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a58ead137eb196b0050efcb20e64b38fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; CabinCode_T, ClassCode_T &gt;</type>
      <name>CabinClassPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a33716c7d1329113b462f6f2722c501c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; CabinClassPair_T &gt;</type>
      <name>CabinClassPairList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9dccfd1fab140d3d8202b352574ad06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ProportionFactor_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afe8f60121c7e067b184fb29df3d3335d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ProportionFactor_T &gt;</type>
      <name>ProportionFactorList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a182792417b05735c47c7a34da2f32d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>OnDString_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a89ce8c389c63742d2a8f9dddebfba464</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; OnDString_T &gt;</type>
      <name>OnDStringList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a856a099c44b6c21b4497f928d04f59e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>EventName_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a24c84f29a52ea7f8b5f73b7fe66dc847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfEvents_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad6b2d9ac6bf704d333688c80cff656be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>EventGeneratorKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a66631d797512e182c89681d4c29c68b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfFareRules_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2bbe1ce014ce39835ffbef70a57323cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>NetworkID_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a329aef2f972a1a6b877e68dd39dfb45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; AirlineCode_T &gt;</type>
      <name>AirlineCodeList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>add4270789c27c30c5e0790dc75975bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ClassList_String_T &gt;</type>
      <name>ClassList_StringList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a69c4d11d732cf09e256e34c0b94db5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ClassCode_T &gt;</type>
      <name>ClassCodeList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a10bdcb460aab76cd895ea7f6b1cc4ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>SubclassCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a05539487afe6043bb67b0615e2856f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>FlightPathCode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7fb9d24c1a9f3cfe89e39ffa8fb1227f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; CabinCode_T, ClassList_String_T &gt;</type>
      <name>CabinBookingClassMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a60e2bb63cedd3c4fb7eb0f5d702d368f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CurveKey_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adda6ea693b732214d2df929ecc56bec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>CabinCapacity_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2dd15bf37056ace1becadd061d66c07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfFlightDates_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0d89da689bffd9788a235446d5161c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>CommittedSpace_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac1b3fcabadc2e8f4b22284e932229880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>UPR_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa5cc3550f745b833c72ffae6b1039167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>BookingLimit_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a644b8a574f2bd64b0a0f2dee7331a700</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>AuthorizationLevel_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a937aa3e31f289f98c05e29035e9f0672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>CapacityAdjustment_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a98519dc2fe3a1bd54c15f085003b2457</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>BlockSpace_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad43de8572007cb72b3175e684c2c1db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>AvailabilityStatus_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8a7ba0c63ccd5843603a1716f2aa7552</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Availability_T &gt;</type>
      <name>BucketAvailabilities_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3d5abcd1509de1baeea5708600672115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfYields_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2adabf98119ad71c04a245925eb6934e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>NbOfInventoryControlRules_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a88a962f2f6c0c2a471b37f4bbeb8715e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>CensorshipFlag_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acb0e6114614d7ad9938e5d51374148b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>DTD_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3803f0eb780fa19f7a2be3dc34d1993e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>DCP_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7b2bfea0300dbfcdafe5e750777597b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; DCP_T &gt;</type>
      <name>DCPList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae7b7a2c903179a252462ef1643e4542e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; DTD_T, RealNumber_T &gt;</type>
      <name>DTDFratMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a61e8b74e6455e2dc8aba3db599371cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; FloatDuration_T, float &gt;</type>
      <name>DTDProbMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adbc9d3be0f7f0d93d07db20c7c6941e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CensorshipFlag_T &gt;</type>
      <name>CensorshipFlagList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a66e241c9a10521c83ed12afefe295c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>BookingRatio_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae43055cffaf2f44e2c452aaa9eee26f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Yield_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a941af3a267bc922f2dd2c1910c629347</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>YieldLevel_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac38e691f6716c16f38cd0ebf73ef906b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; YieldLevel_T, MeanStdDevPair_T &gt;</type>
      <name>YieldLevelDemandMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1b16b1e0c01c8fd02c6347550294869d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Yield_T, MeanStdDevPair_T &gt;</type>
      <name>YieldDemandPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afb4f549c18e4421413e374cd31160451</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>BidPrice_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1583a1546eacb3362340aa4cd83a0428</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; BidPrice_T &gt;</type>
      <name>BidPriceVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af27a097c480c0fe3f180f94aa849332b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>SeatIndex_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a67a1e74e305a27f44c1c0de5c6a4bf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>ControlMode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1e5282fddf0f83f7e48af6410647f951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>OverbookingRate_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8fa5d5fec4a18be2646baad214fa73fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ProtectionLevel_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ade9a4ed4074bafb157fe3a2178e6c743</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>EmsrValueList_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeddf830276041c4717cf6fba04901f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>BookingLimitVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a434f4cbff6ed8afa7a645eb8b8aab50c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>ProtectionLevelVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0fc8b6055766923dbe770222fb08343b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::multi_array&lt; double, 2 &gt;</type>
      <name>SnapshotBlock_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abc047297bafc81066189464ef9c36ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SnapshotBlock_T::index_range</type>
      <name>SnapshotBlockRange_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae91acd217b23920f3ea2d85f6abc24ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SnapshotBlock_T::array_view&lt; 1 &gt;::type</type>
      <name>SegmentCabinDTDSnapshotView_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7d8b70fc090e73fca5ddca6945cc758f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SnapshotBlock_T::array_view&lt; 2 &gt;::type</type>
      <name>SegmentCabinDTDRangeSnapshotView_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaff1abb2c962c3a7bc6c999e6883bc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SnapshotBlock_T::const_array_view&lt; 1 &gt;::type</type>
      <name>ConstSegmentCabinDTDSnapshotView_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8f2f5969ed322013db90d087b3305678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SnapshotBlock_T::const_array_view&lt; 2 &gt;::type</type>
      <name>ConstSegmentCabinDTDRangeSnapshotView_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a01745cd7f9c3d85e27dd09f53cc74465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>SegmentDataID_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2c217e10cfed4185080cad4f060ae756</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>LegDataID_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9279b26c2e715192cc1432fc27d9896f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ClassIndex_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab7a6dd51e6046c54d640a42bfd2c023b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>ReplicationNumber_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad7631988657d35fb876a5fd02a664cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>ExponentialSeed_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afdc0677a827ab1cc3bc6fdaa949b006e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>UniformSeed_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac24ad69ea5e9289c890547fb41a767e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>RandomSeed_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a28f4ca572c351c2d9cd763fe292120d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::minstd_rand</type>
      <name>BaseGenerator_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae032e6a18e6d41a54b6094443d5e70ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uniform_real</type>
      <name>UniformDistribution_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a86a88a1fdd470578e4699041a6340353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variate_generator&lt; BaseGenerator_T &amp;, UniformDistribution_T &gt;</type>
      <name>UniformGenerator_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a164c497820aba553d0749df0ca8fc4e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::normal_distribution</type>
      <name>NormalDistribution_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4af596b2d9c9f038721408fcea29a150</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variate_generator&lt; BaseGenerator_T &amp;, NormalDistribution_T &gt;</type>
      <name>NormalGenerator_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adeb72b19f0756d82b931021b4e3ee2fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::exponential_distribution</type>
      <name>ExponentialDistribution_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af21463523241138b8a4d52932ef99ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variate_generator&lt; BaseGenerator_T &amp;, ExponentialDistribution_T &gt;</type>
      <name>ExponentialGenerator_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8bd56626dfcf3aa923facd2e280507f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>MeanValue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a761f03cfa1f92b22572b88650b3dc8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>StdDevValue_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a399beabb7114698e10b44e8dd4d675f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; MeanValue_T, StdDevValue_T &gt;</type>
      <name>MeanStdDevPair_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2d11d25d3d03504ff4a4542381744fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; MeanStdDevPair_T &gt;</type>
      <name>MeanStdDevPairVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8b604fc4a6a53961b5826534f810adae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Probability_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2ec4f7e0b2490de52864f5dde1223ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>ForecasterMode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9afef0c4f3c829663e134612750b6d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>HistoricalDataLimit_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a794c138f2d96fb0c5d47fb8d1bd874bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>OptimizerMode_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a39105836919c65a2a44e37290d91d9e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NbOfBookings_T</type>
      <name>PolicyDemand_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acc91747447ed1e8c4bac17dea1f595fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>GeneratedDemandVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae4eeb43f719814a21cb0f81327c57e64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; GeneratedDemandVector_T &gt;</type>
      <name>GeneratedDemandVectorHolder_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa2521ee0a45eb529cd29e3ea3422abe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>SellupProbability_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a15196adc93f0b8ca44f7bf31dc9f0569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NbOfRequests_T &gt;</type>
      <name>UncDemVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa793b6077131fe489b32a9e841c1427a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NbOfBookings_T &gt;</type>
      <name>BookingVector_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acb5e59e757a8681dc20e4dcd8193a03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>FRAT5_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aba34421003a47345228243335246cc16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const DTD_T, FRAT5_T &gt;</type>
      <name>FRAT5Curve_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a701dac3e3c3e99cb895f1f2345b4a298</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const DTD_T, double &gt;</type>
      <name>FFDisutilityCurve_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abc4b39a98a573fd94083a33fad35ca79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const DTD_T, double &gt;</type>
      <name>SellUpCurve_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8dea7265bdd95f6c0f5c5ecfdbde0beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const DTD_T, double &gt;</type>
      <name>DispatchingCurve_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6526fe10511e692991e087ba8893add6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; BookingClass *, SellUpCurve_T &gt;</type>
      <name>BookingClassSellUpCurveMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>add561eb02c001b33edd2983c0b06794f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; BookingClass *, DispatchingCurve_T &gt;</type>
      <name>BookingClassDispatchingCurveMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a64a27422c135fe794149c1bf5c91fc1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const Yield_T, double &gt;</type>
      <name>YieldDemandMap_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af29d2c1436c1c424f4eae4910734aeaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>NbOfSamples_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a67f3361d613b3964f73229e25e7dd119</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; STDAIR_Service &gt;</type>
      <name>STDAIR_ServicePtr_T</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a288fd7fc4006868dee11013657cc843d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT_BOM_ROOT_KEY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8628d4a46a9b744a02f42b94dbfaedb3</anchor>
      <arglist>(&quot; -- ROOT -- &quot;)</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>DEFAULT_EPSILON_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a23bc22990c7e707c6ebf0837c0d0952e</anchor>
      <arglist>(0.0001)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int</type>
      <name>DEFAULT_FLIGHT_SPEED</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab2840da0dc0d85b6403e36b8606a04f5</anchor>
      <arglist>(900)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfFlightDates_T</type>
      <name>DEFAULT_NB_OF_FLIGHTDATES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6565466a56f779c5d808fad6060541bb</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>NULL_BOOST_TIME_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af3a3785e58d171fc31937f237d3378ea</anchor>
      <arglist>(-1,-1,-1)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_NULL_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a907e0b6423372af6532417bb47741c36</anchor>
      <arglist>(0, 0, 0)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int</type>
      <name>DEFAULT_NB_OF_DAYS_IN_A_YEAR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a997729d9a5f77b9b004b120fc4a46bb6</anchor>
      <arglist>(365)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int</type>
      <name>DEFAULT_NUMBER_OF_SUBDIVISIONS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa1c9a855ff6dc76a4827043f99008831</anchor>
      <arglist>(1000)</arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T</type>
      <name>DEFAULT_DAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a51ed94c8d8836692f1e6936b461c8e3b</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const DatePeriod_T</type>
      <name>BOOST_DEFAULT_DATE_PERIOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a384e592bde5f3b71c7ee6ca1e04a79eb</anchor>
      <arglist>(Date_T(2007, 1, 1), Date_T(2007, 1, 1))</arglist>
    </member>
    <member kind="function">
      <type>const DOW_String_T</type>
      <name>DEFAULT_DOW_STRING</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a29cd534d1010229bbffbe3b4591a382e</anchor>
      <arglist>(&quot;0000000&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const DateOffset_T</type>
      <name>DEFAULT_DATE_OFFSET</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad686c292d8ed6133bef59d095a645218</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DEFAULT_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6baf04aa8f796b57b816ea8506dc23c6</anchor>
      <arglist>(2010, boost::gregorian::Jan, 1)</arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T</type>
      <name>DEFAULT_DATETIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7930a9d1c7bf90d829f7d80be118526a</anchor>
      <arglist>(DEFAULT_DATE, NULL_BOOST_TIME_DURATION)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_EPSILON_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aad5ea6fff895d534f99e0101b7cb9130</anchor>
      <arglist>(0, 0, 0, 1)</arglist>
    </member>
    <member kind="function">
      <type>const Count_T</type>
      <name>SECONDS_IN_ONE_DAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8c351889858aeb91703a8cd4c2a09edd</anchor>
      <arglist>(86400)</arglist>
    </member>
    <member kind="function">
      <type>const Count_T</type>
      <name>MILLISECONDS_IN_ONE_SECOND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a598d1f1c32caa4d8684f227f76eaceed</anchor>
      <arglist>(1000)</arglist>
    </member>
    <member kind="function">
      <type>const RandomSeed_T</type>
      <name>DEFAULT_RANDOM_SEED</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6e58dc4a22ad49a0220136c66e5c4ff5</anchor>
      <arglist>(120765987)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>AIRPORT_LHR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad94c53000fb8c13f0b548dde8de92d59</anchor>
      <arglist>(&quot;LHR&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>AIRPORT_SYD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a57705bd4a651784d731abd6130fc48cd</anchor>
      <arglist>(&quot;SYD&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CityCode_T</type>
      <name>POS_LHR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6c5d15ee5c55319f812062f3b4300712</anchor>
      <arglist>(&quot;LHR&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DATE_20110115</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a486562308f66e32cfc12ec11a56fa292</anchor>
      <arglist>(2011, boost::gregorian::Jan, 15)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DATE_20111231</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a264d1b6208b31c172f1f46b7f863f571</anchor>
      <arglist>(2011, boost::gregorian::Dec, 31)</arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T</type>
      <name>NO_ADVANCE_PURCHASE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae949fe2b13e857b2e8a4f347f9bc3d71</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const SaturdayStay_T</type>
      <name>SATURDAY_STAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aba7c56ac4948969f5ac2e12a039fb4a8</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const SaturdayStay_T</type>
      <name>NO_SATURDAY_STAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a965ef08a533e24ba0fb5aec1042396f0</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const ChangeFees_T</type>
      <name>CHANGE_FEES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae8053b79f03d4b9254703dbd0c55188f</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const ChangeFees_T</type>
      <name>NO_CHANGE_FEES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a33350ce52659ffb810c82ab593ca41d8</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const NonRefundable_T</type>
      <name>NON_REFUNDABLE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a56e8bddb25c18de1110a8f619d18719f</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const NonRefundable_T</type>
      <name>NO_NON_REFUNDABLE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abcd80b454ecbf8561640e102296782e3</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const SaturdayStay_T</type>
      <name>DEFAULT_BOM_TREE_SATURDAY_STAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aadf6813a0635c3413920049940f5a2a5</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const ChangeFees_T</type>
      <name>DEFAULT_BOM_TREE_CHANGE_FEES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab12c32370d874e1a3cc1e6aca860a3a4</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const NonRefundable_T</type>
      <name>DEFAULT_BOM_TREE_NON_REFUNDABLE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6268e43cae35582db201d355ce71985a</anchor>
      <arglist>(true)</arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T</type>
      <name>NO_STAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acb4f275f4acbea4b7d8706494fd0b379</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T</type>
      <name>AIRLINE_CODE_BA</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3c54cce444b6feaafb50b6321819d346</anchor>
      <arglist>(&quot;BA&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T</type>
      <name>CABIN_Y</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8f62d9331d9b7b71dbfa48efc97b9374</anchor>
      <arglist>(&quot;Y&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T</type>
      <name>CLASS_CODE_Y</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7ecbaaa7cf632a9dbca43e302d163ee1</anchor>
      <arglist>(&quot;Y&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T</type>
      <name>CLASS_CODE_Q</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae994c8072ccbec015d0264d9138c28f8</anchor>
      <arglist>(&quot;Q&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>AIRPORT_SIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aed8bdf324416790ba0de943e4b0e90f5</anchor>
      <arglist>(&quot;SIN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>AIRPORT_BKK</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a10c6822547224105bd6e2841fea7bfa0</anchor>
      <arglist>(&quot;BKK&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CityCode_T</type>
      <name>POS_SIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af421361b0b56d1a23bfd41d8e7ed4d3b</anchor>
      <arglist>(&quot;SIN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T</type>
      <name>CABIN_ECO</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af696d067408395e5ffdc55678408abf6</anchor>
      <arglist>(&quot;Eco&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FrequentFlyer_T</type>
      <name>FREQUENT_FLYER_MEMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a08e6076520b28c9c33c448244529f35d</anchor>
      <arglist>(&quot;M&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FamilyCode_T</type>
      <name>DEFAULT_FAMILY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8b5530d789e1db2a433bd6309a46c4dc</anchor>
      <arglist>(&quot;0&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const PolicyCode_T</type>
      <name>DEFAULT_POLICY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a38a7f9b6338cec8f5c6239f7a7557f82</anchor>
      <arglist>(&quot;0&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NestingStructureCode_T</type>
      <name>DEFAULT_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac74ff9ed3052b46002ad167c61b5ae91</anchor>
      <arglist>(&quot;DEFAULT&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NestingStructureCode_T</type>
      <name>DISPLAY_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6516db7e5ddcb927ac53135fd9dbaf75</anchor>
      <arglist>(&quot;Display Nesting&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NestingStructureCode_T</type>
      <name>YIELD_BASED_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af9be3cb7aefc7c3e544aec1f251f63f7</anchor>
      <arglist>(&quot;Yield-Based Nesting&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NestingNodeCode_T</type>
      <name>DEFAULT_NESTING_NODE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a98efc55cabbf967f5bb52b33305d90d5</anchor>
      <arglist>(&quot;0&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfAirlines_T</type>
      <name>DEFAULT_NBOFAIRLINES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3aba1f4514fd3068179c1d6b72aad820</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const FlightPathCode_T</type>
      <name>DEFAULT_FLIGHTPATH_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a35d2a88af346b291697dbce61d62999a</anchor>
      <arglist>(&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const Distance_T</type>
      <name>DEFAULT_DISTANCE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeceff1f1215cfa45c95595eb93b28720</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T</type>
      <name>DEFAULT_CLOSED_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a34323bf35b8ee38c6f382a426643854b</anchor>
      <arglist>(&quot;CC&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_NB_OF_BOOKINGS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a987184b6784ef5255ff1a0a100e9b2b0</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_TOTAL_NB_OF_BOOKINGS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af12424cc63b969fbe5fe7204d9d6f082</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_UNCONSTRAINED_DEMAND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa465bd810c0ffc9372a9bb0f024ce4e5</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_REMAINING_DEMAND_MEAN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a26aa84d5118fb19e6dcd0cfc3ec55aa6</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_REMAINING_DEMAND_STANDARD_DEVIATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6daaf1fff08df42d1a837696d70335e9</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfCancellations_T</type>
      <name>DEFAULT_CLASS_NB_OF_CANCELLATIONS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4a5f86435012b5be854b324d898a6526</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfNoShows_T</type>
      <name>DEFAULT_CLASS_NB_OF_NOSHOWS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae0aebb05ee4ca9094fd5f187e59ed9a9</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const CabinCapacity_T</type>
      <name>DEFAULT_CABIN_CAPACITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aecec307c21e7820db6aa1245690a79d6</anchor>
      <arglist>(100.0)</arglist>
    </member>
    <member kind="function">
      <type>const CommittedSpace_T</type>
      <name>DEFAULT_COMMITTED_SPACE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae7877b5b23bffe313fb3789ef6e0ad03</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const BlockSpace_T</type>
      <name>DEFAULT_BLOCK_SPACE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a57435f99145e1e68f7fc198d3475192f</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Availability_T</type>
      <name>DEFAULT_NULL_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a065096cbc4cf702acebfd123fb710403</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Availability_T</type>
      <name>DEFAULT_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6e4cd25611a3ebbf65fa64f1a133dcc7</anchor>
      <arglist>(9.0)</arglist>
    </member>
    <member kind="function">
      <type>const Availability_T</type>
      <name>MAXIMAL_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5c266b65d065836129c9023f33c678d0</anchor>
      <arglist>(9999.0)</arglist>
    </member>
    <member kind="function">
      <type>const CensorshipFlag_T</type>
      <name>DEFAULT_CLASS_CENSORSHIPFLAG</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0068a44cf567e1cb20acdb3988a9750b</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const BookingLimit_T</type>
      <name>DEFAULT_CLASS_BOOKING_LIMIT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a24566f6f74886f1335ce24ee49955cd0</anchor>
      <arglist>(9999.0)</arglist>
    </member>
    <member kind="function">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a06ec619a5f2a146515363fe452cc57da</anchor>
      <arglist>(9999.0)</arglist>
    </member>
    <member kind="function">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_MAX_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a287a9e38b7a6aead5ef0b09e5414f774</anchor>
      <arglist>(9999.0)</arglist>
    </member>
    <member kind="function">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_MIN_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7ccd1852382f950847a5adf9f003313f</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const OverbookingRate_T</type>
      <name>DEFAULT_CLASS_OVERBOOKING_RATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acd3ad4a7a3af7fc4130df7fa5f845a4d</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const BookingRatio_T</type>
      <name>DEFAULT_OND_BOOKING_RATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a89464de2ba21687c2398bf2404310fbb</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Fare_T</type>
      <name>DEFAULT_FARE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae4733c4ea5eb94ccce5b727062fe10dd</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Yield_T</type>
      <name>DEFAULT_CLASS_YIELD_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afbe65d8db322f542a955a726834d4e80</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Revenue_T</type>
      <name>DEFAULT_REVENUE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad9e2da88c1b02edbf3b287d854ce6d3e</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Percentage_T</type>
      <name>DEFAULT_LOAD_FACTOR_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acb126d52ee9b89ac839a5880c6bdc8bc</anchor>
      <arglist>(100.0)</arglist>
    </member>
    <member kind="function">
      <type>const Yield_T</type>
      <name>DEFAULT_YIELD_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac07abd9d9a1ebce2b20728bf0ac3200b</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Yield_T</type>
      <name>DEFAULT_YIELD_MAX_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa23dcc54129a0f2317966ec8ed95e57e</anchor>
      <arglist>(std::numeric_limits&lt; double &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_YIELD_NB_OF_BOOKINGS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa0c5547373299695939ce90abab3cd12</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Identity_T</type>
      <name>DEFAULT_BOOKING_NUMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaa41c8f670825bd7cd7f7d376a5a83d8</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfCancellations_T</type>
      <name>DEFAULT_YIELD_NB_OF_CANCELLATIONS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad8c1d0496fafb1661d2b9219ca32d4f8</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfNoShows_T</type>
      <name>DEFAULT_YIELD_NB_OF_NOSHOWS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9bbdcbf56ee6790b0ecdabcab0ff8263</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Availability_T</type>
      <name>DEFAULT_YIELD_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af82e1fb2625bb3a9473aaeae935383bf</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const CensorshipFlag_T</type>
      <name>DEFAULT_YIELD_CENSORSHIPFLAG</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7cb5b18665d32a9d4403c9e423568526</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const BookingLimit_T</type>
      <name>DEFAULT_YIELD_BOOKING_LIMIT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a843e7de37615595a22f653f4872c4f28</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const OverbookingRate_T</type>
      <name>DEFAULT_YIELD_OVERBOOKING_RATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a78e8a002e32a3a95812f9d17c611b5f5</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Fare_T</type>
      <name>DEFAULT_OND_FARE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0b411970874111f47740d4c05fc80345</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Count_T</type>
      <name>DEFAULT_PROGRESS_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a84a7224d7c62c6ed796d71d3ae847515</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const Percentage_T</type>
      <name>MAXIMUM_PROGRESS_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac522706e02f8de033b1aa6af7d0c98de</anchor>
      <arglist>(100)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DEFAULT_EVENT_OLDEST_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a94b186ad5e12f282d01718cb6de16a85</anchor>
      <arglist>(2008, boost::gregorian::Jan, 1)</arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T</type>
      <name>DEFAULT_EVENT_OLDEST_DATETIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aee7a986079f37e4d4fbe317a9ccf9881</anchor>
      <arglist>(DEFAULT_EVENT_OLDEST_DATE, NULL_BOOST_TIME_DURATION)</arglist>
    </member>
    <member kind="function">
      <type>const PartySize_T</type>
      <name>DEFAULT_PARTY_SIZE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2e90930c99b6c8e938f1ef0e1d1a7d7b</anchor>
      <arglist>(1)</arglist>
    </member>
    <member kind="function">
      <type>const DayDuration_T</type>
      <name>DEFAULT_STAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af96c78abf7c7f1a46e811d386c7ef7c8</anchor>
      <arglist>(7)</arglist>
    </member>
    <member kind="function">
      <type>const WTP_T</type>
      <name>DEFAULT_WTP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9821f63450dfcb76eb2324e1e3285830</anchor>
      <arglist>(1000.0)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DEFAULT_PREFERRED_DEPARTURE_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a63c8e8e63928bdedaf5b18ecfe1fd1e6</anchor>
      <arglist>(DEFAULT_DEPARTURE_DATE)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_PREFERRED_DEPARTURE_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0ff370dffdd4e5f7328674ab71dd94b1</anchor>
      <arglist>(8, 0, 0)</arglist>
    </member>
    <member kind="function">
      <type>const DateOffset_T</type>
      <name>DEFAULT_ADVANCE_PURCHASE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3ec5960267f8c99660f9634e89706525</anchor>
      <arglist>(22)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DEFAULT_REQUEST_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a105bb7139aa559f68015a77f67bbf301</anchor>
      <arglist>(DEFAULT_PREFERRED_DEPARTURE_DATE-DEFAULT_ADVANCE_PURCHASE)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_REQUEST_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abb30ae74239e6e715e9e3eed45c40c6f</anchor>
      <arglist>(8, 0, 0)</arglist>
    </member>
    <member kind="function">
      <type>const DateTime_T</type>
      <name>DEFAULT_REQUEST_DATE_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a195da6899c424230fd76c33ea349c71d</anchor>
      <arglist>(DEFAULT_REQUEST_DATE, DEFAULT_REQUEST_TIME)</arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T</type>
      <name>DEFAULT_PREFERRED_CABIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac808cadd6f223c4fd733a8dcae5d6de3</anchor>
      <arglist>(&quot;M&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CityCode_T</type>
      <name>DEFAULT_POS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa1f7cac10650b542051ae3d5238ea53a</anchor>
      <arglist>(&quot;ALL&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelLabel_T</type>
      <name>DEFAULT_CHANNEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad4e9ca6aff79a6534fe843bba5d7282b</anchor>
      <arglist>(&quot;DC&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelLabel_T</type>
      <name>CHANNEL_DN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0f20ee49a282e73da592f9ebb7d87645</anchor>
      <arglist>(&quot;DN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelLabel_T</type>
      <name>CHANNEL_IN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aec1287de7abe0209cabc438f6e93e262</anchor>
      <arglist>(&quot;IN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_ONE_WAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afaa7187a1257a5d29109cdc7421409f4</anchor>
      <arglist>(&quot;OW&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_ROUND_TRIP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab4ca91711ceaee9409eef92b5bba958a</anchor>
      <arglist>(&quot;RT&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_INBOUND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1d167b8c7d46732d1f549fbd9df616f6</anchor>
      <arglist>(&quot;RI&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_OUTBOUND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa59ef6e5920dafdb73a4a5be958b4454</anchor>
      <arglist>(&quot;RO&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FrequentFlyer_T</type>
      <name>DEFAULT_FF_TIER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7c441322681e121a03369cb49c2623a0</anchor>
      <arglist>(&quot;N&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const PriceValue_T</type>
      <name>DEFAULT_VALUE_OF_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab858c30af37af1c136bee9888833b461</anchor>
      <arglist>(100.0)</arglist>
    </member>
    <member kind="function">
      <type>const IntDuration_T</type>
      <name>HOUR_CONVERTED_IN_SECONDS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af47adf4a2fd324fafb5039e92733bfbf</anchor>
      <arglist>(3600)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_MINIMAL_CONNECTION_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a0d47fd5b6df8ee6f285eb26ed133c5fa</anchor>
      <arglist>(0, 30, 0)</arglist>
    </member>
    <member kind="function">
      <type>const Duration_T</type>
      <name>DEFAULT_MAXIMAL_CONNECTION_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a76a2826e57c42ed8c004ddf3d2c044c0</anchor>
      <arglist>(24, 0, 0)</arglist>
    </member>
    <member kind="function">
      <type>const MatchingIndicator_T</type>
      <name>DEFAULT_MATCHING_INDICATOR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaf71c1852e5e7ac0e33d07a43a74bca1</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const PriceCurrency_T</type>
      <name>DEFAULT_CURRENCY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeaa250189b82bd83a4ab07f45d2fc658</anchor>
      <arglist>(&quot;EUR&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AvailabilityStatus_T</type>
      <name>DEFAULT_AVAILABILITY_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa92b873e9cb4b1f1217ee664c546d7f2</anchor>
      <arglist>(false)</arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T</type>
      <name>DEFAULT_AIRLINE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6a56a96436041be9b56708abb8d587a0</anchor>
      <arglist>(&quot;XX&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirlineCode_T</type>
      <name>DEFAULT_NULL_AIRLINE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6b4e6de8039dcff3afb0c029e5709b8b</anchor>
      <arglist>(&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FlightNumber_T</type>
      <name>DEFAULT_FLIGHT_NUMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a63d50df163ccc4ed28b460e8ddae3ce3</anchor>
      <arglist>(9999)</arglist>
    </member>
    <member kind="function">
      <type>const FlightNumber_T</type>
      <name>DEFAULT_FLIGHT_NUMBER_FF</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9566d60a42c8d4fefed36cdb4d818149</anchor>
      <arglist>(255)</arglist>
    </member>
    <member kind="function">
      <type>const TableID_T</type>
      <name>DEFAULT_TABLE_ID</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad03c8db3701f2079b4c5a794aeb830f4</anchor>
      <arglist>(9999)</arglist>
    </member>
    <member kind="function">
      <type>const Date_T</type>
      <name>DEFAULT_DEPARTURE_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7d3cf09bc0efb632891c0722dda6ac4d</anchor>
      <arglist>(1900, boost::gregorian::Jan, 1)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>DEFAULT_AIRPORT_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a40a4d780108bf913a0dcac3b4e10d538</anchor>
      <arglist>(&quot;XXX&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>DEFAULT_NULL_AIRPORT_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8768e6477640410be5fa76351ef09f2b</anchor>
      <arglist>(&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>DEFAULT_ORIGIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4f53f9d2c5365599b5d6394f997becd3</anchor>
      <arglist>(&quot;XXX&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const AirportCode_T</type>
      <name>DEFAULT_DESTINATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae776ac195763afe4c35de160e7eae10d</anchor>
      <arglist>(&quot;YYY&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const CabinCode_T</type>
      <name>DEFAULT_CABIN_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a56ad73d3ea7e0b2bfe1e60993643d5f1</anchor>
      <arglist>(&quot;X&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FamilyCode_T</type>
      <name>DEFAULT_FARE_FAMILY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acfd1c118d643178f1ebb11bfd579a4e9</anchor>
      <arglist>(&quot;EcoSaver&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const FamilyCode_T</type>
      <name>DEFAULT_NULL_FARE_FAMILY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af1147bee7aadeb09fa12f3df28738e5d</anchor>
      <arglist>(&quot;NoFF&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T</type>
      <name>DEFAULT_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae455a56076fef6a9522b3a26a6acdf57</anchor>
      <arglist>(&quot;X&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const ClassCode_T</type>
      <name>DEFAULT_NULL_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9e63efcda209c465decbe16eeb8dabcf</anchor>
      <arglist>(&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const BidPrice_T</type>
      <name>DEFAULT_BID_PRICE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a85c84a2b7b5b81c3314cedb3ed65dfb0</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned short</type>
      <name>MAXIMAL_NUMBER_OF_LEGS_IN_FLIGHT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a256d6a2524b74287a7e91df79ba9e5c7</anchor>
      <arglist>(7)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned short</type>
      <name>MAXIMAL_NUMBER_OF_SEGMENTS_IN_OND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a73bdbba0e59b94b328025783f78bbe8e</anchor>
      <arglist>(3)</arglist>
    </member>
    <member kind="function">
      <type>const SeatIndex_T</type>
      <name>DEFAULT_SEAT_INDEX</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6c918da3d250462d21227fbaca530c4c</anchor>
      <arglist>(1)</arglist>
    </member>
    <member kind="function">
      <type>const NbOfSeats_T</type>
      <name>DEFAULT_NULL_BOOKING_NUMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a65b53b93c4f8e95179436099177a7907</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const CapacityAdjustment_T</type>
      <name>DEFAULT_NULL_CAPACITY_ADJUSTMENT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3b6c3fe0bb620870bafc0ffd70353419</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const UPR_T</type>
      <name>DEFAULT_NULL_UPR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7b5f6f0f71830fc55b951fc10eb08aa4</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT_FARE_FAMILY_VALUE_TYPE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a62bdaab0a27092808bc8b2067e2dce0f</anchor>
      <arglist>(&quot;FF&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT_SEGMENT_CABIN_VALUE_TYPE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ace7620088547aa608b8fe4f940bd7e41</anchor>
      <arglist>(&quot;SC&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT_KEY_FLD_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae5261c9d897386877db88cdf4ef0ddcd</anchor>
      <arglist>(&quot;;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT_KEY_SUB_FLD_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa39baea61f08062feaac018cb24862be</anchor>
      <arglist>(&quot;,&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const boost::char_separator&lt; char &gt;</type>
      <name>DEFAULT_KEY_TOKEN_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afacd1f402944722e4a57d6c18353e077</anchor>
      <arglist>(&quot;;, &quot;)</arglist>
    </member>
    <member kind="function">
      <type>date_time_element&lt; MIN, MAX &gt;</type>
      <name>operator*</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8ec439fb9257e35e62d69d6130689e16</anchor>
      <arglist>(const date_time_element&lt; MIN, MAX &gt; &amp;o1, const date_time_element&lt; MIN, MAX &gt; &amp;o2)</arglist>
    </member>
    <member kind="function">
      <type>date_time_element&lt; MIN, MAX &gt;</type>
      <name>operator+</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4b8f107c4f98ba0ab1cfbccca087031d</anchor>
      <arglist>(const date_time_element&lt; MIN, MAX &gt; &amp;o1, const date_time_element&lt; MIN, MAX &gt; &amp;o2)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>AirlineClassListKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a582f368e438a973ab5b24da66b3f137f</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>AirlineClassListKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a697c168b0e0eefcbcfd24a1a7eed45d3</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BomRootKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3cae3c56021178d4c16419c085df3cfc</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BomRootKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac177f99945f0042d6316421b1fe64a3e</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intDisplay</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aff1780eaa3661bacb2d61cf80401ea6c</anchor>
      <arglist>(std::ostream &amp;oStream, const int &amp;iInt)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BucketKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a022a1698ef92c45f2de8fc4e267201e1</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BucketKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad7ad14adae3090b19e071b282118b5aa</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>FareFamilyKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a69bd520202ba3fb68abac7ed992f88ec</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>FareFamilyKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8639a37aaf0aed0ff9ff0fe8208875b9</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>FlightDateKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab8881f634651289075f156eef55b4c4e</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>FlightDateKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af7d68fb8723032f61afe8f4810eb84ec</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>InventoryKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a414a12f421889ae35d6bea16f4b90ecf</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>InventoryKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3a5de95a47203a41277f8b0f59f1df4d</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>NestingNodeKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a882b7aa42c1a90e511685228f436d4b4</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>NestingNodeKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a13870a08f0c629e6feaad4c055cef3d7</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>NestingStructureKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae873d2e7ed2fec08013a8df7bfd19735</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>NestingStructureKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab5b193efeda473cc22a9af8d2e2b4b8d</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>OnDDateKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a12bc25bc1749363256eda063dd224209</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>OnDDateKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afa74b5e532a8ef3ff8131a129f02667b</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>const boost::char_separator&lt; char &gt;</type>
      <name>TokeniserDashSeparator</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaef49d92505ca284d7633e7174555265</anchor>
      <arglist>(&quot;-&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const boost::char_separator&lt; char &gt;</type>
      <name>TokeniserTimeSeparator</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abd89371445fc77dbfc67603e417be259</anchor>
      <arglist>(&quot;:&quot;)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>PolicyKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1f3ee7b1c6bd642222c937591d9721f0</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>PolicyKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab60da4790caf0e51b3730048b7d21412</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentCabinKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acdce7e2c1894bc97ad4be21e05f86358</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentCabinKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7d8cce4855f55a87612623ed294bbbea</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentDateKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a10a001674b51947e0d06ec8a1e0d92ac</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentDateKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afd00db1ac92ce0733f9ba56128147aac</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentSnapshotTableKey::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeb99161a07f0d06f87388292ce0b8551</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentSnapshotTableKey::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a14d79320240d7376aee1b05f4e6fc3c5</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialiseHelper</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6df755135da86129778da717bfa8b6c3</anchor>
      <arglist>(BOM_OBJECT1 &amp;ioObject1, Archive &amp;ioArchive, const unsigned int iFileVersion)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BomRoot::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6887120c912337fc83927cda2668d806</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BomRoot::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a84cdeab557f956598cc4e5acad9ee154</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>Inventory::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>add6e12425e5e2b9ab7a8ae6ba0f6575f</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>Inventory::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9d11313512e56522847c959c0eea6385</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>FlightDate::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5abec1f4afab123bb09c5edf6d2c406f</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>FlightDate::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a19b4f18d9a6add3e87e9572709eb4efc</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentDate::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a41b8cf7b9ce0453c236e637d53e654c9</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentDate::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a68530bd90302b9954186d553ea0be8f8</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentCabin::serialize&lt; ba::text_oarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afe08e122df5b74143c1313de779d0ab0</anchor>
      <arglist>(ba::text_oarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>SegmentCabin::serialize&lt; ba::text_iarchive &gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2a2a431554718f677c0e6742a38c3453</anchor>
      <arglist>(ba::text_iarchive &amp;, unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DOW_STR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6e3497a44011f8e98f21449897825897</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const UnconstrainingMethod</type>
      <name>DEFAULT_UNCONSTRAINING_METHOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9bad22104ea635a420b7487114380751</anchor>
      <arglist>(&apos;E&apos;)</arglist>
    </member>
    <member kind="variable">
      <type>const PartnershipTechnique</type>
      <name>DEFAULT_PARTNERSHIP_TECHNIQUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abe9d74d45a2f1064453eac2a6a820536</anchor>
      <arglist>(&apos;N&apos;)</arglist>
    </member>
    <member kind="variable">
      <type>const ForecastingMethod</type>
      <name>DEFAULT_FORECASTING_METHOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a996fee5c330db6cb54d22f3179f4f64f</anchor>
      <arglist>(&apos;Q&apos;)</arglist>
    </member>
    <member kind="variable">
      <type>const PreOptimisationMethod</type>
      <name>DEFAULT_PREOPTIMISATION_METHOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a72d2db9eaa4d25f4e773781229f46e41</anchor>
      <arglist>(&apos;N&apos;)</arglist>
    </member>
    <member kind="variable">
      <type>const OptimisationMethod</type>
      <name>DEFAULT_OPTIMISATION_METHOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adf08f7823a9929c4f3c82ca144ea61e4</anchor>
      <arglist>(&apos;M&apos;)</arglist>
    </member>
    <member kind="variable">
      <type>const CensorshipFlagList_T</type>
      <name>DEFAULT_CLASS_CENSORSHIPFLAG_LIST</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a95fcd682680e0ae8c775e2848bde7ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_DICO_STUDIED_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abec9de05ca5dc8703fe9943bde2c43cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirlineCodeList_T</type>
      <name>DEFAULT_AIRLINE_CODE_LIST</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a82317b08eadcb4481e2b8a5b305af5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassList_StringList_T</type>
      <name>DEFAULT_CLASS_CODE_LIST</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a55a50df30c14075c05302eb5dd4933fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BidPriceVector_T</type>
      <name>DEFAULT_BID_PRICE_VECTOR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a75889056cce4710fa2d3525454ced95e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DEFAULT_MAX_DTD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a889b1dcf50e7c62edd6153153ccf2576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DCPList_T</type>
      <name>DEFAULT_DCP_LIST</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af02cc078f927bb77c189174acebb576c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FRAT5Curve_T</type>
      <name>FRAT5_CURVE_A</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a642e8d64ae6a2aaf4acd777f7a506c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FRAT5Curve_T</type>
      <name>FRAT5_CURVE_B</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4ecf511c90af56dea69e2a805acae1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FRAT5Curve_T</type>
      <name>FRAT5_CURVE_C</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa85d1dc314d127d4847511cf9f5c4475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FRAT5Curve_T</type>
      <name>FRAT5_CURVE_D</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6654f416842f2ea1a6919510b3b3573c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_A</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9277e501373330cf9d113fff74e09ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_B</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a52405032b68308f50f4c484221d4ee68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_C</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a72e739a09e3e2fb1aff1f70dcd4a49ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_D</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a849f9140b72a4f3c972a5ead662a7346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_E</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a070233f244e83358f6de82b264c80d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FFDisutilityCurve_T</type>
      <name>FF_DISUTILITY_CURVE_F</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7ac9eb0727d484809582f97ad45429c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DTDFratMap_T</type>
      <name>DEFAULT_DTD_FRAT5COEF_MAP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab800f5dce278bc65e87126cb6db65d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DTDProbMap_T</type>
      <name>DEFAULT_DTD_PROB_MAP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abf21369264a702f6ab906c694b25ecaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OnDStringList_T</type>
      <name>DEFAULT_OND_STRING_LIST</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a50c8f19d03621ce0f3a29504e77fe304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DISPLAY_LEVEL_STRING_ARRAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a56f9fae162f1bc9ce068b80279953e2d</anchor>
      <arglist>[51]</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DEFAULT_KEY_FLD_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afe804c951faa1108a9dbbcf04b8564e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DEFAULT_KEY_SUB_FLD_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a331e01f273cc7efcc67e622c800f9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const boost::char_separator&lt; char &gt;</type>
      <name>DEFAULT_KEY_TOKEN_DELIMITER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3752a58317682060c84772c41102e09c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Distance_T</type>
      <name>DEFAULT_DISTANCE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3b185ecb7920ad2bc253ee3d66be0b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassCode_T</type>
      <name>DEFAULT_CLOSED_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4c0dfd99c56c602355e4ad3b58479a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_NB_OF_BOOKINGS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a05aae95cd2ce89eb687db11adb3cc67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_TOTAL_NB_OF_BOOKINGS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a46fd629cfee65f78c717ebd1b3d8af90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_UNCONSTRAINED_DEMAND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a163237dea819a634195e2926b10c8bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_REMAINING_DEMAND_MEAN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aff4b1120678627ed9d38d708669fd053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfBookings_T</type>
      <name>DEFAULT_CLASS_REMAINING_DEMAND_STANDARD_DEVIATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad856057cd9e62af112caa562d08fb39b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfCancellations_T</type>
      <name>DEFAULT_CLASS_NB_OF_CANCELLATIONS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab8fdbc3b911d89ad78b377ec4f774f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfNoShows_T</type>
      <name>DEFAULT_CLASS_NB_OF_NOSHOWS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab1221c3391e10925af1baf85a37fc1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CabinCapacity_T</type>
      <name>DEFAULT_CABIN_CAPACITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa471e14e464668c4ba835d267af17341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CommittedSpace_T</type>
      <name>DEFAULT_COMMITTED_SPACE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a24ad2484bf3a39f1411664696917432b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BlockSpace_T</type>
      <name>DEFAULT_BLOCK_SPACE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af3bd927eb8d82e54cf062a21bfff073f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Availability_T</type>
      <name>DEFAULT_NULL_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6c10ef3d11b9b0ac8bc7985a15ff4619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Availability_T</type>
      <name>DEFAULT_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a554ef900d2a346eb442270bd2c589fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CensorshipFlag_T</type>
      <name>DEFAULT_CLASS_CENSORSHIPFLAG</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a19374f98b09b9696c4d0092fbd1e4ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BookingLimit_T</type>
      <name>DEFAULT_CLASS_BOOKING_LIMIT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4eab43d0de4aa2db81b2b5ec1a90b3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a05742e689d6d12e9682b250388641ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_MAX_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2185e6f1aa06578980541247b5393cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AuthorizationLevel_T</type>
      <name>DEFAULT_CLASS_MIN_AUTHORIZATION_LEVEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a23a3f0a2d5314c5c078fe653da38073e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OverbookingRate_T</type>
      <name>DEFAULT_CLASS_OVERBOOKING_RATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad5827a5c63a180cfaf72a3734b4c4692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Fare_T</type>
      <name>DEFAULT_FARE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac3dfa637f7f6b83cf15b761cf9dd77f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Revenue_T</type>
      <name>DEFAULT_REVENUE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aeefe5e58ea67a7a2279a88558ef875e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PriceCurrency_T</type>
      <name>DEFAULT_CURRENCY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a18fa62db3debf93d58412ba8df929e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Percentage_T</type>
      <name>DEFAULT_LOAD_FACTOR_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae1007d6421cb805f7002171fd0240550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DayDuration_T</type>
      <name>DEFAULT_DAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abf4b6dba205c87235446d9061d9d569c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>DEFAULT_EPSILON_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad5b03a6f73de54e867d79af68f9ad67b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>AIRPORT_LHR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acc57101721a7e3fb24f885b88b419370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>AIRPORT_SYD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a56c9bd57c0133c5226df658b9df7e1ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CityCode_T</type>
      <name>POS_LHR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab056bf0d57300ddf019fca07f1f12c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DayDuration_T</type>
      <name>NO_ADVANCE_PURCHASE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac5fd6594bf2de33d06b23bd4e43a105b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SaturdayStay_T</type>
      <name>SATURDAY_STAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1b503a046b9c5411e3e654ffdd37d172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SaturdayStay_T</type>
      <name>NO_SATURDAY_STAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8f9f14a55743434d8b2bd8dbf2a04eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChangeFees_T</type>
      <name>CHANGE_FEES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a098519aaf969d6a7bebf92c9efaff8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChangeFees_T</type>
      <name>NO_CHANGE_FEES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa8330523d491376b01c52aa8272fa1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NonRefundable_T</type>
      <name>NON_REFUNDABLE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4b4f8046523b594260d8831509ad17ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NonRefundable_T</type>
      <name>NO_NON_REFUNDABLE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a97a1661026099c3f0399049fb2b4a581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DayDuration_T</type>
      <name>NO_STAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5ac86e869590cb3658d5f7c61e3b3288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CabinCode_T</type>
      <name>CABIN_Y</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a875f1a1f5fff074dde2beacd6f362e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirlineCode_T</type>
      <name>AIRLINE_CODE_BA</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a27032d53cbb58800dac81feb4c0bc33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassCode_T</type>
      <name>CLASS_CODE_Y</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a213d441e58f58176171c9fa28e75e263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassCode_T</type>
      <name>CLASS_CODE_Q</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a77dbfd820c37676f07c20ba8ef10632c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>AIRPORT_SIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac4e3ebe9a632e9e98ba337e6ef627593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>AIRPORT_BKK</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8cbcf6f39b3efdb4514fd53e5f60420a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CityCode_T</type>
      <name>POS_SIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a475c50f8c3434ce2b423a44ae02930c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CabinCode_T</type>
      <name>CABIN_ECO</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a51c0834cb104fc28f6e2a5968105d019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FrequentFlyer_T</type>
      <name>FREQUENT_FLYER_MEMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaf09a84f6fa3873b6c2fcf68c8ecd951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Count_T</type>
      <name>DEFAULT_PROGRESS_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a145d88cc0964b825e37e4ed9bd584674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_EVENT_OLDEST_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a86c160a90a3eb899e193f4b01cbb9def</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DateTime_T</type>
      <name>DEFAULT_EVENT_OLDEST_DATETIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9230d5a7e408680ae6bf667c9e9cf8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Percentage_T</type>
      <name>MAXIMUM_PROGRESS_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae545c52977843d5ed958c02e3cc75952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DEFAULT_BOM_ROOT_KEY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2b11f96dd5195c292c98e65fbe5667c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfFlightDates_T</type>
      <name>DEFAULT_NB_OF_FLIGHTDATES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5ef3031a512f1eb08cadb8ec71c7d816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DEFAULT_FLIGHT_SPEED</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac460c7cae3f24bca7cba5d41a50348a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BookingRatio_T</type>
      <name>DEFAULT_OND_BOOKING_RATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad174f6f91e8f1eb3d0b5c962a788ed13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Count_T</type>
      <name>SECONDS_IN_ONE_DAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8225c4909930a4dffe99f741ecc69c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Count_T</type>
      <name>MILLISECONDS_IN_ONE_SECOND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9bcd247d0210fbbd78a56e018f8a3d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab2b42d86d72d755f17fede99c3a8dcda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DateTime_T</type>
      <name>DEFAULT_DATETIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad5984110d30d19f7d0600420b3450220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_EPSILON_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af02ca755ee2a7f2b488c6d9d7703f0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RandomSeed_T</type>
      <name>DEFAULT_RANDOM_SEED</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab2bebe3416c3b06022db624c3cc0b1cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>NULL_BOOST_TIME_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3da1c8ffa8933a767416145205a4ffd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_NULL_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7988c21c72bee8a101b9f844d2e11f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Fare_T</type>
      <name>DEFAULT_CLASS_FARE_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a81d6fb1842a6f1f6d5cb03b46b31c7a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfAirlines_T</type>
      <name>DEFAULT_NBOFAIRLINES</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad7a48cf76ec466c68bd923de0dff0b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DEFAULT_NB_OF_DAYS_IN_A_YEAR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae0aa607f264a03657e9bf9bb08d0c60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChannelLabel_T</type>
      <name>DEFAULT_CHANNEL</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa3635448b4a303bb5e2e6635433143aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DEFAULT_NUMBER_OF_SUBDIVISIONS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7ad43791ec2f3206efdc48ae91074a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirlineCode_T</type>
      <name>DEFAULT_AIRLINE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a66fce9b8e19bbeb28b10759c8fde0b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirlineCode_T</type>
      <name>DEFAULT_NULL_AIRLINE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adca9403906a9901926c7455fb1a9912c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FlightNumber_T</type>
      <name>DEFAULT_FLIGHT_NUMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afe15dfcc167c06e03d3e21c062e1e43d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FlightNumber_T</type>
      <name>DEFAULT_FLIGHT_NUMBER_FF</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>adeba05b12ba23987eef1c9b56a06373c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TableID_T</type>
      <name>DEFAULT_TABLE_ID</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad80c3d20fd0d7c38025cbc1e39ce7686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_DEPARTURE_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aec702610db69a740670bcd9ab1aec39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>DEFAULT_AIRPORT_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9991b493a46656c7ec54bef82495dfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>DEFAULT_NULL_AIRPORT_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a43d4ad0ede740e6b5cb104e520052fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>DEFAULT_ORIGIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7b4e79a1f3b3df7fb604d77d2ee1213d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirportCode_T</type>
      <name>DEFAULT_DESTINATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6613aee52652d3abae8bcd8e0f57abef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CabinCode_T</type>
      <name>DEFAULT_CABIN_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5848a0dee84541d22db6fb479686cb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FamilyCode_T</type>
      <name>DEFAULT_FARE_FAMILY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa2af2829dedd429249a50df9c9030b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FamilyCode_T</type>
      <name>DEFAULT_NULL_FARE_FAMILY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abc04773d32cef2af568d500ee2b40adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyCode_T</type>
      <name>DEFAULT_POLICY_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aff5803d10a1ffccdb9c082950b6f7d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NestingStructureCode_T</type>
      <name>DEFAULT_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a88831cfcd789585d10e3090aaee4b97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NestingStructureCode_T</type>
      <name>DISPLAY_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2b4f2f31beff6b8144c1109c47184afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NestingStructureCode_T</type>
      <name>YIELD_BASED_NESTING_STRUCTURE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab28c8bcd8248b64dc42cc94726c8182c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NestingNodeCode_T</type>
      <name>DEFAULT_NESTING_NODE_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afd2d632a017482f635a603686b0d2cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassCode_T</type>
      <name>DEFAULT_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa499aea3ef4e308979b2d2f6464dc20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ClassCode_T</type>
      <name>DEFAULT_NULL_CLASS_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2b0d0e59af96856df7d649dc986f28b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BidPrice_T</type>
      <name>DEFAULT_BID_PRICE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac97e6e639e2e2469c2c46d88ef2a8e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned short</type>
      <name>MAXIMAL_NUMBER_OF_LEGS_IN_FLIGHT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2efd4633743d4aebcf51fb738ffa526f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned short</type>
      <name>MAXIMAL_NUMBER_OF_SEGMENTS_IN_OND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a74c5ab635504b011a3eea6e64475660e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Availability_T</type>
      <name>MAXIMAL_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a28a04270b3996cb917166e44b53b55c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SeatIndex_T</type>
      <name>DEFAULT_SEAT_INDEX</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab08bb07fed078c5979c67c690aea601e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NbOfSeats_T</type>
      <name>DEFAULT_NULL_BOOKING_NUMBER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a277c74488eedddab95b1add81cf0e11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CapacityAdjustment_T</type>
      <name>DEFAULT_NULL_CAPACITY_ADJUSTMENT</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ac0611ba76a8e94d9ee3fec445f2789ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UPR_T</type>
      <name>DEFAULT_NULL_UPR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5df1024128bae9cddb7bede866de6d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DEFAULT_FARE_FAMILY_VALUE_TYPE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>abef131f30377a1375bc310ed07978fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>DEFAULT_SEGMENT_CABIN_VALUE_TYPE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a422a589d033480fb4c0309285ab71406</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DatePeriod_T</type>
      <name>BOOST_DEFAULT_DATE_PERIOD</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7dd4845022110c64be37a29c0bddda96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DOW_String_T</type>
      <name>DEFAULT_DOW_STRING</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>add761873d0329a533ceb00590a5db99e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DateOffset_T</type>
      <name>DEFAULT_DATE_OFFSET</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad8771285b2c76d00364f5a6c535e53ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PartySize_T</type>
      <name>DEFAULT_PARTY_SIZE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a03e95641d581277fb595921c2b4fba67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DayDuration_T</type>
      <name>DEFAULT_STAY_DURATION</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8f658fc38968c51a2288af40cf3dfa86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const WTP_T</type>
      <name>DEFAULT_WTP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1ff2f7327a614d145fbe55ae5e24bdff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CityCode_T</type>
      <name>DEFAULT_POS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab533ca102ec6088fd6b0aadd7f7d3561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_PREFERRED_DEPARTURE_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a604a4f92e4a9f2d168a092c897b79da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_PREFERRED_DEPARTURE_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae40e1c613a0ea99ae4b1a8046b6b33db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DateOffset_T</type>
      <name>DEFAULT_ADVANCE_PURCHASE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a221eb41c656c10fc63b56de57b092e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Date_T</type>
      <name>DEFAULT_REQUEST_DATE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad67d6bee2ff0eec1d5f4654e4ed7b352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_REQUEST_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afd145c1a3b93ddf87f402e09e9f1f278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DateTime_T</type>
      <name>DEFAULT_REQUEST_DATE_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1a96e87682c40214e7138a7826aa9cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CabinCode_T</type>
      <name>DEFAULT_PREFERRED_CABIN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4faf1958e9cc3b87162918a9967d4fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChannelLabel_T</type>
      <name>CHANNEL_DN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2f70c12a8f2fdb14bd4cc62fcee0d768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChannelLabel_T</type>
      <name>CHANNEL_IN</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af39c23bd8d9a5aa95f75e7f997b5af25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_ONE_WAY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa60ce98643163d352528344851cd15c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_ROUND_TRIP</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4166cba933e5ac4fa65a5aafa54d0e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_INBOUND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a40edd65b6d6ec30e9dc836210b2eeea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TripType_T</type>
      <name>TRIP_TYPE_OUTBOUND</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a5e59290bfb06e5bd9f112c225d34f57e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FrequentFlyer_T</type>
      <name>DEFAULT_FF_TIER</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3c7287ee9b43e0cfbf5f89becfc76021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PriceValue_T</type>
      <name>DEFAULT_VALUE_OF_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a718e840a1e0255d13d19152961cd98b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IntDuration_T</type>
      <name>HOUR_CONVERTED_IN_SECONDS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab0fa744a288814f3309843bb4cf65ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_MINIMAL_CONNECTION_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a21606e037bc6cc5e4fc371e567eb8ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Duration_T</type>
      <name>DEFAULT_MAXIMAL_CONNECTION_TIME</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a4eed196457750b89c2c3b08714f46706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FlightPathCode_T</type>
      <name>DEFAULT_FLIGHTPATH_CODE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a06235d792a438f9d80afc7644629c944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Availability_T</type>
      <name>DEFAULT_CLASS_AVAILABILITY</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a05bb8949631d4dd3e0dda4b26a3fcbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AvailabilityStatus_T</type>
      <name>DEFAULT_AVAILABILITY_STATUS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a842c33cc7eef3e703935cb2e39c25f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned short</type>
      <name>DEFAULT_NUMBER_OF_REQUIRED_SEATS</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ade0e71d2cd7a82fe8358321d27eb2ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MatchingIndicator_T</type>
      <name>DEFAULT_MATCHING_INDICATOR</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab82f09842e7d608ee61feadbd665a1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AirlineCode_T</type>
      <name>DEFAULT_DICO_STUDIED_AIRLINE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6c93527bf95df72f9606bdce7a9a9705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Yield_T</type>
      <name>DEFAULT_YIELD_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a24aa5cf3e715709c12309c360ecccaad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Yield_T</type>
      <name>DEFAULT_YIELD_MAX_VALUE</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ad9f93fac202246c4095ccbbd25ac707a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>stdair::LOG</name>
    <filename>a00560.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>EN_LogLevel</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a0e942800c20ab8c1dc913408f555112d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>_logLevels</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>ab15e937386bb6bc190838e738083f1fc</anchor>
      <arglist>[LAST_VALUE]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>stdair_test</name>
    <filename>a00561.html</filename>
    <class kind="struct">stdair_test::BookingClass</class>
    <class kind="struct">stdair_test::Cabin</class>
  </compound>
  <compound kind="namespace">
    <name>swift</name>
    <filename>a00562.html</filename>
    <class kind="class">swift::SKeymap</class>
    <class kind="class">swift::SReadline</class>
  </compound>
  <compound kind="page">
    <name>BomAbstract</name>
    <title></title>
    <filename>a00002</filename>
  </compound>
  <compound kind="page">
    <name>bom_display_cpp</name>
    <title>C++ Utility Class Browsing and Dumping the StdAir BOM Tree</title>
    <filename>a00004</filename>
  </compound>
  <compound kind="page">
    <name>KeyAbstract</name>
    <title></title>
    <filename>a00006</filename>
  </compound>
  <compound kind="page">
    <name>cmd_bom_manager_cpp</name>
    <title>C++ Class Building Sample StdAir BOM Trees</title>
    <filename>a00008</filename>
  </compound>
  <compound kind="page">
    <name>stdair_service_context_cpp</name>
    <title>C++ Class Storing the StdAir Context</title>
    <filename>a00010</filename>
  </compound>
  <compound kind="page">
    <name>authors</name>
    <title>People</title>
    <filename>a00012</filename>
    <docanchor file="a00012" title="Project Admins (and Developers)">admins</docanchor>
    <docanchor file="a00012" title="Retired Developers">retired</docanchor>
    <docanchor file="a00012" title="Contributors">contributors</docanchor>
    <docanchor file="a00012" title="Distribution Maintainers">distributors</docanchor>
    <docanchor file="index">N</docanchor>
  </compound>
  <compound kind="page">
    <name>coding_rules</name>
    <title>Coding Rules</title>
    <filename>a00014</filename>
    <docanchor file="a00014" title="Default Naming Rules for Variables">cr_variables</docanchor>
    <docanchor file="a00014" title="Default Naming Rules for Functions">cr_functions</docanchor>
    <docanchor file="a00014" title="Default Naming Rules for Classes and Structures">cr_classes</docanchor>
    <docanchor file="a00014" title="Default Naming Rules for Files">cr_files</docanchor>
    <docanchor file="a00014" title="Default Functionality of Classes">cr_classes_functionality</docanchor>
  </compound>
  <compound kind="page">
    <name>copyright</name>
    <title>Copyright and License</title>
    <filename>a00016</filename>
    <docanchor file="a00016" title="GNU LESSER GENERAL PUBLIC LICENSE">gnugpl</docanchor>
    <docanchor file="a00016" title="Version 2.1, February 1999">version</docanchor>
    <docanchor file="a00016" title="Preamble">preamble</docanchor>
    <docanchor file="a00016" title="TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION">terms</docanchor>
    <docanchor file="a00016" title="NO WARRANTY">nowarranty</docanchor>
    <docanchor file="a00016" title="END OF TERMS AND CONDITIONS">endofterms</docanchor>
    <docanchor file="a00016" title="How to Apply These Terms to Your New Programs">howtoapply</docanchor>
  </compound>
  <compound kind="page">
    <name>documentation</name>
    <title>Documentation Rules</title>
    <filename>a00018</filename>
    <docanchor file="a00018" title="General Rules">doc_general</docanchor>
    <docanchor file="a00018" title="File Header">doc_header</docanchor>
    <docanchor file="a00018" title="Grouping Various Parts">doc_groups</docanchor>
  </compound>
  <compound kind="page">
    <name>features</name>
    <title>Main features</title>
    <filename>a00020</filename>
    <docanchor file="a00020" title="Standard Airline IT Business Object Model (BOM)">airline_it_bom</docanchor>
    <docanchor file="a00020" title="Architecture of the StdAir library">architecture</docanchor>
  </compound>
  <compound kind="page">
    <name>help_wanted</name>
    <title>Make a Difference</title>
    <filename>a00022</filename>
  </compound>
  <compound kind="page">
    <name>howto_release</name>
    <title>Make a new release</title>
    <filename>a00024</filename>
    <docanchor file="a00024" title="Introduction">description</docanchor>
    <docanchor file="a00024" title="Initialisation">initialisation</docanchor>
    <docanchor file="a00024" title="Branch creation">branch_creation</docanchor>
    <docanchor file="a00024" title="Commit and publish the release branch">branch_publish</docanchor>
    <docanchor file="a00024" title="Update the change-log in the trunk as well">trunk_update</docanchor>
    <docanchor file="a00024" title="Create distribution packages">create_packages</docanchor>
    <docanchor file="a00024" title="Generation the RPM packages">generate_rpm_packages</docanchor>
    <docanchor file="a00024" title="Update distributed change log">update_changelog</docanchor>
    <docanchor file="a00024" title="Create the binary package, including the documentation">create_bin_packages</docanchor>
    <docanchor file="a00024" title="Files on GitHub">upload_files</docanchor>
    <docanchor file="a00024" title="Upload the documentation to GitHub">upload_doc</docanchor>
  </compound>
  <compound kind="page">
    <name>installation</name>
    <title>Installation</title>
    <filename>a00026</filename>
    <docanchor file="a00034" title="Table of Contents">toc</docanchor>
    <docanchor file="a00026" title="Fedora/RedHat Linux distributions">rpm_linux</docanchor>
    <docanchor file="a00026" title="StdAir Requirements">requirements</docanchor>
    <docanchor file="a00026" title="Basic Installation">basic_instructions</docanchor>
    <docanchor file="a00026" title="Compilers and Options">compilers</docanchor>
    <docanchor file="a00026" title="Compiling For Multiple Architectures">compiling_for_multi_arch</docanchor>
    <docanchor file="a00026" title="Installation Names">installation_names</docanchor>
    <docanchor file="a00026" title="Optional Features">optional_features</docanchor>
    <docanchor file="a00026" title="Particular systems">particular_systems</docanchor>
    <docanchor file="a00026" title="Specifying the System Type">specifying_system_type</docanchor>
    <docanchor file="a00026" title="Sharing Defaults">sharing_defaults</docanchor>
    <docanchor file="a00026" title="Defining Variables">defining_variables</docanchor>
    <docanchor file="a00026" title="`cmake&apos; Invocation">cmake_invocation</docanchor>
  </compound>
  <compound kind="page">
    <name>linking</name>
    <title>Linking with StdAir</title>
    <filename>a00028</filename>
    <docanchor file="a00034" title="Introduction">intro</docanchor>
    <docanchor file="a00028" title="Using the pkg-config command">pkgconfig</docanchor>
    <docanchor file="a00028" title="Using the stdair-config script">stdair_config</docanchor>
    <docanchor file="a00028" title="M4 macro for the GNU Autotools">autotools</docanchor>
    <docanchor file="a00028" title="Using StdAir with dynamic linking">dynamiclinking</docanchor>
  </compound>
  <compound kind="page">
    <name>test</name>
    <title>Test Rules</title>
    <filename>a00030</filename>
    <docanchor file="a00030" title="The Test Source Files">test_source</docanchor>
    <docanchor file="a00030" title="The Reference File">reference_file</docanchor>
    <docanchor file="a00030" title="Testing StdAir Library">testing_using_make</docanchor>
  </compound>
  <compound kind="page">
    <name>users_guide</name>
    <title>Users Guide</title>
    <filename>a00032</filename>
    <docanchor file="a00032" title="Table of Contents">ug_toc</docanchor>
    <docanchor file="a00032" title="Introduction">ug_introduction</docanchor>
    <docanchor file="a00032" title="Get Started">ug_get_started</docanchor>
    <docanchor file="a00032" title="Get the StdAir library">ug_get_source</docanchor>
    <docanchor file="a00032" title="Build the StdAir project">ug_build_binaries</docanchor>
    <docanchor file="a00032" title="Build and Run the Tests">ug_build_and_run_tests</docanchor>
    <docanchor file="a00032" title="Install the StdAir Project (Binaries, Documentation)">ug_install_project</docanchor>
    <docanchor file="a00032" title="Exploring the Predefined BOM Tree">ug_bom_tree</docanchor>
    <docanchor file="a00032" title="Airline Distribution BOM Tree">ug_bom_distribution</docanchor>
    <docanchor file="a00032" title="Airline Network BOM Tree">ug_bom_schedule</docanchor>
    <docanchor file="a00032" title="Airline Inventory BOM Tree">ug_bom_inventory</docanchor>
    <docanchor file="a00032" title="Airline Inventory Marketing BOM Tree">ug_bom_segment_branch</docanchor>
    <docanchor file="a00032" title="Airline Inventory Operating BOM Tree">ug_bom_leg_branch</docanchor>
    <docanchor file="a00032" title="Extending the BOM Tree">ug_extending_bom_tree</docanchor>
  </compound>
  <compound kind="page">
    <name>verification</name>
    <title>Supported Systems</title>
    <filename>a00034</filename>
    <docanchor file="a00034" title="StdAir 3.10.x">stdair_3_10</docanchor>
    <docanchor file="a00034" title="Linux Systems">linux</docanchor>
    <docanchor file="a00034" title="Fedora Core 4 with ATLAS">fedora_atlas</docanchor>
    <docanchor file="a00034" title="Gentoo Linux with ACML">gentoo_acml</docanchor>
    <docanchor file="a00034" title="Gentoo Linux with ATLAS">gentoo_atlas</docanchor>
    <docanchor file="a00034" title="Gentoo Linux with MKL">gentoo_mkl</docanchor>
    <docanchor file="a00034" title="Gentoo Linux with NetLib&apos;s BLAS and LAPACK">gentoo_netlib</docanchor>
    <docanchor file="a00034" title="Red Hat Enterprise Linux with StdAir External">rhel</docanchor>
    <docanchor file="a00034" title="SUSE Linux 10.0 with NetLib&apos;s BLAS and LAPACK">suse_netlib</docanchor>
    <docanchor file="a00034" title="SUSE Linux 10.0 with MKL">suse_mkl</docanchor>
    <docanchor file="a00034" title="Windows Systems">windows</docanchor>
    <docanchor file="a00034" title="Microsoft Windows XP with Cygwin">cygwin</docanchor>
    <docanchor file="a00034" title="Microsoft Windows XP with Cygwin and ATLAS">cygwin_atlas</docanchor>
    <docanchor file="a00034" title="Microsoft Windows XP with Cygwin and ACML">cygwin_acml</docanchor>
    <docanchor file="a00034" title="Microsoft Windows XP with MinGW, MSYS and ACML">mingw_acml</docanchor>
    <docanchor file="a00034" title="Microsoft Windows XP with MinGW, MSYS and StdAir External">mingw_netlib</docanchor>
    <docanchor file="a00034" title="Microsoft Windows XP with MS Visual C++ and Intel MKL">msvc_mkl</docanchor>
    <docanchor file="a00034" title="Unix Systems">unix</docanchor>
    <docanchor file="a00034" title="SunOS 5.9 with StdAir External">sunos59</docanchor>
  </compound>
  <compound kind="page">
    <name>verification_old</name>
    <title>StdAir Supported Systems (Previous Releases)</title>
    <filename>a00036</filename>
    <docanchor file="a00036" title="StdAir 3.9.1">stdair_3_9_1</docanchor>
    <docanchor file="a00036" title="StdAir 3.9.0">stdair_3_9_0</docanchor>
    <docanchor file="a00036" title="StdAir 3.8.1">stdair_3_8_1</docanchor>
  </compound>
  <compound kind="page">
    <name>tutorials</name>
    <title>Tutorials</title>
    <filename>a00038</filename>
    <docanchor file="a00038" title="Table of Contents">tut_toc</docanchor>
    <docanchor file="a00038" title="Introduction">tut_introduction</docanchor>
    <docanchor file="a00038" title="Preparing the StdAir Project for Development">tut_intro_configuration</docanchor>
    <docanchor file="a00038" title="Build a Predefined BOM Tree">tut_build_bom_tree</docanchor>
    <docanchor file="a00038" title="Instanciate the BOM Root Object">tut_build_bom_root</docanchor>
    <docanchor file="a00038" title="Instanciate the (Airline) Inventory Object">tut_build_inventory</docanchor>
    <docanchor file="a00038" title="Link the Inventory Object with the BOM Root">tut_build_link</docanchor>
    <docanchor file="a00038" title="Build Another Airline Inventory">tut_build_inventory_another</docanchor>
    <docanchor file="a00038" title="Dump The BOM Tree Content">tut_dump_bom_tree</docanchor>
    <docanchor file="a00038" title="Result of the Tutorial Program">tut_result_output</docanchor>
    <docanchor file="a00038" title="Extend the Pre-Defined BOM Tree">tut_extend_bom_tree</docanchor>
    <docanchor file="a00038" title="Extend an Airline Inventory Object">tut_extend_inventory</docanchor>
    <docanchor file="a00038" title="Build the Specific BOM Objects">tut_extend_build</docanchor>
    <docanchor file="a00038" title="Result of the Tutorial Program">tut_extend_result_output</docanchor>
  </compound>
  <compound kind="page">
    <name>batch_stdair_cpp</name>
    <title>Command-Line Utility to Demonstrate Typical StdAir Usage</title>
    <filename>a00040</filename>
  </compound>
  <compound kind="page">
    <name>test_archi_root_cpp</name>
    <title>Specific Implementation of a BOM Root</title>
    <filename>a00042</filename>
  </compound>
  <compound kind="page">
    <name>test_archi_root_hpp</name>
    <title>Specific Implementation of a BOM Root</title>
    <filename>a00044</filename>
  </compound>
  <compound kind="page">
    <name>test_archi_inv_cpp</name>
    <title>Specific Implementation of an Airline Inventory</title>
    <filename>a00046</filename>
  </compound>
  <compound kind="page">
    <name>test_archi_inv_hpp</name>
    <title>Specific Implementation of an Airline Inventory</title>
    <filename>a00048</filename>
  </compound>
  <compound kind="page">
    <name>StandardAirlineITTestSuite_cpp</name>
    <title>Command-Line Test to Demonstrate How To Extend StdAir BOM</title>
    <filename>a00050</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>StdAir Documentation</title>
    <filename>index</filename>
    <docanchor file="index" title="Getting Started">getting_started</docanchor>
    <docanchor file="index" title="StdAir on GitHub">at_github</docanchor>
    <docanchor file="index" title="StdAir Development">development</docanchor>
    <docanchor file="index" title="External Libraries">external_libs</docanchor>
    <docanchor file="index" title="Support StdAir">social_sponsorship</docanchor>
    <docanchor file="index" title="About StdAir">about</docanchor>
  </compound>
</tagfile>
